"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[35256],{16201:(t,e,i)=>{i.r(e),i.d(e,{assets:()=>b,contentTitle:()=>h,default:()=>R,frontMatter:()=>f,metadata:()=>a,toc:()=>I});const a=JSON.parse('{"id":"api/get-realm-country-by-realm-id","title":"Get RealmCountry list for a specific realmId","description":"API used to get the RealmCountry list for a specific realmId","source":"@site/docs/api/get-realm-country-by-realm-id.api.mdx","sourceDirName":"api","slug":"/api/get-realm-country-by-realm-id","permalink":"/fasp-documentation/docs/api/get-realm-country-by-realm-id","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"get-realm-country-by-realm-id","title":"Get RealmCountry list for a specific realmId","description":"API used to get the RealmCountry list for a specific realmId","sidebar_label":"Get RealmCountry list for a specific realmId","hide_title":true,"hide_table_of_contents":true,"api":"eJyllE1zGjEMhv+Kx5e2MxQoaS97Kmm+uOQDyCmTySi7gnW72I6thTI7+98rmyVsEtI00xP2IumV5EeqJMHcy+RGOoRi8cOUmtxa3nZkhj51ypIyWiZyeDkSpcdMkBFzJEE5inHLQxTKk5gZJ0B4i6maqVTEkKNMdqSx6CCE4lsiOUDb93A9fjS04GCBhC7kVEnNF3bYBVIhGQuUy+cZNjE4MyCxNqVYgab9ObKvw4dSOeRsyJXYkT7NcQEyqSStbZBUmnCOwZQdFkCbTwcDWde3wd1boz364DHo98PP83SodNrvbxRHTQ0LaIqK+Jt6P31wq+q67siv/YPXA4I4I7ITAip99+RifDg6Ojo+F2oWpa49OpEZ9EIbEjksUUCaovdvSn79R8nzi+ndycX1+VGQ1Gb7yNzXUmdvqHzb16kR2zsNhUDnmJ/4ftbhkoME3rgoh+RQLdnEzN7ZTBZlnHLTYBcJY3gS2QOrem3me00hvao51GzM3VxuWSxdwX45d8Invd5qteo+lIxYID2iDVzDmlTqu8bNX+B56UxWpuEiNkHjsFwNp2y5BKfgvog0RbyUnplYjKIiwHj1REiAzsRwqyamxhQhCOe5kRp0vwy6/RcZ8Ah/8GF+N0DEzrK+mMR0mi5CGrvYzN3JcHIpCGHB/763fB4nFTzOJpO7EOfu7Or7PPfpZ+sX0YSfplAp8hS1FIcWeBLFJv+nkjNjuvfgZHhTazwtQLccT/GVYd+/kJ60ptoB9L+LrtkekUJbAK+ruqmjasi7kUxe3ECtfdtprbhke2QQcq4zuFTVPXi8dkVdh88PJbJTcnO7Yycimikfzgz7DAqPfynz47hZgJ/E+xbn3gKbj6DXkeaiDDc+/sJ1a3vXt2yaI2RMW8h28++QabTU8ttNcBiFx+k9PZ7y0/8BZBVO9w==","sidebar_class_name":"get api-method","info_path":"docs/api/quantification-and-analytics-tool","custom_edit_url":null},"sidebar":"api-latest","previous":{"title":"Get RealmCountryPlanningUnit list for a specific programIds","permalink":"/fasp-documentation/docs/api/get-planning-unit-for-program-list-1"},"next":{"title":"Get PlanningUnit list for a specific realmCountryId","permalink":"/fasp-documentation/docs/api/get-planning-unit-for-country"}}');var n=i(74848),o=i(28453),r=i(57742),s=i.n(r),l=i(78178),d=i.n(l),c=i(19624),m=i.n(c),p=i(96226),u=i.n(p),y=(i(77675),i(19365),i(51107));const f={id:"get-realm-country-by-realm-id",title:"Get RealmCountry list for a specific realmId",description:"API used to get the RealmCountry list for a specific realmId",sidebar_label:"Get RealmCountry list for a specific realmId",hide_title:!0,hide_table_of_contents:!0,api:"eJyllE1zGjEMhv+Kx5e2MxQoaS97Kmm+uOQDyCmTySi7gnW72I6thTI7+98rmyVsEtI00xP2IumV5EeqJMHcy+RGOoRi8cOUmtxa3nZkhj51ypIyWiZyeDkSpcdMkBFzJEE5inHLQxTKk5gZJ0B4i6maqVTEkKNMdqSx6CCE4lsiOUDb93A9fjS04GCBhC7kVEnNF3bYBVIhGQuUy+cZNjE4MyCxNqVYgab9ObKvw4dSOeRsyJXYkT7NcQEyqSStbZBUmnCOwZQdFkCbTwcDWde3wd1boz364DHo98PP83SodNrvbxRHTQ0LaIqK+Jt6P31wq+q67siv/YPXA4I4I7ITAip99+RifDg6Ojo+F2oWpa49OpEZ9EIbEjksUUCaovdvSn79R8nzi+ndycX1+VGQ1Gb7yNzXUmdvqHzb16kR2zsNhUDnmJ/4ftbhkoME3rgoh+RQLdnEzN7ZTBZlnHLTYBcJY3gS2QOrem3me00hvao51GzM3VxuWSxdwX45d8Invd5qteo+lIxYID2iDVzDmlTqu8bNX+B56UxWpuEiNkHjsFwNp2y5BKfgvog0RbyUnplYjKIiwHj1REiAzsRwqyamxhQhCOe5kRp0vwy6/RcZ8Ah/8GF+N0DEzrK+mMR0mi5CGrvYzN3JcHIpCGHB/763fB4nFTzOJpO7EOfu7Or7PPfpZ+sX0YSfplAp8hS1FIcWeBLFJv+nkjNjuvfgZHhTazwtQLccT/GVYd+/kJ60ptoB9L+LrtkekUJbAK+ruqmjasi7kUxe3ECtfdtprbhke2QQcq4zuFTVPXi8dkVdh88PJbJTcnO7Yycimikfzgz7DAqPfynz47hZgJ/E+xbn3gKbj6DXkeaiDDc+/sJ1a3vXt2yaI2RMW8h28++QabTU8ttNcBiFx+k9PZ7y0/8BZBVO9w==",sidebar_class_name:"get api-method",info_path:"docs/api/quantification-and-analytics-tool",custom_edit_url:null},h=void 0,b={},I=[];function k(t){const e={p:"p",...(0,o.R)(),...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(y.default,{as:"h1",className:"openapi__heading",children:"Get RealmCountry list for a specific realmId"}),"\n",(0,n.jsx)(s(),{method:"get",path:"/api/realmCountry/realmId/{realmId}",context:"endpoint"}),"\n",(0,n.jsx)(e.p,{children:"API used to get the RealmCountry list for a specific realmId"}),"\n",(0,n.jsx)(y.default,{id:"request",as:"h2",className:"openapi-tabs__heading",children:"Request"}),"\n",(0,n.jsx)(d(),{parameters:[{name:"realmId",in:"path",description:"RealmId that you want RealmCountry list for",required:!0,schema:{type:"integer",format:"int32"}}]}),"\n",(0,n.jsx)(m(),{title:"Body",body:void 0}),"\n",(0,n.jsx)(u(),{id:void 0,label:void 0,responses:{200:{description:"Returns the RealmCountry list",content:{"text/json":{}}},403:{description:"Returns a HttpStatus.FORBIDDEN if the User does not have access",content:{"text/json":{}}},404:{description:"Returns a HttpStatus.NOT_FOUND if no realmId found",content:{"text/json":{}}},500:{description:"Internal error that prevented the retreival of RealmCountry list",content:{"text/json":{}}}}})]})}function R(t={}){const{wrapper:e}={...(0,o.R)(),...t.components};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(k,{...t})}):k(t)}}}]);