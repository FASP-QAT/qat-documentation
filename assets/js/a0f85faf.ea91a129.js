"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[18486],{40865:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>f,contentTitle:()=>u,default:()=>q,frontMatter:()=>h,metadata:()=>r,toc:()=>v});const r=JSON.parse('{"id":"api/get-tracer-category-for-realm-program","title":"Get TracerCategory list for Realm and Program","description":"API used to get the complete TracerCategory list for a Realm and Program","source":"@site/docs/api/get-tracer-category-for-realm-program.api.mdx","sourceDirName":"api","slug":"/api/get-tracer-category-for-realm-program","permalink":"/fasp-documentation/docs/api/get-tracer-category-for-realm-program","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"get-tracer-category-for-realm-program","title":"Get TracerCategory list for Realm and Program","description":"API used to get the complete TracerCategory list for a Realm and Program","sidebar_label":"Get TracerCategory list for Realm and Program","hide_title":true,"hide_table_of_contents":true,"api":"eJy9VcFy2jAQ/RWNLm1nKKYkvfhU2oSES0KAnDJMZmMvWK2xFEmGMh7/e1eywZBC0zCdnizZu/ue1m+fCm5hbnj4wK2GCPU3sDiXes2nLR6jibRQVsiMh7w3HLDcYMysZHO0zCbIIrlQKVpkk71klgpj2UxqBmyEkC4YZDEbajnXsOAtLhVqcGUHMRWmYvvpfal9VpOggJ6Eox3Tgme0oUTtgqhEiwtHUIFN+EvWoyqG2IJla5mzFWQV9yOUqYLG51xoJG5W59jiJkpwATwsuF0rBywySkIXSgkLsNWrsy4vy9aWnarYv8JvuIn6bwynLt0omRk0LqPb6bjHy7bZXGfmGA2qG0mCyKzHxJ82+G5cYlFSC/h55+x4SWDX1qqxBZubdv929HVwcXF5w8TMg90b1CyWaFgmLUtgiQyiCI15FfL8LyFvbieP/dv7m4sN5EYiRmEkZoIUvsXHn68f9vOh/g0oXmeQMtSaxsD/W6VxSUXcBBGqRqtRLClEzt7cYoKlcUhkPT5+QkhcIQ9AiWB/koN6TIKiXpTBVppBsV2WVIR6v9zMWK5TqpdQ30wYBKvVqv2ckzCpQZEfXaDTra2ITFvq+SFZx3nkNqwq6t3grjehyCVoAU+pV5+Xo8hm0h9S2NSJ924PyHtHb4PGJlKmrgjxrKC67U/dduc3BmRX74zzqko+vueEz8aeTt1diHx364nt98ZDZtE7zluPT+MnXMb1ePzo6jxe332ZJyb6qMzCh9AvS0WENHU7iD0FNLms4r8POZOy/QTaWQpX0tgFZDuJV2TAxzz3kOPu9aZolPUvXb22Hi9VlQJ5Xlkfqqjl+cBJni5y/6pp7Th52Cx3DTRsNiSYhPrhqhXFExi812lZutfPOVK18GHaaMxLORbGrWlYZpAa/EM33o9qY/3ATrk4DnagfgnZ2ms/zd2Olj9wvXOHuYvjJJ6nXSAnMG3+QDml4AQhpjly/a2+92jOlN3JbDzLDfnWr64uJyTqX9v97mA=","sidebar_class_name":"get api-method","info_path":"docs/api/quantification-and-analytics-tool","custom_edit_url":null},"sidebar":"api-latest","previous":{"title":"Get TracerCategory list for Realm","permalink":"/fasp-documentation/docs/api/get-tracer-category-for-realm"},"next":{"title":"Get TracerCategory list for Realm and active ProgramPlanningUnits","permalink":"/fasp-documentation/docs/api/get-tracer-category-for-realm-programs"}}');var o=a(74848),n=a(28453),i=a(57742),s=a.n(i),l=a(78178),m=a.n(l),c=a(19624),d=a.n(c),p=a(96226),g=a.n(p),y=(a(77675),a(19365),a(51107));const h={id:"get-tracer-category-for-realm-program",title:"Get TracerCategory list for Realm and Program",description:"API used to get the complete TracerCategory list for a Realm and Program",sidebar_label:"Get TracerCategory list for Realm and Program",hide_title:!0,hide_table_of_contents:!0,api:"eJy9VcFy2jAQ/RWNLm1nKKYkvfhU2oSES0KAnDJMZmMvWK2xFEmGMh7/e1eywZBC0zCdnizZu/ue1m+fCm5hbnj4wK2GCPU3sDiXes2nLR6jibRQVsiMh7w3HLDcYMysZHO0zCbIIrlQKVpkk71klgpj2UxqBmyEkC4YZDEbajnXsOAtLhVqcGUHMRWmYvvpfal9VpOggJ6Eox3Tgme0oUTtgqhEiwtHUIFN+EvWoyqG2IJla5mzFWQV9yOUqYLG51xoJG5W59jiJkpwATwsuF0rBywySkIXSgkLsNWrsy4vy9aWnarYv8JvuIn6bwynLt0omRk0LqPb6bjHy7bZXGfmGA2qG0mCyKzHxJ82+G5cYlFSC/h55+x4SWDX1qqxBZubdv929HVwcXF5w8TMg90b1CyWaFgmLUtgiQyiCI15FfL8LyFvbieP/dv7m4sN5EYiRmEkZoIUvsXHn68f9vOh/g0oXmeQMtSaxsD/W6VxSUXcBBGqRqtRLClEzt7cYoKlcUhkPT5+QkhcIQ9AiWB/koN6TIKiXpTBVppBsV2WVIR6v9zMWK5TqpdQ30wYBKvVqv2ckzCpQZEfXaDTra2ITFvq+SFZx3nkNqwq6t3grjehyCVoAU+pV5+Xo8hm0h9S2NSJ924PyHtHb4PGJlKmrgjxrKC67U/dduc3BmRX74zzqko+vueEz8aeTt1diHx364nt98ZDZtE7zluPT+MnXMb1ePzo6jxe332ZJyb6qMzCh9AvS0WENHU7iD0FNLms4r8POZOy/QTaWQpX0tgFZDuJV2TAxzz3kOPu9aZolPUvXb22Hi9VlQJ5Xlkfqqjl+cBJni5y/6pp7Th52Cx3DTRsNiSYhPrhqhXFExi812lZutfPOVK18GHaaMxLORbGrWlYZpAa/EM33o9qY/3ATrk4DnagfgnZ2ms/zd2Olj9wvXOHuYvjJJ6nXSAnMG3+QDml4AQhpjly/a2+92jOlN3JbDzLDfnWr64uJyTqX9v97mA=",sidebar_class_name:"get api-method",info_path:"docs/api/quantification-and-analytics-tool",custom_edit_url:null},u=void 0,f={},v=[];function T(e){const t={p:"p",...(0,n.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(y.default,{as:"h1",className:"openapi__heading",children:"Get TracerCategory list for Realm and Program"}),"\n",(0,o.jsx)(s(),{method:"get",path:"/api/tracerCategory/realmId/{realmId}/programId/{programId}",context:"endpoint"}),"\n",(0,o.jsx)(t.p,{children:"API used to get the complete TracerCategory list for a Realm and Program"}),"\n",(0,o.jsx)(y.default,{id:"request",as:"h2",className:"openapi-tabs__heading",children:"Request"}),"\n",(0,o.jsx)(m(),{parameters:[{name:"realmId",in:"path",description:"RealmId that you want the TracerCategory list for",required:!0,schema:{type:"integer",format:"int32"}},{name:"programId",in:"path",description:"ProgramId that you want the TracerCategory list for",required:!0,schema:{type:"integer",format:"int32"}}]}),"\n",(0,o.jsx)(d(),{title:"Body",body:void 0}),"\n",(0,o.jsx)(g(),{id:void 0,label:void 0,responses:{200:{description:"Returns the TracerCategory list",content:{"text/json":{}}},403:{description:"Returns a HttpStatus.FORBIDDEN if the User does not have access",content:{"text/json":{}}},404:{description:"Returns a HttpStatus.NOT_FOUND if the RealmId specified does not exist",content:{"text/json":{}}},500:{description:"Internal error that prevented the retreival of TracerCategory list",content:{"text/json":{}}}}})]})}function q(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(T,{...e})}):T(e)}}}]);