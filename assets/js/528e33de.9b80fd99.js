"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[62824],{99395:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>U,contentTitle:()=>y,default:()=>C,frontMatter:()=>g,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"api/get-planning-unit-for-country","title":"Get PlanningUnit list for a specific realmCountryId","description":"API used to get the active PlanningUnit list for a specific realmCountryId","source":"@site/docs/api/get-planning-unit-for-country.api.mdx","sourceDirName":"api","slug":"/api/get-planning-unit-for-country","permalink":"/fasp-documentation/docs/api/get-planning-unit-for-country","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"get-planning-unit-for-country","title":"Get PlanningUnit list for a specific realmCountryId","description":"API used to get the active PlanningUnit list for a specific realmCountryId","sidebar_label":"Get PlanningUnit list for a specific realmCountryId","hide_title":true,"hide_table_of_contents":true,"api":"eJytVU1z2jAQ/SsaXdrOUExJe/GptAkJl4QEOGWYzMZesFojOdIaynj837sSTmNCPppOT1hm9723q7frShIsnYyvpUXIV99Nqclu5bwjU3SJVQUpo2UsB+ORKB2mgoxYIgnKUEBCao1inIPWSi9nWpHIlSOxMFaAcAUmaqES0UYepbIjTYEWPDCfYslwbYihsfcqOrIACysktF5iJTUfOOMAUHmJBVAmH+u+2gtl2UBia0qxAU1PK2cIi3elssjiyJbYkS7JcAUyriRtCy9AacIl+lBOWAHtXh31ZV3PfborjHbofEa/1/M/j1VRabULXTwQwaiJYQJNgRF/UfTD+bSqruuO/Nw7eh4QxBlRMSGg0nWHF1ffRsfHJ+dCLQLVzKEVqUEntCGRwdrfYYLOvUr5+S8pzy+mN8OL2fmxp9Tm0dVze0udvkL25amGjTjeasgFWsvmCtdYWFwziPck12aRLKo1h5jFG3vKpOyxzDRmDLZjK8UygkJF7RKiar+gOipaTJzIDV7fm7W0OWNk3BwXR9Fms+nelew6PxLB/MD1bEklrmvs8sC4Y2vSMvEHsQMNU3U5mHLkGqyC2zwYLDhO6YUJhSnKvT8v94gE6FQM7tnE1Jjcg7DOHVW/+6nf7R0o4JF/5/y87zwSusz8YhLkNB3lHeCJm8EcDiZjQQgr/vet5fOEKZ9xNpnceJybs8uvy8wlHwu3CiF8TblKkAerxTgogIdT7PTvUy6M6d6Clf5+C+NoBbqVeIrPzP+Lm2uvQ9WDp/7vfmy2TLApG4y3W90UVzXWvJZszbCpWku7I+MDqD1/slMyboRPr6pbcDizeV3713clMkB8PX8wV/Bwqpx/5slYQO7whQa8v2qW5gfxTzv3yZqbl6C3wfV56U/8+BO3h5+Bes4ZGULK5vTad0EDNm9BrfSH4feT82fwT0+m7JTfYMV2ew==","sidebar_class_name":"get api-method","info_path":"docs/api/quantification-and-analytics-tool","custom_edit_url":null},"sidebar":"api-latest","previous":{"title":"Get RealmCountry list for a specific realmId","permalink":"/fasp-documentation/docs/api/get-realm-country-by-realm-id"},"next":{"title":"Get Complete PlanningUnit list for a specific realmCountryId","permalink":"/fasp-documentation/docs/api/get-planning-unit-for-country-all"}}');var a=e(74848),s=e(28453),r=e(57742),o=e.n(r),l=e(78178),c=e.n(l),p=e(19624),d=e.n(p),f=e(96226),u=e.n(f),m=(e(77675),e(19365),e(51107));const g={id:"get-planning-unit-for-country",title:"Get PlanningUnit list for a specific realmCountryId",description:"API used to get the active PlanningUnit list for a specific realmCountryId",sidebar_label:"Get PlanningUnit list for a specific realmCountryId",hide_title:!0,hide_table_of_contents:!0,api:"eJytVU1z2jAQ/SsaXdrOUExJe/GptAkJl4QEOGWYzMZesFojOdIaynj837sSTmNCPppOT1hm9723q7frShIsnYyvpUXIV99Nqclu5bwjU3SJVQUpo2UsB+ORKB2mgoxYIgnKUEBCao1inIPWSi9nWpHIlSOxMFaAcAUmaqES0UYepbIjTYEWPDCfYslwbYihsfcqOrIACysktF5iJTUfOOMAUHmJBVAmH+u+2gtl2UBia0qxAU1PK2cIi3elssjiyJbYkS7JcAUyriRtCy9AacIl+lBOWAHtXh31ZV3PfborjHbofEa/1/M/j1VRabULXTwQwaiJYQJNgRF/UfTD+bSqruuO/Nw7eh4QxBlRMSGg0nWHF1ffRsfHJ+dCLQLVzKEVqUEntCGRwdrfYYLOvUr5+S8pzy+mN8OL2fmxp9Tm0dVze0udvkL25amGjTjeasgFWsvmCtdYWFwziPck12aRLKo1h5jFG3vKpOyxzDRmDLZjK8UygkJF7RKiar+gOipaTJzIDV7fm7W0OWNk3BwXR9Fms+nelew6PxLB/MD1bEklrmvs8sC4Y2vSMvEHsQMNU3U5mHLkGqyC2zwYLDhO6YUJhSnKvT8v94gE6FQM7tnE1Jjcg7DOHVW/+6nf7R0o4JF/5/y87zwSusz8YhLkNB3lHeCJm8EcDiZjQQgr/vet5fOEKZ9xNpnceJybs8uvy8wlHwu3CiF8TblKkAerxTgogIdT7PTvUy6M6d6Clf5+C+NoBbqVeIrPzP+Lm2uvQ9WDp/7vfmy2TLApG4y3W90UVzXWvJZszbCpWku7I+MDqD1/slMyboRPr6pbcDizeV3713clMkB8PX8wV/Bwqpx/5slYQO7whQa8v2qW5gfxTzv3yZqbl6C3wfV56U/8+BO3h5+Bes4ZGULK5vTad0EDNm9BrfSH4feT82fwT0+m7JTfYMV2ew==",sidebar_class_name:"get api-method",info_path:"docs/api/quantification-and-analytics-tool",custom_edit_url:null},y=void 0,U={},h=[];function v(t){const n={p:"p",...(0,s.R)(),...t.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(m.default,{as:"h1",className:"openapi__heading",children:"Get PlanningUnit list for a specific realmCountryId"}),"\n",(0,a.jsx)(o(),{method:"get",path:"/api/realmCountry/{realmCountryId}/planningUnit",context:"endpoint"}),"\n",(0,a.jsx)(n.p,{children:"API used to get the active PlanningUnit list for a specific realmCountryId"}),"\n",(0,a.jsx)(m.default,{id:"request",as:"h2",className:"openapi-tabs__heading",children:"Request"}),"\n",(0,a.jsx)(c(),{parameters:[{name:"realmCountryId",in:"path",description:"RealmCountryId that you want PlanningUnit list for",required:!0,schema:{type:"integer",format:"int32"}}]}),"\n",(0,a.jsx)(d(),{title:"Body",body:void 0}),"\n",(0,a.jsx)(u(),{id:void 0,label:void 0,responses:{200:{description:"Returns the PlanningUnit list",content:{"text/json":{}}},403:{description:"Returns a HttpStatus.FORBIDDEN if the User does not have access",content:{"text/json":{}}},404:{description:"Returns a HttpStatus.NOT_FOUND if no realmCountryId found",content:{"text/json":{}}},500:{description:"Internal error that prevented the retreival of PlanningUnit list",content:{"text/json":{}}}}})]})}function C(t={}){const{wrapper:n}={...(0,s.R)(),...t.components};return n?(0,a.jsx)(n,{...t,children:(0,a.jsx)(v,{...t})}):v(t)}}}]);