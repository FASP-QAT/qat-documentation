"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[82667],{70924:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>g,contentTitle:()=>h,default:()=>M,frontMatter:()=>I,metadata:()=>r,toc:()=>S});const r=JSON.parse('{"id":"api/get-data-source-list-for-realm-id-program-id","title":"Get DataSource for RealmId and ProgramId","description":"API used to get the DataSource for a specific RealmId and ProgramId","source":"@site/docs/api/get-data-source-list-for-realm-id-program-id.api.mdx","sourceDirName":"api","slug":"/api/get-data-source-list-for-realm-id-program-id","permalink":"/fasp-documentation/docs/api/get-data-source-list-for-realm-id-program-id","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"get-data-source-list-for-realm-id-program-id","title":"Get DataSource for RealmId and ProgramId","description":"API used to get the DataSource for a specific RealmId and ProgramId","sidebar_label":"Get DataSource for RealmId and ProgramId","hide_title":true,"hide_table_of_contents":true,"api":"eJy9Vclu2zAQ/RWCl7aAa7lOetGpLhwnBopsdk6BEUykscVWFhmSsmMI+vcMaVlSnKRZUPQkkprlzfC9YcEtLAwPr3kMFiYy1xHyWYfHaCItlBUy4yEfnI9ZbjBmVrIFWmYTZMPans2lZsCMwkjMRcQuEdLlOGaQxexcy4UG2vEOlwo1uIi0CznFaUL8EsaOpK48204KaIUWtQNZ8Iw25Ky3hvRfOHwKbML3Qe9g2AQs28icrSGzroKn6MlX410uNBIyq3PscBMluAQeFtxulEspMosLdKbksAS7PTro87Ls1LhUC/nLyOr6/gO2mXM3SmYGjfPo93rus98qm+vM7GWncJGkyJn1qfDeBr+Nsy9Kqpkf9g5ejgTsxFo1sWBz0x2dXf4cD4dHp0zMfY4rg5rFEg3LpGUJrJBBFKExuxb4u2NEq6pVr0I5fCOU07Ppzejs6nS4g9KUS9dRUZiIXoPDe6LmK+m/P9fTMdnrDFKGWlMh/qaVxhUFcUKi1BqtRrEiEzl/a9spG6khkZWCvECIYSEPQImg0XBQKSQoqkUZ1NwMinpZUgC6i9VOXrlOKVZC/TJhEKzX6+5dTsx0svbKBSpoY0VkulIvnuN1nEduw7ZB/WS4GEzJcgVawG3qSehZKbK59AUKmzoOXzxK5IfHYJeNTaVMXRDCuU3V737rd3tPENCg+uRJtKMTtZnys4mHU3UWIt/ZSrKjweScWfQce2/5pELhPE4mkxsX5+bk4sciMdFXZZbehK4rFRGS+FoZBwpIwGyL/3HKuZTdW9BupnAljV1C1nI8ptG7N3ZfmrWP2lI0hPpHo7yaO56cKgUadWVVSlER8poTIR2QNq+bsR02y/bMDJsNUSShDrhIRXELBq90Wpbu+C5HvaHzWcMqT95YGLcmacwhNfiXJny+rCbqF/a+V+LZuqtDyDae52nudrT8g5vWU+VeiQ8hfO9r8QGMTdfLGRknCDGpxfV0+39AalK25dlMJSfleiIdH02Jug+p+NzS","sidebar_class_name":"get api-method","info_path":"docs/api/quantification-and-analytics-tool","custom_edit_url":null},"sidebar":"api-latest","previous":{"title":"Get DataSource list","permalink":"/fasp-documentation/docs/api/get-data-source-list-all"},"next":{"title":"Get DataSource for a DataSourceTypeId","permalink":"/fasp-documentation/docs/api/get-data-source-list-for-data-source-type-id"}}');var o=t(74848),s=t(28453),d=t(57742),n=t.n(d),i=t(78178),c=t.n(i),l=t(19624),p=t.n(l),u=t(96226),m=t.n(u),f=(t(77675),t(19365),t(51107));const I={id:"get-data-source-list-for-realm-id-program-id",title:"Get DataSource for RealmId and ProgramId",description:"API used to get the DataSource for a specific RealmId and ProgramId",sidebar_label:"Get DataSource for RealmId and ProgramId",hide_title:!0,hide_table_of_contents:!0,api:"eJy9Vclu2zAQ/RWCl7aAa7lOetGpLhwnBopsdk6BEUykscVWFhmSsmMI+vcMaVlSnKRZUPQkkprlzfC9YcEtLAwPr3kMFiYy1xHyWYfHaCItlBUy4yEfnI9ZbjBmVrIFWmYTZMPans2lZsCMwkjMRcQuEdLlOGaQxexcy4UG2vEOlwo1uIi0CznFaUL8EsaOpK48204KaIUWtQNZ8Iw25Ky3hvRfOHwKbML3Qe9g2AQs28icrSGzroKn6MlX410uNBIyq3PscBMluAQeFtxulEspMosLdKbksAS7PTro87Ls1LhUC/nLyOr6/gO2mXM3SmYGjfPo93rus98qm+vM7GWncJGkyJn1qfDeBr+Nsy9Kqpkf9g5ejgTsxFo1sWBz0x2dXf4cD4dHp0zMfY4rg5rFEg3LpGUJrJBBFKExuxb4u2NEq6pVr0I5fCOU07Ppzejs6nS4g9KUS9dRUZiIXoPDe6LmK+m/P9fTMdnrDFKGWlMh/qaVxhUFcUKi1BqtRrEiEzl/a9spG6khkZWCvECIYSEPQImg0XBQKSQoqkUZ1NwMinpZUgC6i9VOXrlOKVZC/TJhEKzX6+5dTsx0svbKBSpoY0VkulIvnuN1nEduw7ZB/WS4GEzJcgVawG3qSehZKbK59AUKmzoOXzxK5IfHYJeNTaVMXRDCuU3V737rd3tPENCg+uRJtKMTtZnys4mHU3UWIt/ZSrKjweScWfQce2/5pELhPE4mkxsX5+bk4sciMdFXZZbehK4rFRGS+FoZBwpIwGyL/3HKuZTdW9BupnAljV1C1nI8ptG7N3ZfmrWP2lI0hPpHo7yaO56cKgUadWVVSlER8poTIR2QNq+bsR02y/bMDJsNUSShDrhIRXELBq90Wpbu+C5HvaHzWcMqT95YGLcmacwhNfiXJny+rCbqF/a+V+LZuqtDyDae52nudrT8g5vWU+VeiQ8hfO9r8QGMTdfLGRknCDGpxfV0+39AalK25dlMJSfleiIdH02Jug+p+NzS",sidebar_class_name:"get api-method",info_path:"docs/api/quantification-and-analytics-tool",custom_edit_url:null},h=void 0,g={},S=[];function K(e){const a={p:"p",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(f.default,{as:"h1",className:"openapi__heading",children:"Get DataSource for RealmId and ProgramId"}),"\n",(0,o.jsx)(n(),{method:"get",path:"/api/dataSource/realmId/{realmId}/programId/{programId}",context:"endpoint"}),"\n",(0,o.jsx)(a.p,{children:"API used to get the DataSource for a specific RealmId and ProgramId"}),"\n",(0,o.jsx)(f.default,{id:"request",as:"h2",className:"openapi-tabs__heading",children:"Request"}),"\n",(0,o.jsx)(c(),{parameters:[{name:"realmId",in:"path",description:"RealmId that you want to the DataSource for",required:!0,schema:{type:"integer",format:"int32"}},{name:"programId",in:"path",description:"ProgramId that you want to the DataSource for",required:!0,schema:{type:"integer",format:"int32"}}]}),"\n",(0,o.jsx)(p(),{title:"Body",body:void 0}),"\n",(0,o.jsx)(m(),{id:void 0,label:void 0,responses:{200:{description:"Returns the DataSource",content:{"text/json":{}}},403:{description:"Returns a HttpStatus.FORBIDDEN if the User does not have access to the Realm or Program",content:{"text/json":{}}},404:{description:"Returns a HttpStatus.NOT_FOUND if the DataSourceId specified does not exist",content:{"text/json":{}}},500:{description:"Internal error that prevented the retreival of DataSource",content:{"text/json":{}}}}})]})}function M(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,o.jsx)(a,{...e,children:(0,o.jsx)(K,{...e})}):K(e)}}}]);