"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[8556],{56568:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>y,contentTitle:()=>h,default:()=>v,frontMatter:()=>f,metadata:()=>r,toc:()=>P});const r=JSON.parse('{"id":"api/get-tracer-category-for-realm-programs","title":"Get TracerCategory list for Realm and active ProgramPlanningUnits","description":"API used to get the TracerCategory list for a Realm. Only returns those Tracer Categories that are from Planning Units in active Programs","source":"@site/docs/api/get-tracer-category-for-realm-programs.api.mdx","sourceDirName":"api","slug":"/api/get-tracer-category-for-realm-programs","permalink":"/fasp-documentation/docs/api/get-tracer-category-for-realm-programs","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"get-tracer-category-for-realm-programs","title":"Get TracerCategory list for Realm and active ProgramPlanningUnits","description":"API used to get the TracerCategory list for a Realm. Only returns those Tracer Categories that are from Planning Units in active Programs","sidebar_label":"Get TracerCategory list for Realm and active ProgramPlanningUnits","hide_title":true,"hide_table_of_contents":true,"api":"eJzNVU1z2zgM/SscXro749rZtL34tG7TbHyJHds5ZTwZRIIl7koiS1J2NBr99wKUFMtJ+nnaHBxKwscD+B5QSw+Jk9M76S1EaD+Bx0TbSm5HMkYXWWW80oWcytlyLkqHsfBaJOiFT1FsTnxEppwXO20FiBVClo/FosgqYdGXtnDkoV3vIzonhfwevACLYmd1LpYZFIUqEnFbKO+EKgREXu1RLK1OLOROjqQ2aIFxzWNCRmhOgVxqG/IPPAzQAT1arrWWBT2Qp2UrijGSiks04FP5vO5Va9OirHQpDlB8t3qKYPFLqSwSOG9LHEkXpZiDnNbSV4YTq4KckE3JIQffvnp3Lptm27qj8x91XLFPpMm68HwEYzIVhdIn/zrGV78MDtZCxTV5pNqP75231FdK0TTPIYYXzujCYfA4Pzvjf8870d/jq7VTxgFSj4++hxgSvj979+2QIK68N2sPvnTjy8Xq4/zi4vO1ULuQ7NYRYWJNVCm0FykQGSCK0Lkfpnz/kymvF5v7y8Xt9UWfsr91ZzBSO0W0f8qPjz8u9sNr/ZuTvS0gE2gtiSQQyljcUxCWFWUlpVhUezLRu19uMaUlhqeaJWF0MA6EnsoJGDU51feko/6k7g7NxLRqmcfcVur4vhdLaTMKklK33HQyORwO4y8laYDa0jIRqKbKq8iNtU1e6IdEGJcRP4g2aJgQN7MNWe7BKnjIAucC87ma1ZH9nx8hNxnyeOrIu2Wp7nQoX3n+JG9OwAgoYjHrEYmN1hknolpaOOfjv87HZy9Q0nR743i0tcQKt0EYxTpA7vpOg4gTd8PjcrZeCo+Q09dfbREJVrHH1Xp9z3Hur27+TlIXvTUuDyZ0mSR0JD0OMs4MkNZFi/805U7r8QNYySzgy8+hGDj+Q/P6W7M6MD107XTO9nM4jOHn/RoMpf/VYugmXVCGyYCmetN1qu7EcEczVLHl6bobDXbB9HgcaIKYl7KqKEJdP4DDW5s1Db8mulKE6d32SOigm1g5PpMed5A5/E4L/1h10/hP8Tvr5tWq+2VQVEFoWclPdPwPq8Hma7ZkmiLERHLG3H791CJ7u+EYR+8X26cZ9R4zko3xA9vjcGJdPw2m5WLNwn/oVluu47CH4cA3QL8Bog4tCosovKslXX1SQsK2bUz++woyuAr2","sidebar_class_name":"post api-method","info_path":"docs/api/quantification-and-analytics-tool","custom_edit_url":null},"sidebar":"api-latest","previous":{"title":"Get TracerCategory list for Realm and Program","permalink":"/fasp-documentation/docs/api/get-tracer-category-for-realm-program"},"next":{"title":"Get active TreeTemplate list","permalink":"/fasp-documentation/docs/api/get-tree-template"}}');var n=a(74848),o=a(28453),i=a(57742),s=a.n(i),c=a(78178),l=a.n(c),d=a(19624),g=a.n(d),m=a(96226),p=a.n(m),u=(a(77675),a(19365),a(51107));const f={id:"get-tracer-category-for-realm-programs",title:"Get TracerCategory list for Realm and active ProgramPlanningUnits",description:"API used to get the TracerCategory list for a Realm. Only returns those Tracer Categories that are from Planning Units in active Programs",sidebar_label:"Get TracerCategory list for Realm and active ProgramPlanningUnits",hide_title:!0,hide_table_of_contents:!0,api:"eJzNVU1z2zgM/SscXro749rZtL34tG7TbHyJHds5ZTwZRIIl7koiS1J2NBr99wKUFMtJ+nnaHBxKwscD+B5QSw+Jk9M76S1EaD+Bx0TbSm5HMkYXWWW80oWcytlyLkqHsfBaJOiFT1FsTnxEppwXO20FiBVClo/FosgqYdGXtnDkoV3vIzonhfwevACLYmd1LpYZFIUqEnFbKO+EKgREXu1RLK1OLOROjqQ2aIFxzWNCRmhOgVxqG/IPPAzQAT1arrWWBT2Qp2UrijGSiks04FP5vO5Va9OirHQpDlB8t3qKYPFLqSwSOG9LHEkXpZiDnNbSV4YTq4KckE3JIQffvnp3Lptm27qj8x91XLFPpMm68HwEYzIVhdIn/zrGV78MDtZCxTV5pNqP75231FdK0TTPIYYXzujCYfA4Pzvjf8870d/jq7VTxgFSj4++hxgSvj979+2QIK68N2sPvnTjy8Xq4/zi4vO1ULuQ7NYRYWJNVCm0FykQGSCK0Lkfpnz/kymvF5v7y8Xt9UWfsr91ZzBSO0W0f8qPjz8u9sNr/ZuTvS0gE2gtiSQQyljcUxCWFWUlpVhUezLRu19uMaUlhqeaJWF0MA6EnsoJGDU51feko/6k7g7NxLRqmcfcVur4vhdLaTMKklK33HQyORwO4y8laYDa0jIRqKbKq8iNtU1e6IdEGJcRP4g2aJgQN7MNWe7BKnjIAucC87ma1ZH9nx8hNxnyeOrIu2Wp7nQoX3n+JG9OwAgoYjHrEYmN1hknolpaOOfjv87HZy9Q0nR743i0tcQKt0EYxTpA7vpOg4gTd8PjcrZeCo+Q09dfbREJVrHH1Xp9z3Hur27+TlIXvTUuDyZ0mSR0JD0OMs4MkNZFi/805U7r8QNYySzgy8+hGDj+Q/P6W7M6MD107XTO9nM4jOHn/RoMpf/VYugmXVCGyYCmetN1qu7EcEczVLHl6bobDXbB9HgcaIKYl7KqKEJdP4DDW5s1Db8mulKE6d32SOigm1g5PpMed5A5/E4L/1h10/hP8Tvr5tWq+2VQVEFoWclPdPwPq8Hma7ZkmiLERHLG3H791CJ7u+EYR+8X26cZ9R4zko3xA9vjcGJdPw2m5WLNwn/oVluu47CH4cA3QL8Bog4tCosovKslXX1SQsK2bUz++woyuAr2",sidebar_class_name:"post api-method",info_path:"docs/api/quantification-and-analytics-tool",custom_edit_url:null},h=void 0,y={},P=[];function T(t){const e={p:"p",...(0,o.R)(),...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(u.default,{as:"h1",className:"openapi__heading",children:"Get TracerCategory list for Realm and active ProgramPlanningUnits"}),"\n",(0,n.jsx)(s(),{method:"post",path:"/api/tracerCategory/realmId/{realmId}/programIds",context:"endpoint"}),"\n",(0,n.jsx)(e.p,{children:"API used to get the TracerCategory list for a Realm. Only returns those Tracer Categories that are from Planning Units in active Programs"}),"\n",(0,n.jsx)(u.default,{id:"request",as:"h2",className:"openapi-tabs__heading",children:"Request"}),"\n",(0,n.jsx)(l(),{parameters:[{name:"realmId",in:"path",description:"RealmId that you want the TracerCategory list for",required:!0,schema:{type:"integer",format:"int32"}}]}),"\n",(0,n.jsx)(g(),{title:"Body",body:{content:{"application/json":{schema:{type:"array",items:{type:"string"}}}},required:!0}}),"\n",(0,n.jsx)(p(),{id:void 0,label:void 0,responses:{200:{description:"Returns the TracerCategory list",content:{"text/json":{}}},403:{description:"Returns a HttpStatus.FORBIDDEN if the User does not have access",content:{"text/json":{}}},404:{description:"Returns a HttpStatus.NOT_FOUND if the RealmId specified does not exist",content:{"text/json":{}}},500:{description:"Internal error that prevented the retreival of TracerCategory list",content:{"text/json":{}}}}})]})}function v(t={}){const{wrapper:e}={...(0,o.R)(),...t.components};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(T,{...t})}):T(t)}}}]);