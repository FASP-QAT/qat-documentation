{
  "openapi": "3.0.1",
  "info": {
    "description": "Quantification Analytics Tool",
    "license": {
      "name": "Apache License Version 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0"
    },
    "title": "QAT",
    "version": "2.92"
  },
  "servers": [
    {
      "url": "https://api.quantificationanalytics.org",
      "description": "Production server for QAT"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "tags": [
    {
      "description": "Manage supply plan programs with support for planning units, procurement agents, and realm-based access control",
      "name": "Program"
    },
    {
      "description": "Manages funding sources and their types",
      "name": "Funding Source"
    },
    {
      "description": "Manage measurement units with dimension-based categorization",
      "name": "Unit"
    },
    {
      "description": "Manages health area definitions",
      "name": "Health Area"
    },
    {
      "description": "Manage forecast calculation methods and their configuration parameters",
      "name": "Forecast Method"
    },
    {
      "description": "Manage master data for forecasting system configuration",
      "name": "Master Data"
    },
    {
      "description": "Manage integration programs with support for manual JSON pushes and program-specific data synchronization",
      "name": "Integration Program"
    },
    {
      "description": "Manage tree templates with branch-specific configurations",
      "name": "Tree template"
    },
    {
      "description": "Manage Jira Service Desk tickets and their attachments",
      "name": "Jira Service Desk"
    },
    {
      "description": "Manage planning units with support for capacity tracking",
      "name": "Planning Unit"
    },
    {
      "description": "Manage region entities within the system",
      "name": "Region"
    },
    {
      "description": "Export Order IDs to CSV",
      "name": "Export Order IDs"
    },
    {
      "description": "Manage product categories with hierarchical structure and program-specific filtering",
      "name": "Product Category"
    },
    {
      "description": "Manage forecast data imports from Quantimed with program-specific validation",
      "name": "Quantimed Import"
    },
    {
      "description": "Manage system documentation file uploads",
      "name": "User manual"
    },
    {
      "description": "Manage statistical forecasting operations including ARIMA models, triple exponential smoothing, and regression analysis",
      "name": "Forecasting Statistics"
    },
    {
      "description": "Manage program data with version control, consumption tracking, and shipment synchronization",
      "name": "Program Data"
    },
    {
      "description": "Manage usage periods with active status filtering",
      "name": "Usage period"
    },
    {
      "description": "Export Programs to CSV",
      "name": "Export Programs"
    },
    {
      "description": "Manage data source type configurations with realm-based filtering",
      "name": "Data Source Type"
    },
    {
      "description": "Handles file downloads for QAT-related resources.",
      "name": "File"
    },
    {
      "description": "Manage realm entities within the system",
      "name": "Realm"
    },
    {
      "description": "Manage system problems and issues with support for manual entries and realm-based reporting",
      "name": "Problem"
    },
    {
      "description": "Export Supply Plan to JSON",
      "name": "Export Supply Plan"
    },
    {
      "description": "Get dashboard metrics across different administrative levels",
      "name": "Dashboard"
    },
    {
      "description": "Manage system languages and localization settings",
      "name": "Language"
    },
    {
      "description": "Manage system reports including consumption, inventory, shipment, stock status, and forecast analytics",
      "name": "Reports"
    },
    {
      "description": "Manage equivalency units and their mappings",
      "name": "Equivalency Unit"
    },
    {
      "description": "Manage tracer categories with realm and program-specific filtering",
      "name": "Tracer category"
    },
    {
      "description": "Manage organization type classifications with realm-based filtering",
      "name": "Organisation Type"
    },
    {
      "description": "Manage modeling configurations that control system calculation and processing behaviour",
      "name": "Modeling Type"
    },
    {
      "description": "Label Management for FASP",
      "name": "Label"
    },
    {
      "description": "Export Shipment Linking to CSV",
      "name": "Export Shipment Linking"
    },
    {
      "description": "Manage procurement agents and their types",
      "name": "Procurement Agent"
    },
    {
      "description": "Import Shipment Data from ARTMIS",
      "name": "Import Shipment Data"
    },
    {
      "description": "Manage pipeline data including programs, shipments, consumption, inventory, and funding sources",
      "name": "Pipeline"
    },
    {
      "description": "Manage users, authentication, roles and access controls",
      "name": "User"
    },
    {
      "description": "Test endpoints for ACL permissions and email functionality",
      "name": "Test"
    },
    {
      "description": "Manage data synchronization and master data updates across the system",
      "name": "Sync"
    },
    {
      "description": "Manage supply plan generation and batch processing",
      "name": "Supply plan"
    },
    {
      "description": "Manage datasets and their versions",
      "name": "Dataset"
    },
    {
      "description": "Manage version control requests",
      "name": "Commit Request"
    },
    {
      "description": "Manage organizations with realm-based access control",
      "name": "Organisation"
    },
    {
      "description": "Manage procurement units with support for realm and planning unit based filtering",
      "name": "Procurement Unit"
    },
    {
      "description": "Manages program budgets for a realm",
      "name": "Budget"
    },
    {
      "description": "Manages forecasting units with realm-based access control.",
      "name": "Forecasting Unit"
    },
    {
      "description": "Manage supplier data with realm-specific access control",
      "name": "Supplier"
    },
    {
      "description": "Manage system currencies",
      "name": "Currency"
    },
    {
      "description": "Manage system dimensions",
      "name": "Dimension"
    },
    {
      "description": "JWT Authentication for theFASP API",
      "name": "JWT Authentication"
    },
    {
      "description": "Manage realm country assignments and their associated planning units",
      "name": "Realm Country"
    },
    {
      "description": "Manage country records",
      "name": "Country"
    },
    {
      "description": "Import Product Catalogue from ARTMIS",
      "name": "Import Product Catalogue"
    },
    {
      "description": "Manage data sources with filtering by realm, program, and source type",
      "name": "Data Source"
    },
    {
      "description": "Provide filtered dropdown data for UI components across programs, planning units, and other system entities",
      "name": "Dropdowns"
    },
    {
      "description": "Manage usage templates with tracer category filtering",
      "name": "Usage template"
    },
    {
      "description": "Export supply plan data",
      "name": "Export API"
    },
    {
      "description": "Manages integration configurations and mappings.",
      "name": "Integration"
    }
  ],
  "paths": {
    "/api/budget": {
      "get": {
        "description": "Retrieve a complete list of all budgets",
        "operationId": "getBudget_1",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Budget_ReportView"
                  }
                }
              }
            },
            "description": "Returns the complete list of budgets"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the budget list"
          }
        },
        "summary": "Get Budgets",
        "tags": [
          "Budget"
        ]
      },
      "post": {
        "description": "Create a new budget for the realm",
        "operationId": "postBudget",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Budget"
              }
            }
          },
          "description": "The budget to create",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "The user does not have access to the funding source or currency referenced by the budget"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Unable to find the funding source or currency referenced by the budget"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Duplicate key error that prevented the creation of the budget"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the creation of the budget"
          }
        },
        "summary": "Add Budget",
        "tags": [
          "Budget"
        ]
      },
      "put": {
        "description": "Update an existing budget for a realm",
        "operationId": "putBudget",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Budget"
              }
            }
          },
          "description": "The budget to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "The user does not have access to the funding source or currency referenced by the budget"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Unable to find the funding source or currency referenced by the budget"
          },
          "409": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "There was a conflict that prevented the update of the budget"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the update of the budget"
          }
        },
        "summary": "Update Budget",
        "tags": [
          "Budget"
        ]
      }
    },
    "/api/budget/programIds": {
      "post": {
        "description": "Retrieve a list of budgets for a given list of program IDs",
        "operationId": "getBudget",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "description": "The list of program IDs to retrieve budgets for",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Budget_ReportView"
                  }
                }
              }
            },
            "description": "Returns the list of budgets for the given program IDs"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the budget list"
          }
        },
        "summary": "Get Budgets by Programs",
        "tags": [
          "Budget"
        ]
      }
    },
    "/api/budget/realmId/{realmId}": {
      "get": {
        "description": "Retrieve a list of budgets for a given realm",
        "operationId": "getBudgetForRealm",
        "parameters": [
          {
            "description": "The ID of the realm to retrieve budgets for",
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Budget_ReportView"
                  }
                }
              }
            },
            "description": "Returns the list of budgets for the given realm"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "The user does not have access to the budget list for the given realm"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Unable to find the budget list for the given realm"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the budget list"
          }
        },
        "summary": "Get Budgets by Realm",
        "tags": [
          "Budget"
        ]
      }
    },
    "/api/budget/{budgetId}": {
      "get": {
        "description": "Retrieve a specific budget by its ID",
        "operationId": "getBudget_2",
        "parameters": [
          {
            "description": "The ID of the budget to retrieve",
            "in": "path",
            "name": "budgetId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Budget"
                }
              }
            },
            "description": "Returns the specific budget by its ID"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "The user does not have access to the budget"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Unable to find the budget by its ID"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the budget"
          }
        },
        "summary": "Get Budget",
        "tags": [
          "Budget"
        ]
      }
    },
    "/api/businessFunction": {
      "get": {
        "description": "Get business function list",
        "operationId": "getBusinessFunctionList",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BusinessFunction"
                  }
                }
              }
            },
            "description": "Returns the business function list"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting the business function list"
          }
        },
        "summary": "Get business function list",
        "tags": [
          "User"
        ]
      }
    },
    "/api/commit/datasetData/{comparedVersionId}": {
      "put": {
        "description": "Update the Dataset data for a given version ID",
        "operationId": "putDatasetData",
        "parameters": [
          {
            "description": "The ID of the version to compare against",
            "in": "path",
            "name": "comparedVersionId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "description": "Returns the ID of the commit request"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "The user does not have access to the dataset data"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Unable to find the dataset data for the given version ID"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "A commit request already exists for the program"
          },
          "409": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Conflict that prevented the update of the dataset data"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the update of the dataset data"
          }
        },
        "summary": "Update Dataset Data",
        "tags": [
          "Commit Request"
        ]
      }
    },
    "/api/commit/getCommitRequest/{requestStatus}": {
      "post": {
        "description": "Retrieve a list of Supply Plan or Dataset Commit Requests based on the provided criteria",
        "operationId": "getProgramDataCommitRequest",
        "parameters": [
          {
            "description": "The status of the commit request to retrieve",
            "in": "path",
            "name": "requestStatus",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommitRequestInput"
              }
            }
          },
          "description": "The criteria for retrieving commit requests",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommitRequest"
                  }
                }
              }
            },
            "description": "Returns the list of commit requests based on the provided criteria"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "The user does not have access to the commit request list"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the commit request list"
          }
        },
        "summary": "Get Commit Requests",
        "tags": [
          "Commit Request"
        ]
      }
    },
    "/api/commit/programData/{comparedVersionId}": {
      "put": {
        "description": "Update the Supply Plan Program data for a given version ID",
        "operationId": "putProgramData",
        "parameters": [
          {
            "description": "The ID of the version to compare against",
            "in": "path",
            "name": "comparedVersionId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "The program data to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "description": "Returns the ID of the commit request"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "The user does not have access to the program data"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Unable to find the program data for the given version ID"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "A commit request already exists for the program"
          },
          "409": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Conflict that prevented the update of the program data"
          },
          "412": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the update of the program data"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the update of the program data"
          }
        },
        "summary": "Update Supply Plan Program Data",
        "tags": [
          "Commit Request"
        ]
      }
    },
    "/api/commit/sendNotification/{commitRequestId}": {
      "get": {
        "description": "Send a notification for a Commit Request once it is processed successfully",
        "operationId": "sendNotification",
        "parameters": [
          {
            "description": "The ID of the commit request to send a notification for",
            "in": "path",
            "name": "commitRequestId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommitRequest"
                }
              }
            },
            "description": "Returns the status of the commit request"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the commit request status"
          }
        },
        "summary": "Send Notification",
        "tags": [
          "Commit Request"
        ]
      }
    },
    "/api/country": {
      "get": {
        "description": "Retrieve a complete list of active countries",
        "operationId": "getCountryList",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Country"
                  }
                }
              }
            },
            "description": "Returns the list of active countries"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the country list"
          }
        },
        "summary": "Get Active Countries",
        "tags": [
          "Country"
        ]
      },
      "post": {
        "description": "Create a new country",
        "operationId": "addCountry",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Country"
              }
            }
          },
          "description": "The country to create",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success response"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "The country already exists"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the creation of the country"
          }
        },
        "summary": "Add Country",
        "tags": [
          "Country"
        ]
      },
      "put": {
        "description": "Update an existing country",
        "operationId": "editCountry",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Country"
              }
            }
          },
          "description": "The country to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success message"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "The country already exists"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the update of the country"
          }
        },
        "summary": "Update Country",
        "tags": [
          "Country"
        ]
      }
    },
    "/api/country/all": {
      "get": {
        "description": "Retrieve a complete list of all countries",
        "operationId": "getCountryListAll",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Country"
                  }
                }
              }
            },
            "description": "Returns the list of all countries"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the country list"
          }
        },
        "summary": "Get All Countries",
        "tags": [
          "Country"
        ]
      }
    },
    "/api/country/{countryId}": {
      "get": {
        "description": "Retrieve a country by its ID",
        "operationId": "getCountryById",
        "parameters": [
          {
            "description": "The ID of the country to retrieve",
            "in": "path",
            "name": "countryId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Country"
                }
              }
            },
            "description": "Returns the country with the given ID"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Unable to find the country with the given ID"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the country"
          }
        },
        "summary": "Get Country",
        "tags": [
          "Country"
        ]
      }
    },
    "/api/currency": {
      "get": {
        "description": "Retrieve a complete list of active currencies",
        "operationId": "getCurrencyList",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Currency"
                  }
                }
              }
            },
            "description": "Returns the list of active currencies"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the currency list"
          }
        },
        "summary": "Get Active Currency List",
        "tags": [
          "Currency"
        ]
      },
      "post": {
        "description": "Create a new currency",
        "operationId": "addCurrency",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Currency"
              }
            }
          },
          "description": "The currency to create",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success message"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "The currency already exists"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the creation of the currency"
          }
        },
        "summary": "Add Currency",
        "tags": [
          "Currency"
        ]
      },
      "put": {
        "description": "Update an existing currency",
        "operationId": "editCurrency",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Currency"
              }
            }
          },
          "description": "The currency to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success message"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "The currency already exists"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the update of the currency"
          }
        },
        "summary": "Update Currency",
        "tags": [
          "Currency"
        ]
      }
    },
    "/api/currency/all": {
      "get": {
        "description": "Retrieve a complete list of all currencies (active and disabled)",
        "operationId": "getCurrencyListAll",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Currency"
                  }
                }
              }
            },
            "description": "Returns the list of all currencies"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the currency list"
          }
        },
        "summary": "Get All Currencies",
        "tags": [
          "Currency"
        ]
      }
    },
    "/api/currency/{currencyId}": {
      "get": {
        "description": "Retrieve a currency by its ID",
        "operationId": "getCurrencyList_1",
        "parameters": [
          {
            "description": "The ID of the currency to retrieve",
            "in": "path",
            "name": "currencyId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Currency"
                }
              }
            },
            "description": "Returns the currency with the given ID"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "The currency with the given ID was not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the currency"
          }
        },
        "summary": "Get Currency",
        "tags": [
          "Currency"
        ]
      }
    },
    "/api/dashboard/applicationLevel": {
      "get": {
        "description": "Retrieve a dashboard summary for application-level administrators",
        "operationId": "applicationLevelDashboard",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Returns the dashboard summary for application-level administrators"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the dashboard summary"
          }
        },
        "summary": "Get Application Level Dashboard",
        "tags": [
          "Dashboard"
        ]
      }
    },
    "/api/dashboard/applicationLevel/userList": {
      "get": {
        "description": "Retrieve a list of users for application-level administrators",
        "operationId": "applicationLevelDashboardUserList",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DashboardUser"
                  }
                }
              }
            },
            "description": "Returns the list of users for application-level administrators"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the user list"
          }
        },
        "summary": "Get Application Level Dashboard User List",
        "tags": [
          "Dashboard"
        ]
      }
    },
    "/api/dashboard/db/{programId}/{versionId}": {
      "get": {
        "description": "Retrieve a dashboard summary for the load program",
        "operationId": "getDashboardForLoadProgram",
        "parameters": [
          {
            "description": "The program ID for the program to retrieve",
            "in": "path",
            "name": "programId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "The version ID for the program to retrieve",
            "in": "path",
            "name": "versionId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardForLoadProgram_ReportView"
                }
              }
            },
            "description": "Returns the dashboard"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "User does not have access to the program"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "The program was not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the dashboard"
          }
        },
        "summary": "Get Dashboard for Load Program",
        "tags": [
          "Dashboard"
        ]
      }
    },
    "/api/dashboard/realmLevel": {
      "get": {
        "description": "Retrieve a dashboard summary for realm-level administrators",
        "operationId": "realmLevelDashboard",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Returns the dashboard summary for realm-level administrators"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the dashboard summary"
          }
        },
        "summary": "Get Realm Level Dashboard",
        "tags": [
          "Dashboard"
        ]
      }
    },
    "/api/dashboard/realmLevel/userList": {
      "get": {
        "description": "Retrieve a list of users for realm-level administrators",
        "operationId": "realmLevelDashboardUserList",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DashboardUser"
                  }
                }
              }
            },
            "description": "Returns the list of users for realm-level administrators"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the user list"
          }
        },
        "summary": "Get Realm Level Dashboard User List",
        "tags": [
          "Dashboard"
        ]
      }
    },
    "/api/dashboard/supplyPlanBottom": {
      "post": {
        "description": "Retrieve a dashboard summary for the bottom supply plans",
        "operationId": "getDashboardBottom",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DashboardInput_ReportView"
              }
            }
          },
          "description": "The dashboard input for the supply plans to retrieve",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardBottom_ReportView"
                }
              }
            },
            "description": "Returns the dashboard summary for supply plans bottom"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "User does not have access to the supply plans"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "The supply plans were not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the dashboard summary"
          }
        },
        "summary": "Get Supply Plans (bottom)",
        "tags": [
          "Dashboard"
        ]
      }
    },
    "/api/dashboard/supplyPlanReviewerLevel": {
      "get": {
        "description": "Retrieve a dashboard summary for supply plan reviewers",
        "operationId": "supplyPlanReviewerLevelDashboard",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Returns the dashboard summary for supply plan reviewers"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the dashboard summary"
          }
        },
        "summary": "Get Supply Plan Reviewer Level Dashboard",
        "tags": [
          "Dashboard"
        ]
      }
    },
    "/api/dashboard/supplyPlanTop": {
      "post": {
        "description": "Retrieve a dashboard summary for the top supply plans",
        "operationId": "getDashboardTop",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "description": "The program IDs for the supply plans to retrieve",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DashboardTop_ReportView"
                  }
                }
              }
            },
            "description": "Returns the dashboard summary for supply plans"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "User does not have access to the supply plans"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "The supply plans were not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the dashboard summary"
          }
        },
        "summary": "Get Supply Plans (top))",
        "tags": [
          "Dashboard"
        ]
      }
    },
    "/api/dataSource": {
      "get": {
        "description": "Retrieve a list of all active data sources",
        "operationId": "getDataSourceList",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataSource"
                  }
                }
              }
            },
            "description": "Returns the list of active data sources"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the data sources"
          }
        },
        "summary": "Get Active Data Sources",
        "tags": [
          "Data Source"
        ]
      },
      "post": {
        "description": "Create a new data source",
        "operationId": "addDataSource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSource"
              }
            }
          },
          "description": "The data source to create",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success message"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "The user does not have permission to add this data source"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Unable to find the data referenced in the data source"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "The data source with the given name already exists"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the creation of the data source"
          }
        },
        "summary": "Add Data Source",
        "tags": [
          "Data Source"
        ]
      },
      "put": {
        "description": "Update an existing data source",
        "operationId": "editDataSource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSource"
              }
            }
          },
          "description": "The data source to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success message"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "The user does not have permission to update this data source"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "The data source with the given name already exists"
          },
          "409": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "There was a conflict while updating the data source"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the update of the data source"
          }
        },
        "summary": "Update Data Source",
        "tags": [
          "Data Source"
        ]
      }
    },
    "/api/dataSource/all": {
      "get": {
        "description": "Retrieve a complete list of all data sources (active and disabled)",
        "operationId": "getDataSourceListAll",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataSource"
                  }
                }
              }
            },
            "description": "Returns the complete list of data sources"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the data sources"
          }
        },
        "summary": "Get All Data Sources",
        "tags": [
          "Data Source"
        ]
      }
    },
    "/api/dataSource/dataSourceTypeId/{dataSourceTypeId}": {
      "get": {
        "description": "Retrieve a list of data sources for a specific data source type",
        "operationId": "getDataSourceListForDataSourceTypeId",
        "parameters": [
          {
            "description": "The ID of the data source type to retrieve data sources for",
            "in": "path",
            "name": "dataSourceTypeId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataSource"
                  }
                }
              }
            },
            "description": "Returns the list of data sources for the specified data source type"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "The user does not have permission to access this data source"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "The data source with the specified data source type was not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the data source"
          }
        },
        "summary": "Get Data Source by Type",
        "tags": [
          "Data Source"
        ]
      }
    },
    "/api/dataSource/realmId/{realmId}/programId/{programId}": {
      "get": {
        "description": "Retrieve a list of data sources for a specific realm and program",
        "operationId": "getDataSourceListForRealmIdProgramId",
        "parameters": [
          {
            "description": "The ID of the realm to retrieve data sources for",
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "The ID of the program to retrieve data sources for",
            "in": "path",
            "name": "programId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataSource"
                  }
                }
              }
            },
            "description": "Returns the list of data sources for the specified realm and program"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "The user does not have permission to access this data source"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "The data source with the specified realm and program was not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the data source"
          }
        },
        "summary": "Get Data Source for Realm and Program",
        "tags": [
          "Data Source"
        ]
      }
    },
    "/api/dataSource/{dataSourceId}": {
      "get": {
        "description": "Retrieve a data source by its ID",
        "operationId": "getDataSourcebyId",
        "parameters": [
          {
            "description": "The ID of the data source to retrieve",
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSource"
                }
              }
            },
            "description": "Returns the data source with the specified ID"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "The user does not have permission to access this data source"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "The data source with the specified ID was not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the data source"
          }
        },
        "summary": "Get Data Source",
        "tags": [
          "Data Source"
        ]
      }
    },
    "/api/dataSourceType": {
      "get": {
        "description": "Retrieve a list of all active data source types",
        "operationId": "getDataSourceTypeList",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataSourceType"
                  }
                }
              }
            },
            "description": "Returns the list of active data source types"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the data source type list"
          }
        },
        "summary": "Get Active Data Source Types",
        "tags": [
          "Data Source Type"
        ]
      },
      "post": {
        "description": "Create a new data source type",
        "operationId": "addDataSourceType",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSourceType"
              }
            }
          },
          "description": "The data source type to add",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "The user does not have permission to add this data source type"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "The data source type with the given name already exists"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the addition of the data source type"
          }
        },
        "summary": "Add Data Source Type",
        "tags": [
          "Data Source Type"
        ]
      },
      "put": {
        "description": "Update an existing data source type",
        "operationId": "editDataSourceType",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSourceType"
              }
            }
          },
          "description": "The data source type to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success message"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "The user does not have permission to update this data source type"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "The data source type with the specified ID was not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the update of the data source type"
          }
        },
        "summary": "Update Data Source Type",
        "tags": [
          "Data Source Type"
        ]
      }
    },
    "/api/dataSourceType/all": {
      "get": {
        "description": "Retrieve a complete list of all data source types (active and disabled)",
        "operationId": "getDataSourceTypeListAll",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataSourceType"
                  }
                }
              }
            },
            "description": "Returns the list of all data source types"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the data source type list"
          }
        },
        "summary": "Get All Data Source Types",
        "tags": [
          "Data Source Type"
        ]
      }
    },
    "/api/dataSourceType/realmId/{realmId}": {
      "get": {
        "description": "Retrieve a list of data source types for a specific realm",
        "operationId": "getDataSourceTypeListForRealmId",
        "parameters": [
          {
            "description": "The ID of the realm to retrieve data source types for",
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataSourceType"
                  }
                }
              }
            },
            "description": "Returns the list of data source types for the specified realm"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "The user does not have permission to view this data source type"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "The data source type with the specified realm ID was not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the data source type list"
          }
        },
        "summary": "Get Data Source Types by Realm",
        "tags": [
          "Data Source Type"
        ]
      }
    },
    "/api/dataSourceType/{dataSourceTypeId}": {
      "get": {
        "description": "Retrieve a data source type by its ID",
        "operationId": "getDataSourceTypeById",
        "parameters": [
          {
            "description": "The ID of the data source type to retrieve",
            "in": "path",
            "name": "dataSourceTypeId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSourceType"
                }
              }
            },
            "description": "Returns the data source type with the specified ID"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "The user does not have permission to view this data source type"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "The data source type with the specified ID was not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the data source type"
          }
        },
        "summary": "Get Data Source Type",
        "tags": [
          "Data Source Type"
        ]
      }
    },
    "/api/dataset": {
      "get": {
        "description": "Retrieve a list of all active datasets",
        "operationId": "getDataset",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Program"
                  }
                }
              }
            },
            "description": "Returns the list of active datasets"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the dataset list"
          }
        },
        "summary": "Get Active Datasets",
        "tags": [
          "Dataset"
        ]
      },
      "post": {
        "description": "Create a new dataset",
        "operationId": "postDataset",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProgramInitialize"
              }
            }
          },
          "description": "The dataset to create",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success message"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "The user does not have permission to access this dataset"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "The dataset with the given program ID already exists"
          },
          "409": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "There was a conflict while adding the dataset"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the dataset"
          }
        },
        "summary": "Add Dataset",
        "tags": [
          "Dataset"
        ]
      },
      "put": {
        "description": "Update an existing dataset",
        "operationId": "putDataset",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProgramInitialize"
              }
            }
          },
          "description": "The dataset to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success message"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "The user does not have permission to access this dataset"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "The dataset with the given program ID was not found"
          },
          "409": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "There was a conflict while updating the dataset"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the dataset"
          }
        },
        "summary": "Update Dataset",
        "tags": [
          "Dataset"
        ]
      }
    },
    "/api/dataset/versions": {
      "post": {
        "description": "Retrieve a list of dataset programs for a specific program, version type, start date and stop date",
        "operationId": "getDatasetVersionList",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatasetVersionListInput_ReportView"
              }
            }
          },
          "description": "The input for the dataset version list",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProgramVersion_ReportView"
                  }
                }
              }
            },
            "description": "Returns the list of dataset versions for the specified program"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "The user does not have permission to access this dataset"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "The dataset with the given program ID already exists"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the dataset"
          }
        },
        "summary": "Get Dataset Programs",
        "tags": [
          "Dataset"
        ]
      }
    },
    "/api/dataset/{programId}": {
      "get": {
        "description": "Retrieve a dataset by its program ID",
        "operationId": "getDataset_1",
        "parameters": [
          {
            "description": "The ID of the program to retrieve a dataset for",
            "in": "path",
            "name": "programId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Program"
                }
              }
            },
            "description": "Returns the dataset with the specified program ID"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "The user does not have permission to access this dataset"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "The dataset with the given program ID was not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the dataset"
          }
        },
        "summary": "Get Dataset by Program",
        "tags": [
          "Dataset"
        ]
      }
    },
    "/api/datasetData": {
      "post": {
        "description": "Retrieve dataset programs for specified of program and version IDs",
        "operationId": "getDatasetData",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "The list of program and version IDs to retrieve dataset data for",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DatasetData_InternalView"
                  }
                }
              }
            },
            "description": "Returns the dataset data for the specified list of program and version IDs"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_InternalView"
                }
              }
            },
            "description": "The user does not have permission to access this dataset"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_InternalView"
                }
              }
            },
            "description": "The dataset with the given program ID was not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_InternalView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the dataset data"
          }
        },
        "summary": "Get Dataset Programs",
        "tags": [
          "Dataset"
        ]
      }
    },
    "/api/datasetData/programId/{programId}/versionId/{versionId}": {
      "get": {
        "description": "Retrieve dataset data for a specific program and version ID with tree data",
        "operationId": "getDatasetData_1",
        "parameters": [
          {
            "description": "The ID of the program to retrieve dataset data for",
            "in": "path",
            "name": "programId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "The ID of the version to retrieve dataset data for",
            "in": "path",
            "name": "versionId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetData_InternalView"
                }
              }
            },
            "description": "Returns the dataset data for the specified program and version ID with tree data"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_InternalView"
                }
              }
            },
            "description": "The user does not have permission to access this dataset"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_InternalView"
                }
              }
            },
            "description": "The dataset with the given program ID was not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_InternalView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the dataset data"
          }
        },
        "summary": "Get Dataset Data with Tree",
        "tags": [
          "Dataset"
        ]
      }
    },
    "/api/datasetData/programId/{programId}/versionId/{versionId}/withoutTree": {
      "get": {
        "description": "Retrieve dataset data for a specific program and version ID with or without tree data",
        "operationId": "getDatasetData_2",
        "parameters": [
          {
            "description": "The ID of the program to retrieve dataset data for",
            "in": "path",
            "name": "programId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "The ID of the version to retrieve dataset data for",
            "in": "path",
            "name": "versionId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DatasetData_InternalView"
                  }
                }
              }
            },
            "description": "Returns the dataset data for the specified program and version ID without tree data"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_InternalView"
                }
              }
            },
            "description": "The user does not have permission to access this dataset"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_InternalView"
                }
              }
            },
            "description": "The dataset with the given program ID was not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_InternalView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the dataset data"
          }
        },
        "summary": "Get Dataset Data",
        "tags": [
          "Dataset"
        ]
      }
    },
    "/api/dimension": {
      "get": {
        "description": "Retrieve a list of all active dimensions",
        "operationId": "getDimension",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Dimension"
                  }
                }
              }
            },
            "description": "Returns the list of all active dimensions"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the dimension list"
          }
        },
        "summary": "Get Active Dimensions",
        "tags": [
          "Dimension"
        ]
      },
      "post": {
        "description": "Create a new dimension",
        "operationId": "postDimension",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Dimension"
              }
            }
          },
          "description": "The dimension to add",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "The dimension with the given name already exists"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the addition of the dimension"
          }
        },
        "summary": "Add Dimension",
        "tags": [
          "Dimension"
        ]
      },
      "put": {
        "description": "Update an existing dimension",
        "operationId": "putDimension",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Dimension"
              }
            }
          },
          "description": "The dimension to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "The dimension with the specified ID was not found"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "The dimension with the given name already exists"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the update of the dimension"
          }
        },
        "summary": "Update Dimension",
        "tags": [
          "Dimension"
        ]
      }
    },
    "/api/dimension/all": {
      "get": {
        "description": "Retrieve a complete list of all dimensions (active and disabled)",
        "operationId": "getDimensionAll",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Dimension"
                  }
                }
              }
            },
            "description": "Returns the complete list of all dimensions (active and disabled)"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the dimension list"
          }
        },
        "summary": "Get Dimensions",
        "tags": [
          "Dimension"
        ]
      }
    },
    "/api/dimension/{dimensionId}": {
      "get": {
        "description": "Retrieve a dimension by its ID",
        "operationId": "getDimension_1",
        "parameters": [
          {
            "in": "path",
            "name": "dimensionId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dimension"
                }
              }
            },
            "description": "Returns the dimension with the specified ID"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "The dimension with the specified ID was not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the dimension"
          }
        },
        "summary": "Get Dimension",
        "tags": [
          "Dimension"
        ]
      }
    },
    "/api/dropdown/budget/filter/multipleFundingSources": {
      "post": {
        "description": "Retrieve a list of budgets filtered on a list of funding sources",
        "operationId": "getBudgetDropdownFilterMultipleFundingSources",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "description": "The list of funding sources for the budget list",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleCodeObject_DropDownView"
                  }
                }
              }
            },
            "description": "Returns the list of budgets filtered on a list of funding sources"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDownView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the list of budgets"
          }
        },
        "summary": "Get Budgets by Funding Sources",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/dropdown/budget/program/{programId}": {
      "get": {
        "description": "Retrieve a list of budgets for a specific program",
        "operationId": "getBudgetDropdownForProgram",
        "parameters": [
          {
            "description": "The program ID for the budget list",
            "in": "path",
            "name": "programId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleCodeObject_DropDownView"
                  }
                }
              }
            },
            "description": "Returns the list of budgets for a specific program"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDownView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the list of budgets"
          }
        },
        "summary": "Get Budgets by Program",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/dropdown/dataset/program/realm/{realmId}": {
      "get": {
        "description": "Retrieve a list of programs for a realm",
        "operationId": "getProgramForDropdownDataset",
        "parameters": [
          {
            "description": "The realm ID for the programs to retrieve",
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleProgram_DropDownView"
                  }
                }
              }
            },
            "description": "Returns the list of dataset programs for a realm"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDownView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the programs"
          }
        },
        "summary": "Get Programs for Realm",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/dropdown/equivalencyUnit": {
      "get": {
        "description": "Retrieve a list of equivalency units",
        "operationId": "getEquivalencyUnitDropdownList",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleObject_DropDownView"
                  }
                }
              }
            },
            "description": "Returns the list of equivalency units"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDownView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the list of equivalency units"
          }
        },
        "summary": "Get Equivalency Units",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/dropdown/forecastingUnit": {
      "get": {
        "description": "Retrieve a complete list of forecasting units",
        "operationId": "getForecastingUnitDropdownList",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleObject_DropDownView"
                  }
                }
              }
            },
            "description": "Returns the complete list of forecasting units"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDownView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the complete list of forecasting units"
          }
        },
        "summary": "Get All Forecasting Units",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/dropdown/forecastingUnit/autocomplete": {
      "post": {
        "description": "Retrieve a list of forecasting units filtered on autocomplete input",
        "operationId": "getForecastingUnitByAutoComplete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutoCompleteInput_DropDownView"
              }
            }
          },
          "description": "The autocomplete input for the forecasting unit list",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleObject_DropDownView"
                  }
                }
              }
            },
            "description": "Returns the list of forecasting units filtered on autocomplete input"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDownView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the forecasting unit list"
          }
        },
        "summary": "Get Forecasting Units (Autocomplete)",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/dropdown/forecastingUnit/autocomplete/filter/tracerCategory/{searchText}/{language}/{tracerCategoryId}": {
      "get": {
        "description": "Retrieve a list of forecasting units filtered by tracer category (autocomplete input)",
        "operationId": "getForecastingUnitByAutoCompleteWithFilterTracerCategory",
        "parameters": [
          {
            "description": "The search text for the forecasting unit list",
            "in": "path",
            "name": "searchText",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The language for the forecasting unit list",
            "in": "path",
            "name": "language",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The tracer category ID for the forecasting unit list",
            "in": "path",
            "name": "tracerCategoryId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleObject_DropDown3View"
                  }
                }
              }
            },
            "description": "Returns the list of forecasting units filtered by tracer category"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDown3View"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the forecasting unit list"
          }
        },
        "summary": "Get Forecasting Units by Tracer Category",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/dropdown/forecastingUnit/filter/pcAndTc": {
      "post": {
        "description": "Retrieve a list of forecasting units filtered on product and tracer categories",
        "operationId": "getForecastingUnitDropdownListWithFilterForPcAndTc",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductCategoryAndTracerCategoryDTO_DropDownView"
              }
            }
          },
          "description": "The input for the forecasting unit list filtered on product and tracer categories",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleObject_DropDownView"
                  }
                }
              }
            },
            "description": "Returns the list of forecasting units"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDownView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the forecasting unit list"
          }
        },
        "summary": "Get Forecasting Units by Product and Tracer Categories",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/dropdown/fundingSource": {
      "get": {
        "description": "Retrieve a list of funding sources",
        "operationId": "getFundingSourceDropdownList",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleFundingSourceObject_DropDownView"
                  }
                }
              }
            },
            "description": "Returns the list of funding sources"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDownView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the list of funding sources"
          }
        },
        "summary": "Get Funding Sources",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/dropdown/fundingSource/programs": {
      "post": {
        "description": "Retrieve a list of funding sources filtered on a list of program IDs",
        "operationId": "getFundingSourceForProgramsDropdownList",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "description": "The list of program IDs for the funding source list",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleFundingSourceObject_DropDownView"
                  }
                }
              }
            },
            "description": "Returns the list of funding sources filtered on a list of program IDs"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDownView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the list of funding sources"
          }
        },
        "summary": "Get Funding Sources by Programs",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/dropdown/fundingSourceType/programs": {
      "post": {
        "description": "Retrieve a list of funding source types filtered on a list of program IDs",
        "operationId": "getFundingSourceTypeForProgramsDropdownList",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "description": "The list of program IDs for the funding source type list",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleCodeObject_DropDownView"
                  }
                }
              }
            },
            "description": "Returns the list of funding source types filtered on a list of program IDs"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDownView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the list of funding source types"
          }
        },
        "summary": "Get Funding Source Types by Programs",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/dropdown/healthArea/nofilter/realm/{realmId}": {
      "get": {
        "description": "Retrieve a list of health areas for a specific realm without ACL Filter",
        "operationId": "getHealthAreaNoFilterDropdownList",
        "parameters": [
          {
            "description": "The realm ID for the health area list",
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleCodeObject_DropDownView"
                  }
                }
              }
            },
            "description": "Returns the list of health areas for a specific realm without ACL Filter"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDownView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the list of health areas without ACL Filter"
          }
        },
        "summary": "Get Health Areas without ACL Filter",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/dropdown/healthArea/realm/{realmId}": {
      "get": {
        "description": "Retrieve a list of health areas for a specific realm",
        "operationId": "getHealthAreaDropdownList",
        "parameters": [
          {
            "description": "The realm ID for the health area list",
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleCodeObject_DropDownView"
                  }
                }
              }
            },
            "description": "Returns the list of health areas for a specific realm"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDownView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the list of health areas"
          }
        },
        "summary": "Get Health Areas",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/dropdown/healthArea/realmCountryIds": {
      "post": {
        "description": "Retrieve a list of health areas filtered on a list of realm country IDs",
        "operationId": "getHealthAreaListByRealmCountryIds",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "description": "The list of realm country IDs",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleCodeObject_DropDownView"
                  }
                }
              }
            },
            "description": "Returns the list of health areas filtered on a list of realm country IDs"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDownView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the list of health areas"
          }
        },
        "summary": "Get Health Areas by Realm Countries",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/dropdown/organisation/nofilter/realm/{realmId}": {
      "get": {
        "description": "Retrieve a list of organisations for a specific realm without ACL Filter",
        "operationId": "getOrganisationNoFilterDropdownList",
        "parameters": [
          {
            "description": "The realm ID for the organization list",
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleCodeObject_DropDownView"
                  }
                }
              }
            },
            "description": "Returns the list of organisations for a specific realm without ACL Filter"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDownView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the list of organis"
          }
        },
        "summary": "Get Organisations without ACL Filter",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/dropdown/organisation/realm/{realmId}": {
      "get": {
        "description": "Retrieve a list of organisations for a specific realm",
        "operationId": "getOrganisationDropdownList",
        "parameters": [
          {
            "description": "The realm ID for the organization list",
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleCodeObject_DropDownView"
                  }
                }
              }
            },
            "description": "Returns the list of organisations for a specific realm"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDownView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the list of organisations"
          }
        },
        "summary": "Get Organisations",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/dropdown/organisation/realmCountryId/{realmCountryId}": {
      "get": {
        "description": "Retrieve a list of organisations for a specific realm country",
        "operationId": "getOrganisationDropdownListForRealmCountryId",
        "parameters": [
          {
            "description": "The realm country ID for the organization list",
            "in": "path",
            "name": "realmCountryId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleCodeObject_DropDownView"
                  }
                }
              }
            },
            "description": "Returns the list of organisations for a specific realm country"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDownView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the list of organisations"
          }
        },
        "summary": "Get Organisations by Country",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/dropdown/planningUnit": {
      "get": {
        "description": "Retrieve a complete list of planning units",
        "operationId": "getPlanningUnitDropDownList",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleObject_DropDownView"
                  }
                }
              }
            },
            "description": "Returns the complete list of planning units"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDownView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the complete list of planning units"
          }
        },
        "summary": "Get All Planning Units",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/dropdown/planningUnit/autocomplete": {
      "post": {
        "description": "Retrieve a list of planning units, filtering on an autocomplete input",
        "operationId": "getPlanningUnitByAutoComplete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutoCompleteInput_DropDownView"
              }
            }
          },
          "description": "The autocomplete input for the planning unit list",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleObject_DropDownView"
                  }
                }
              }
            },
            "description": "Returns the list of planning units filtered on autocomplete input"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDownView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the planning unit list"
          }
        },
        "summary": "Get Planning Units",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/dropdown/planningUnit/autocomplete/filter/productCategory/{searchText}/{language}/{productCategorySortOrder}": {
      "get": {
        "description": "Retrieve a sortable list of planning units filtered by product category",
        "operationId": "getPlanningUnitByAutoCompleteFilterForProductCategory",
        "parameters": [
          {
            "description": "The search text for the planning unit list",
            "in": "path",
            "name": "searchText",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The language for the planning unit list",
            "in": "path",
            "name": "language",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The product category sort order for the planning unit list",
            "in": "path",
            "name": "productCategorySortOrder",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleObject_DropDown3View"
                  }
                }
              }
            },
            "description": "Returns the list of planning units filtered by product category"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDown3View"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the planning unit list"
          }
        },
        "summary": "Get Planning Units by Product Category",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/dropdown/planningUnit/basic": {
      "get": {
        "description": "Retrieve a simple list of active planning units with forecasting units",
        "operationId": "getPlanningUnitListBasic_1",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimplePlanningUnitForAdjustPlanningUnit_InternalView"
                  }
                }
              }
            },
            "description": "Returns the list of planning units with forecasting units"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_InternalView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the list of planning units"
          }
        },
        "summary": "Get Planning Units with Forecasting Units",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/dropdown/planningUnit/dataset/filter/programAndVersion": {
      "post": {
        "description": "Retrieve a list of planning units filtered on a program and version",
        "operationId": "getDatasetPlanningUnitDropdownList",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProgramAndVersionDTO_DropDownView"
              }
            }
          },
          "description": "The program and version for the planning unit list",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleObject_DropDownView"
                  }
                }
              }
            },
            "description": "Returns the list of planning units filtered on a program and version"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDownView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the list of planning units"
          }
        },
        "summary": "Get Planning Units by Program and Version",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/dropdown/planningUnit/program/filter/multipleProgramAndTracerCategory": {
      "post": {
        "description": "Retrieve a list of planning units filtered on a list of program IDs and tracer category",
        "operationId": "getProgramPlanningUnitDropdownList",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultipleProgramAndTracerCategoryDTO_DropDownView"
              }
            }
          },
          "description": "The list of program IDs and tracer category for the planning unit list",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleObject_DropDownView"
                  }
                }
              }
            },
            "description": "Returns the list of planning units filtered on a list of program IDs and tracer category"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDownView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the list of planning units"
          }
        },
        "summary": "Get Planning Units by Program and Tracer Category",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/dropdown/procurementAgent": {
      "get": {
        "description": "Retrieve a list of procurement agents",
        "operationId": "getProcurementAgentDropdownList",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleCodeObject_DropDownView"
                  }
                }
              }
            },
            "description": "Returns the list of procurement agents"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDownView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the list of procurement agents"
          }
        },
        "summary": "Get Procurement Agents",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/dropdown/procurementAgent/filter/multiplePrograms": {
      "post": {
        "description": "Retrieve a list of procurement agents filtered on a list of program IDs",
        "operationId": "getProcurementAgentDropdownListForFilterMultiplePrograms",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "description": "The list of program IDs for the procurement agent list",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleCodeObject_DropDownView"
                  }
                }
              }
            },
            "description": "Returns the list of procurement agents filtered on a list of program IDs"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDownView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the list of procurement agents"
          }
        },
        "summary": "Get Procurement Agents by Programs",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/dropdown/program/all/expanded/realm/{realmId}": {
      "get": {
        "description": "Retrieve a list of programs for a realm with additional details",
        "operationId": "getProgramExpandedForAllDropdown",
        "parameters": [
          {
            "description": "The realm ID for the programs to retrieve",
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleProgram_DropDown2View"
                  }
                }
              }
            },
            "description": "Returns the list of programs for a realm"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDown2View"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the programs"
          }
        },
        "summary": "Get Programs for Realm (expanded)",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/dropdown/program/all/nofilter/expanded/realm/{realmId}": {
      "get": {
        "description": "Retrieve a list of programs for a realm with additional details without ACL Filter",
        "operationId": "getProgramNoFilterExpandedForAllDropdown",
        "parameters": [
          {
            "description": "The realm ID for the programs to retrieve",
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleProgram_DropDown2View"
                  }
                }
              }
            },
            "description": "Returns the list of programs for a realm"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDown2View"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the programs"
          }
        },
        "summary": "Get Programs for Realm (expanded) without ACL Filter",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/dropdown/program/fc/expanded/realm/{realmId}": {
      "get": {
        "description": "Retrieve a list of forecast programs for a realm with additional details",
        "operationId": "getProgramExpandedForFcDropdown",
        "parameters": [
          {
            "description": "The realm ID for the programs to retrieve",
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleProgram_DropDown2View"
                  }
                }
              }
            },
            "description": "Returns the list of programs for a realm"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDown2View"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the programs"
          }
        },
        "summary": "Get Forecast Programs for Realm (expanded)",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/dropdown/program/fc/filter/healthAreaAndRealmCountry/realm/{realmId}": {
      "post": {
        "description": "Retrieve a list of forecast programs for a realm and health area and realm country",
        "operationId": "getProgramWithFilterForHealthAreaAndRealmCountryForFcDropdown",
        "parameters": [
          {
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HealthAreaAndRealmCountryDTO_DropDownView"
              }
            }
          },
          "description": "The health area and realm country for the programs to retrieve",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleProgram_DropDownView"
                  }
                }
              }
            },
            "description": "Returns the list of programs for a realm and health area and realm country"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDownView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the programs"
          }
        },
        "summary": "Get Forecast Programs for Realm and HealthArea and RealmCountry",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/dropdown/program/fc/filter/multipleRealmCountry": {
      "post": {
        "description": "Retrieve a list of forecast programs for multiple realm countries",
        "operationId": "getProgramWithFilterForMultipleRealmCountryForFcDropdown",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "The realm countries for the programs to retrieve",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleProgram_DropDownView"
                  }
                }
              }
            },
            "description": "Returns the list of programs for multiple realm countries"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDownView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the programs"
          }
        },
        "summary": "Get Forecast Programs for Multiple RealmCountry",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/dropdown/program/fc/nofilter/expanded/realm/{realmId}": {
      "get": {
        "description": "Retrieve a list of forecast programs for a realm with additional details without ACL Filter",
        "operationId": "getProgramNoFilterExpandedForFcDropdown",
        "parameters": [
          {
            "description": "The realm ID for the programs to retrieve",
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleProgram_DropDown2View"
                  }
                }
              }
            },
            "description": "Returns the list of programs for a realm"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDown2View"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the programs"
          }
        },
        "summary": "Get Forecast Programs for Realm (expanded) without ACL Filter",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/dropdown/program/realmCountryIds/healthAreaIds": {
      "post": {
        "description": "Retrieve a list of supply plan programs filtered on a list of realm country IDs and health area IDs",
        "operationId": "getSupplyPlanProgramListByRealmCountryIdsAndHealthAreaIds",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RealmCountryIdsAndHealthAreaIds_DropDownView"
              }
            }
          },
          "description": "The list of realm country IDs and health area IDs",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleCodeObject_DropDownView"
                  }
                }
              }
            },
            "description": "Returns the list of supply plan programs filtered on a list of realm country IDs and health area IDs"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDownView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the list of supply plan programs"
          }
        },
        "summary": "Get Supply Plan Programs by Realm Countries and Health Areas",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/dropdown/program/sp/expanded/realm/{realmId}": {
      "get": {
        "description": "Retrieve a list of supply plan programs for a realm with additional details",
        "operationId": "getProgramExpandedForSpDropdown",
        "parameters": [
          {
            "description": "The realm ID for the programs to retrieve",
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleProgram_DropDown2View"
                  }
                }
              }
            },
            "description": "Returns the list of programs for a realm"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDown2View"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the programs"
          }
        },
        "summary": "Get Supply Plan Programs for Realm (expanded)",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/dropdown/program/sp/filter/healthAreaAndRealmCountry/realm/{realmId}": {
      "post": {
        "description": "Retrieve a list of supply plan programs for a realm and health area and realm country",
        "operationId": "getProgramWithFilterForHealthAreaAndRealmCountryForSpDropdown",
        "parameters": [
          {
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HealthAreaAndRealmCountryDTO_DropDownView"
              }
            }
          },
          "description": "The health area and realm country for the programs to retrieve",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleProgram_DropDownView"
                  }
                }
              }
            },
            "description": "Returns the list of programs for a realm and health area and realm country"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDownView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the programs"
          }
        },
        "summary": "Get Supply Plan Programs for Realm and HealthArea and RealmCountry",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/dropdown/program/sp/filter/multipleRealmCountry": {
      "post": {
        "description": "Retrieve a list of supply plan programs for multiple realm countries",
        "operationId": "getProgramWithFilterForMultipleRealmCountryForSpDropdown",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "The realm countries for the programs to retrieve",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleProgram_DropDownView"
                  }
                }
              }
            },
            "description": "Returns the list of programs for multiple realm countries"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDownView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the programs"
          }
        },
        "summary": "Get Supply Plan Programs for Multiple RealmCountry",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/dropdown/program/sp/nofilter/expanded/realm/{realmId}": {
      "get": {
        "description": "Retrieve a list of supply plan programs for a realm with additional details without ACL Filter",
        "operationId": "getProgramNoFilterExpandedForSpDropdown",
        "parameters": [
          {
            "description": "The realm ID for the programs to retrieve",
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleProgram_DropDown2View"
                  }
                }
              }
            },
            "description": "Returns the list of programs for a realm"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDown2View"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the programs"
          }
        },
        "summary": "Get Supply Plan Programs for Realm (expanded) without ACL Filter",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/dropdown/program/versionStatus/{versionStatusIdList}/versionType/{versionTypeIdList}": {
      "get": {
        "description": "Retrieve a list of programs filtered on version status and version type",
        "operationId": "getProgramListByVersionStatusAndVersionType",
        "parameters": [
          {
            "description": "The list of version status IDs for the program list",
            "in": "path",
            "name": "versionStatusIdList",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The list of version type IDs for the program list",
            "in": "path",
            "name": "versionTypeIdList",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleCodeObject_DropDownView"
                  }
                }
              }
            },
            "description": "Returns the list of programs filtered on version status and version type"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDownView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the list of programs"
          }
        },
        "summary": "Get Programs by Version Status and Version Type",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/dropdown/realmCountry/nofilter/realm/{realmId}": {
      "get": {
        "description": "Retrieve a list of countries for a specific realm without ACL Filter",
        "operationId": "getRealmCountryNoFilterDropdownList",
        "parameters": [
          {
            "description": "The realm ID for the country list",
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleCodeObject_DropDownView"
                  }
                }
              }
            },
            "description": "Returns the list of countries for a specific realm without ACL Filter"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDownView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the list of countries without ACL Filter"
          }
        },
        "summary": "Get Realm Countries without ACL Filter",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/dropdown/realmCountry/realm/{realmId}": {
      "get": {
        "description": "Retrieve a list of countries for a specific realm",
        "operationId": "getRealmCountryDropdownList",
        "parameters": [
          {
            "description": "The realm ID for the country list",
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleCodeObject_DropDownView"
                  }
                }
              }
            },
            "description": "Returns the list of countries for a specific realm"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDownView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the list of countries"
          }
        },
        "summary": "Get Realm Countries",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/dropdown/supplyPlan/program/realm/{realmId}": {
      "get": {
        "description": "Retrieve a list of supply plans programs for a realm",
        "operationId": "getProgramForDropdownSupplyPlan",
        "parameters": [
          {
            "description": "The realm ID for the programs to retrieve",
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleProgram_DropDownView"
                  }
                }
              }
            },
            "description": "Returns the list of supply plans programs for a realm"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDownView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the programs"
          }
        },
        "summary": "Get Supply Plan Programs for Realm",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/dropdown/tracerCategory": {
      "get": {
        "description": "Retrieve a list of tracer categories",
        "operationId": "getTracerCategoryDropdownList_1",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleObject_DropDownView"
                  }
                }
              }
            },
            "description": "Returns the list of tracer categories"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDownView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the list of tracer categories"
          }
        },
        "summary": "Get Tracer Categories",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/dropdown/tracerCategory/filter/multiplePrograms": {
      "post": {
        "description": "Retrieve a list of tracer categories filtered on a list of program IDs",
        "operationId": "getTracerCategoryDropdownList",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "description": "The list of program IDs for the tracer category list",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleObject_DropDownView"
                  }
                }
              }
            },
            "description": "Returns the list of tracer categories filtered on a list of program IDs"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDownView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the list of tracer categories"
          }
        },
        "summary": "Get Tracer Categories by Programs",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/dropdown/treeTemplate": {
      "get": {
        "description": "Retrieve a list of tree templates",
        "operationId": "getTreeTemplateList",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TreeTemplate_DropDownView"
                  }
                }
              }
            },
            "description": "Returns the list of tree templates"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDownView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the list of tree templates"
          }
        },
        "summary": "Get Tree Templates",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/dropdown/user": {
      "get": {
        "description": "Retrieve a list of users for a dropdown",
        "operationId": "getUserDropdownList",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BasicUser_DropDownView"
                  }
                }
              }
            },
            "description": "Returns the list of users"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDownView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the list of users"
          }
        },
        "summary": "Get Users",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/dropdown/version/filter/fc/programId/{programId}": {
      "get": {
        "description": "Retrieve a list of versions for a specific dataset program",
        "operationId": "getVersionListForFcProgram",
        "parameters": [
          {
            "description": "The program ID for the version list",
            "in": "path",
            "name": "programId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Version_DropDownView"
                  }
                }
              }
            },
            "description": "Returns the list of versions for a specific dataset program"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDownView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the list of versions"
          }
        },
        "summary": "Get Version List for Dataset Program",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/dropdown/version/filter/fc/programs": {
      "post": {
        "description": "Retrieve a list of versions for a list of dataset programs",
        "operationId": "getVersionListForFcPrograms",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "description": "The list of program IDs for the version list",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Returns the list of versions for a list of dataset programs"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDownView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the list of versions"
          }
        },
        "summary": "Get Version List for Dataset Programs",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/dropdown/version/filter/sp/programId/{programId}": {
      "get": {
        "description": "Retrieve a list of versions for a specific supply plan program",
        "operationId": "getVersionListForSpProgram",
        "parameters": [
          {
            "description": "The program ID for the version list",
            "in": "path",
            "name": "programId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Version_DropDownView"
                  }
                }
              }
            },
            "description": "Returns the list of versions for a specific supply plan program"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDownView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the list of versions"
          }
        },
        "summary": "Get Version List for Supply Plan Program",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/dropdown/version/filter/sp/programs": {
      "post": {
        "description": "Retrieve a list of versions for a list of supply plan programs",
        "operationId": "getVersionListForSpPrograms",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "description": "The list of program IDs for the version list",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Returns the list of versions for a list of supply plan programs"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDownView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the list of versions"
          }
        },
        "summary": "Get Version List for Supply Plan Programs",
        "tags": [
          "Dropdowns"
        ]
      }
    },
    "/api/equivalencyUnit": {
      "get": {
        "description": "Retrieve a list of active equivalency units",
        "operationId": "getEquivalencyUnitList",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EquivalencyUnit"
                  }
                }
              }
            },
            "description": "Returns the EquivalencyUnit list"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retreival of EquivalencyUnit list"
          }
        },
        "summary": "Get Active Equivalency Units",
        "tags": [
          "Equivalency Unit"
        ]
      },
      "post": {
        "description": "Create or update a list of equivalency units",
        "operationId": "addAndUpadteEquivalencyUnit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EquivalencyUnit"
              }
            }
          },
          "description": "The list of EquivalencyUnit objects that you want to add or update. If equivalencyUnitId is null or 0 then it is added if equivalencyUnitId is not null and non 0 it is updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a Success code if the operation was successful"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a HttpStatus.FORBIDDEN if you do not have rights to add/update this object"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a HttpStatus.NOT_ACCEPTABLE if the data supplied is not acceptable"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a HttpStatus.INTERNAL_SERVER_ERROR if there was some other error that did not allow the operation to complete"
          }
        },
        "summary": "Save Equivalency Units",
        "tags": [
          "Equivalency Unit"
        ]
      }
    },
    "/api/equivalencyUnit/all": {
      "get": {
        "description": "Retrieve a complete list of all equivalency units (includes disabled units)",
        "operationId": "getEquivalencyUnitListAll",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EquivalencyUnit"
                  }
                }
              }
            },
            "description": "Returns the EquivalencyUnit list"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retreival of EquivalencyUnit list"
          }
        },
        "summary": "Get All Equivalency Units",
        "tags": [
          "Equivalency Unit"
        ]
      }
    },
    "/api/equivalencyUnit/forecastingUnitId/{forecastingUnitId}/programId/{programId}": {
      "get": {
        "description": "Retrieve equivalency unit mappings for a specific forecasting unit and program",
        "operationId": "getEquivalencyUnitMappingForForecastingUnit",
        "parameters": [
          {
            "description": "The Forecasting Unit Id that you want the list of EUM for",
            "in": "path",
            "name": "forecastingUnitId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "The Program Id that you want the priority for",
            "in": "path",
            "name": "programId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EquivalencyUnitMapping"
                  }
                }
              }
            },
            "description": "Returns the EquivalencyUnitMapping list"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a HttpStatus.FORBIDDEN if you do not have rights to the Program that you requested"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retreival of EquivalencyUnitMapping list"
          }
        },
        "summary": "Get Equivalency Unit Mappings by Forecasting Unit and Program",
        "tags": [
          "Equivalency Unit"
        ]
      }
    },
    "/api/equivalencyUnit/mapping": {
      "get": {
        "description": "Retrieve a list of active equivalency unit mappings",
        "operationId": "getEquivalencyUnitMappingList",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EquivalencyUnitMapping"
                  }
                }
              }
            },
            "description": "Returns the EquivalencyUnitMapping list"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retreival of EquivalencyUnitMapping list"
          }
        },
        "summary": "Get Active Equivalency Unit Mappings",
        "tags": [
          "Equivalency Unit"
        ]
      },
      "post": {
        "description": "Create or update a list of equivalency unit mappings",
        "operationId": "addAndUpadteEquivalencyUnitMapping",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EquivalencyUnitMapping"
              }
            }
          },
          "description": "The list of EquivalencyUnitMapping objects that you want to add or update. If equivalencyUnitMappingId is null or 0 then it is added if equivalencyUnitMappingId is not null and non 0 it is updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a Success code if the operation was successful"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a HttpStatus.FORBIDDEN if you do not have rights to add/update this object"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a HttpStatus.NOT_ACCEPTABLE if the data supplied is not acceptable"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a HttpStatus.INTERNAL_SERVER_ERROR if there was some other error that did not allow the operation to complete"
          }
        },
        "summary": "Save Equivalency Unit Mappings",
        "tags": [
          "Equivalency Unit"
        ]
      }
    },
    "/api/equivalencyUnit/mapping/all": {
      "get": {
        "description": "Retrieve a complete list of all equivalency unit mappings (includes disabled mappings)",
        "operationId": "getEquivalencyUnitMappingListAll",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EquivalencyUnitMapping"
                  }
                }
              }
            },
            "description": "Returns the EquivalencyUnitMapping list"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retreival of EquivalencyUnitMapping list"
          }
        },
        "summary": "Get All Equivalency Unit Mappings",
        "tags": [
          "Equivalency Unit"
        ]
      }
    },
    "/api/export/supplyPlan/programId/{programId}/versionId/{versionId}": {
      "get": {
        "description": "Retrieve supply plan data for a specific program and version, with optional start date filtering",
        "operationId": "getSupplyPlanForProgram",
        "parameters": [
          {
            "in": "path",
            "name": "programId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "versionId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupplyPlan_ExportApiView"
                }
              }
            },
            "description": "Returns the supply plan data for the specified program and version, with optional start date filtering"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ExportApiView"
                }
              }
            },
            "description": "The user does not have rights to the Program requested"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ExportApiView"
                }
              }
            },
            "description": "Specified program or version does not exist"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ExportApiView"
                }
              }
            },
            "description": "Data is invalid"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ExportApiView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the supply plan data"
          }
        },
        "summary": "Get Supply Plan Data",
        "tags": [
          "Export API"
        ]
      }
    },
    "/api/export/supplyPlan/programId/{programId}/versionId/{versionId}/": {
      "get": {
        "description": "Retrieve supply plan data for a specific program and version, with optional start date filtering",
        "operationId": "getSupplyPlanForProgram_1",
        "parameters": [
          {
            "in": "path",
            "name": "programId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "versionId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupplyPlan_ExportApiView"
                }
              }
            },
            "description": "Returns the supply plan data for the specified program and version, with optional start date filtering"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ExportApiView"
                }
              }
            },
            "description": "The user does not have rights to the Program requested"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ExportApiView"
                }
              }
            },
            "description": "Specified program or version does not exist"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ExportApiView"
                }
              }
            },
            "description": "Data is invalid"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ExportApiView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the supply plan data"
          }
        },
        "summary": "Get Supply Plan Data",
        "tags": [
          "Export API"
        ]
      }
    },
    "/api/export/supplyPlan/programId/{programId}/versionId/{versionId}/startDate/{startDate}": {
      "get": {
        "description": "Retrieve supply plan data for a specific program and version, with optional start date filtering",
        "operationId": "getSupplyPlanForProgram_2",
        "parameters": [
          {
            "in": "path",
            "name": "programId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "versionId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "The start date for the supply plan data",
            "in": "path",
            "name": "startDate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupplyPlan_ExportApiView"
                }
              }
            },
            "description": "Returns the supply plan data for the specified program and version, with optional start date filtering"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ExportApiView"
                }
              }
            },
            "description": "The user does not have rights to the Program requested"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ExportApiView"
                }
              }
            },
            "description": "Specified program or version does not exist"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ExportApiView"
                }
              }
            },
            "description": "Data is invalid"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ExportApiView"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the supply plan data"
          }
        },
        "summary": "Get Supply Plan Data",
        "tags": [
          "Export API"
        ]
      }
    },
    "/api/forecastMethod": {
      "get": {
        "description": "Retrieve a list of active forecast methods",
        "operationId": "getForecastMethodList",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ForecastMethod"
                  }
                }
              }
            },
            "description": "Returns the ForecastMethod list"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retreival of ForecastMethod list"
          }
        },
        "summary": "Get Active Forecast Methods",
        "tags": [
          "Forecast Method"
        ]
      },
      "post": {
        "description": "Create or update a specific forecast method by its ID",
        "operationId": "addAndUpadteForecastMethod",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "The list of ForecastMethod objects that you want to add or update. If forecastMethodId is null or 0 then it is added if forecastMethodId is not null and non 0 it is updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Returns a Success code if the operation was successful"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a HttpStatus.FORBIDDEN if you do not have rights to add/update this object"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a HttpStatus.NOT_ACCEPTABLE if the data supplied is not acceptable"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a HttpStatus.INTERNAL_SERVER_ERROR if there was some other error that did not allow the operation to complete"
          }
        },
        "summary": "Save Forecast Method",
        "tags": [
          "Forecast Method"
        ]
      }
    },
    "/api/forecastMethod/all": {
      "get": {
        "description": "Retrieve a complete list of all forecast methods (active and disabled)",
        "operationId": "getForecastMethodListAll",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ForecastMethod"
                  }
                }
              }
            },
            "description": "Returns the ForecastMethod list"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retreival of ForecastMethod list"
          }
        },
        "summary": "Get All Forecast Methods",
        "tags": [
          "Forecast Method"
        ]
      }
    },
    "/api/forecastStats/arima": {
      "post": {
        "description": "Optimize ARIMA model parameters for given dataset. Returns the best-fit parameters and their corresponding RMSE.",
        "operationId": "postArima",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArimaInputDTO"
              }
            }
          },
          "description": "The input data for the ARIMA optimization",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Returns the best-fit parameters and their corresponding RMSE"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while parsing the input data"
          }
        },
        "summary": "Get Forecasting Statistics (ARIMA)",
        "tags": [
          "Forecasting Statistics"
        ]
      }
    },
    "/api/forecastStats/regression": {
      "post": {
        "description": "Perform regression analysis on given dataset. Returns the regression results.",
        "operationId": "postRegression",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Returns the regression results"
          },
          "412": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while parsing the input data"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while parsing the input data"
          }
        },
        "summary": "Get Forecasting Statistics (Regression)",
        "tags": [
          "Forecasting Statistics"
        ]
      }
    },
    "/api/forecastStats/tes": {
      "post": {
        "description": "Optimize Triple Exponential Smoothing (TES) model parameters for given dataset. Returns the best-fit parameters and their corresponding Root Mean Square Error (RMSE).",
        "operationId": "postTes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TesInputDTO"
              }
            }
          },
          "description": "The input data for the TES optimization",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Returns the best-fit parameters and their corresponding Root Mean Square Error (RMSE)"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while parsing the input data"
          }
        },
        "summary": "Get Forecasting Statistics (TES)",
        "tags": [
          "Forecasting Statistics"
        ]
      }
    },
    "/api/forecastingUnit": {
      "get": {
        "description": "Retrieve a list of active forecasting units.",
        "operationId": "getForecastingUnit",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ForecastingUnit_ReportView"
                  }
                }
              }
            },
            "description": "Returns the ForecastingUnit list"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "User does not have permission to list forecasting units"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while listing forecasting units"
          }
        },
        "summary": "Get Active Forecasting Units",
        "tags": [
          "Forecasting Unit"
        ]
      },
      "post": {
        "description": "Add a new forecasting unit.",
        "operationId": "postForecastingUnit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForecastingUnit"
              }
            }
          },
          "description": "The forecasting unit to add",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have permission to add forecasting unit"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Forecasting unit with the same name already exists"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while adding forecasting unit"
          }
        },
        "summary": "Add Forecasting Unit",
        "tags": [
          "Forecasting Unit"
        ]
      },
      "put": {
        "description": "Update an existing forecasting unit.",
        "operationId": "putForecastingUnit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForecastingUnit"
              }
            }
          },
          "description": "The forecasting unit to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success message"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have permission to update forecasting unit"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Forecasting unit with the same name already exists"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while updating forecasting unit"
          }
        },
        "summary": "Update Forecasting Unit",
        "tags": [
          "Forecasting Unit"
        ]
      }
    },
    "/api/forecastingUnit/all": {
      "get": {
        "description": "Retrieve a list of all forecasting units (active and disabled).",
        "operationId": "getForecastingUnitAll",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ForecastingUnit_ReportView"
                  }
                }
              }
            },
            "description": "Returns the ForecastingUnit list"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "User does not have permission to list forecasting units"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while listing forecasting units"
          }
        },
        "summary": "Get All Forecasting Units",
        "tags": [
          "Forecasting Unit"
        ]
      }
    },
    "/api/forecastingUnit/byIds": {
      "post": {
        "description": "Retrieve a list of forecasting units given a list of IDs.",
        "operationId": "getForecastingUnitByIdList",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "The list of forecasting unit IDs",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ForecastingUnit_ReportView"
                  }
                }
              }
            },
            "description": "Returns the ForecastingUnit list"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "User does not have permission to list forecasting units"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while listing forecasting units"
          }
        },
        "summary": "Get Forecasting Units",
        "tags": [
          "Forecasting Unit"
        ]
      }
    },
    "/api/forecastingUnit/programId/{programId}/versionId/{versionId}": {
      "get": {
        "description": "Retrieve a list of active forecasting units for a given dataset, identified by its program ID and version ID.",
        "operationId": "getForecastingUnitForDataset",
        "parameters": [
          {
            "description": "The ID of the program",
            "in": "path",
            "name": "programId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "The ID of the version",
            "in": "path",
            "name": "versionId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleObject_ReportView"
                  }
                }
              }
            },
            "description": "Returns the ForecastingUnit list"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "No forecasting units found for the given dataset"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while listing forecasting units"
          }
        },
        "summary": "Get Forecasting Units for Dataset",
        "tags": [
          "Forecasting Unit"
        ]
      }
    },
    "/api/forecastingUnit/realmId/{realmId}": {
      "get": {
        "description": "Retrieve a list of active forecasting units for a given realm, identified by its ID.",
        "operationId": "getForecastingUnitForRealm",
        "parameters": [
          {
            "description": "The ID of the realm",
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ForecastingUnit_ReportView"
                  }
                }
              }
            },
            "description": "Returns the ForecastingUnit list"
          },
          "403": {
            "content": {
              "text/json": {

              }
            },
            "description": "User does not have permission to list forecasting units"
          },
          "404": {
            "content": {
              "text/json": {

              }
            },
            "description": "No forecasting units found for the given realm"
          },
          "500": {
            "content": {
              "text/json": {

              }
            },
            "description": "Internal error while listing forecasting units"
          }
        },
        "summary": "Get Forecasting Units for Realm",
        "tags": [
          "Forecasting Unit"
        ]
      }
    },
    "/api/forecastingUnit/tracerCategory/productCategory": {
      "post": {
        "description": "Retrieve a list of active forecasting units for a given tracer category and product category.",
        "operationId": "getForecastingUnitByTracerCategoryAndProductCategory",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductCategoryAndTracerCategoryDTO_ReportView"
              }
            }
          },
          "description": "The input object containing tracer category and product category",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ForecastingUnitWithCount_ReportView"
                  }
                }
              }
            },
            "description": "Returns the ForecastingUnit list"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "User does not have permission to list forecasting units"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while listing forecasting units"
          }
        },
        "summary": "Get Forecasting Units by Tracer Category and Product Category",
        "tags": [
          "Forecasting Unit"
        ]
      }
    },
    "/api/forecastingUnit/tracerCategory/{tracerCategoryId}": {
      "get": {
        "description": "Retrieve a list of active forecasting units for a given tracer category, identified by its ID.",
        "operationId": "getForecastingUnitForTracerCategory_1",
        "parameters": [
          {
            "description": "The ID of the tracer category",
            "in": "path",
            "name": "tracerCategoryId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ForecastingUnit_ReportView"
                  }
                }
              }
            },
            "description": "Returns the ForecastingUnit list"
          },
          "403": {
            "content": {
              "text/json": {

              }
            },
            "description": "User does not have permission to list forecasting units"
          },
          "404": {
            "content": {
              "text/json": {

              }
            },
            "description": "No forecasting units found for the given tracer category"
          },
          "500": {
            "content": {
              "text/json": {

              }
            },
            "description": "Internal error while listing forecasting units"
          }
        },
        "summary": "Get Forecasting Units for Tracer Category",
        "tags": [
          "Forecasting Unit"
        ]
      }
    },
    "/api/forecastingUnit/tracerCategorys": {
      "post": {
        "description": "Retrieve a list of active forecasting units for a given list of tracer category IDs",
        "operationId": "getForecastingUnitForTracerCategory",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "description": "The list of tracer category IDs",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ForecastingUnit_ReportView"
                  }
                }
              }
            },
            "description": "Returns the ForecastingUnit list"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "User does not have permission to list forecasting units"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "No forecasting units found for the given tracer category list"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while listing forecasting units"
          }
        },
        "summary": "Get Forecasting Units for Tracer Category List",
        "tags": [
          "Forecasting Unit"
        ]
      }
    },
    "/api/forecastingUnit/{forecastingUnitId}": {
      "get": {
        "description": "Retrieve a forecasting unit by its ID.",
        "operationId": "getForecastingUnitById",
        "parameters": [
          {
            "description": "The ID of the forecasting unit",
            "in": "path",
            "name": "forecastingUnitId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForecastingUnit"
                }
              }
            },
            "description": "Returns the ForecastingUnit"
          },
          "403": {
            "content": {
              "text/json": {

              }
            },
            "description": "User does not have permission to get forecasting unit"
          },
          "404": {
            "content": {
              "text/json": {

              }
            },
            "description": "Forecasting unit not found"
          },
          "500": {
            "content": {
              "text/json": {

              }
            },
            "description": "Internal error while getting forecasting unit"
          }
        },
        "summary": "Get Forecasting Unit",
        "tags": [
          "Forecasting Unit"
        ]
      }
    },
    "/api/forecastingUnit/{forecastingUnitId}/withPrograms": {
      "get": {
        "description": "Retrieve a forecasting unit and its associated supply plan and forecasting programs (active and disabled).",
        "operationId": "getForecastingUnitWithProgramsById",
        "parameters": [
          {
            "description": "The ID of the forecasting unit",
            "in": "path",
            "name": "forecastingUnitId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Returns the ForecastingUnit with programs"
          },
          "403": {
            "content": {
              "text/json": {

              }
            },
            "description": "User does not have permission to get forecasting unit with programs"
          },
          "404": {
            "content": {
              "text/json": {

              }
            },
            "description": "Forecasting unit not found"
          },
          "500": {
            "content": {
              "text/json": {

              }
            },
            "description": "Internal error while getting forecasting unit with programs"
          }
        },
        "summary": "Get Forecasting Units with Programs",
        "tags": [
          "Forecasting Unit"
        ]
      }
    },
    "/api/fundingSource": {
      "get": {
        "description": "Retrieve a list of all active funding sources",
        "operationId": "getFundingSource",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FundingSource_ReportView"
                  }
                }
              }
            },
            "description": "Returns the FundingSource list"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while listing funding sources"
          }
        },
        "summary": "Get Funding Sources",
        "tags": [
          "Funding Source"
        ]
      },
      "post": {
        "description": "Create a new funding source",
        "operationId": "postFundingSource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FundingSource"
              }
            }
          },
          "description": "The FundingSource to add",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success message"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to add this object"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Funding source already exists"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while adding funding source"
          }
        },
        "summary": "Add Funding Source",
        "tags": [
          "Funding Source"
        ]
      },
      "put": {
        "description": "Update an existing funding source",
        "operationId": "putFundingSource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FundingSource"
              }
            }
          },
          "description": "The FundingSource to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to update this object"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Funding source not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while updating funding source"
          }
        },
        "summary": "Update Funding Source",
        "tags": [
          "Funding Source"
        ]
      }
    },
    "/api/fundingSource/getDisplayName/realmId/{realmId}/name/{name}": {
      "get": {
        "description": "Retrieve the display name for a funding source by its realm ID and name.",
        "operationId": "getFundingSourceDisplayName",
        "parameters": [
          {
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Returns the display name for the funding source"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting funding source display name"
          }
        },
        "summary": "Get Funding Source Display Name",
        "tags": [
          "Funding Source"
        ]
      }
    },
    "/api/fundingSource/realmId/{realmId}": {
      "get": {
        "description": "Retrieve a list of funding sources for a given realm, identified by its ID.",
        "operationId": "getFundingSourceForRealm",
        "parameters": [
          {
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FundingSource_ReportView"
                  }
                }
              }
            },
            "description": "Returns the FundingSource list for the given realm"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Funding source not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while getting funding source"
          }
        },
        "summary": "Get Funding Sources for Realm",
        "tags": [
          "Funding Source"
        ]
      }
    },
    "/api/fundingSource/{fundingSourceId}": {
      "get": {
        "description": "Retrieve a funding source by its ID.",
        "operationId": "getFundingSource_1",
        "parameters": [
          {
            "in": "path",
            "name": "fundingSourceId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FundingSource_ReportView"
                }
              }
            },
            "description": "Returns the FundingSource for the given ID"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Funding source not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while getting funding source"
          }
        },
        "summary": "Get Funding Source",
        "tags": [
          "Funding Source"
        ]
      }
    },
    "/api/fundingSourceType": {
      "get": {
        "description": "Retrieve a list of all active funding source types.",
        "operationId": "getFundingSourceType",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FundingSourceType"
                  }
                }
              }
            },
            "description": "Returns the FundingSourceType list"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while listing funding source types"
          }
        },
        "summary": "Get Funding Source Types",
        "tags": [
          "Funding Source"
        ]
      },
      "post": {
        "description": "Add a new funding source type.",
        "operationId": "postFundingSourceType",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FundingSourceType"
              }
            }
          },
          "description": "The FundingSourceType to add",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to add this object"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Funding source type already exists"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while adding funding source type"
          }
        },
        "summary": "Add Funding Source Type",
        "tags": [
          "Funding Source"
        ]
      },
      "put": {
        "description": "Update an existing funding source type.",
        "operationId": "putFundingSourceType",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FundingSourceType"
              }
            }
          },
          "description": "The FundingSourceType to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success message"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to update this object"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Funding source type already exists"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while updating funding source type"
          }
        },
        "summary": "Update Funding Source Type",
        "tags": [
          "Funding Source"
        ]
      }
    },
    "/api/fundingSourceType/realmId/{realmId}": {
      "get": {
        "description": "Retrieve a list of funding source types for a given realm, identified by its ID.",
        "operationId": "getFundingSourceTypeForRealm",
        "parameters": [
          {
            "description": "The ID of the realm to retrieve funding source types for",
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FundingSourceType"
                  }
                }
              }
            },
            "description": "Returns the FundingSourceType list for the given realm"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Funding source type not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting funding source type"
          }
        },
        "summary": "Get Funding Source Types for Realm",
        "tags": [
          "Funding Source"
        ]
      }
    },
    "/api/fundingSourceType/{fundingSourceTypeId}": {
      "get": {
        "description": "Retrieve a funding source type by its ID.",
        "operationId": "getFundingSourceType_1",
        "parameters": [
          {
            "description": "The ID of the funding source type to retrieve",
            "in": "path",
            "name": "fundingSourceTypeId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FundingSourceType"
                }
              }
            },
            "description": "Returns the FundingSourceType for the given ID"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Funding source type not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting funding source type"
          }
        },
        "summary": "Get Funding Source Type",
        "tags": [
          "Funding Source"
        ]
      }
    },
    "/api/getDatabaseLabelsListAll": {
      "get": {
        "description": "Retrieve a complete list of all database labels.",
        "operationId": "getDatabaseLabelsList",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DatabaseTranslationsDTO_InternalView"
                  }
                }
              }
            },
            "description": "Returns the Database Label list"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_InternalView"
                }
              }
            },
            "description": "Internal error that prevented the retreival of Database Label list"
          }
        },
        "summary": "Get Database Labels",
        "tags": [
          "Label"
        ]
      }
    },
    "/api/getStaticLabelsListAll": {
      "get": {
        "description": "Retrieve a complete list of all static labels.",
        "operationId": "getStaticLabelsList",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StaticLabelDTO"
                  }
                }
              }
            },
            "description": "Returns the Static Label list"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retreival of Static Label list"
          }
        },
        "summary": "Get Static Labels",
        "tags": [
          "Label"
        ]
      }
    },
    "/api/healthArea": {
      "get": {
        "description": "Retrieve a complete list of all health areas.",
        "operationId": "getHealthArea",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HealthArea"
                  }
                }
              }
            },
            "description": "Returns the list of HealthAreas"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting health area list"
          }
        },
        "summary": "Get Health Areas",
        "tags": [
          "Health Area"
        ]
      },
      "post": {
        "description": "Add a new health area.",
        "operationId": "postHealthArea",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HealthArea"
              }
            }
          },
          "description": "The HealthArea to add",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to add this object"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Health area already exists"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while adding health area"
          }
        },
        "summary": "Add Health Area",
        "tags": [
          "Health Area"
        ]
      },
      "put": {
        "description": "Update an existing health area.",
        "operationId": "putHealhArea",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HealthArea"
              }
            }
          },
          "description": "The HealthArea to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success message"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to update this object"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Health area not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while updating health area"
          }
        },
        "summary": "Update Health Area",
        "tags": [
          "Health Area"
        ]
      }
    },
    "/api/healthArea/getDisplayName/realmId/{realmId}/name/{name}": {
      "get": {
        "description": "Retrieve the health area based on the given display name and realm, identified by its ID.",
        "operationId": "getHealthAreaDisplayName",
        "parameters": [
          {
            "description": "The ID of the realm to retrieve health areas for",
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "The display name of the health area to retrieve",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Returns the HealthArea for the given display name and realm"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting health area"
          }
        },
        "summary": "Get Health Area by Display Name",
        "tags": [
          "Health Area"
        ]
      }
    },
    "/api/healthArea/program": {
      "get": {
        "description": "Retrieve a list of health areas that are associated with active programs.",
        "operationId": "getHealthAreaByForProgram",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HealthArea"
                  }
                }
              }
            },
            "description": "Returns the list of HealthAreas"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to access this realm"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Health areas not found"
          },
          "412": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User tried to access a HealthArea Program list without specifying a Realm"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting health area list"
          }
        },
        "summary": "Get Health Areas for Program",
        "tags": [
          "Health Area"
        ]
      }
    },
    "/api/healthArea/program/realmId/{realmId}": {
      "get": {
        "description": "Retrieve a complete list of health areas that are associated with the given realm, identified by its ID.",
        "operationId": "getHealthAreaForProgramByRealmId",
        "parameters": [
          {
            "description": "The ID of the realm to retrieve health areas for",
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HealthArea"
                  }
                }
              }
            },
            "description": "Returns the list of HealthAreas"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to access this realm"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Health area not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting health area list"
          }
        },
        "summary": "Get Health Areas for Program by Realm",
        "tags": [
          "Health Area"
        ]
      }
    },
    "/api/healthArea/realmCountryId/{realmCountryId}": {
      "get": {
        "description": "Retrieve a list of health areas for a given realm country, identified by its ID.",
        "operationId": "getHealthAreaByRealmCountry",
        "parameters": [
          {
            "description": "The ID of the realm country to retrieve health areas for",
            "in": "path",
            "name": "realmCountryId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HealthArea"
                  }
                }
              }
            },
            "description": "Returns the list of HealthAreas"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Health area not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting health area list"
          }
        },
        "summary": "Get Health Areas for Realm Country",
        "tags": [
          "Health Area"
        ]
      }
    },
    "/api/healthArea/realmId/{realmId}": {
      "get": {
        "description": "Retrieve a list of health areas for a given realm, identified by its ID.",
        "operationId": "getHealthAreaByRealmId",
        "parameters": [
          {
            "description": "The ID of the realm to retrieve health areas for",
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HealthArea"
                  }
                }
              }
            },
            "description": "Returns the list of HealthAreas"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to access this realm"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Health area not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting health area list"
          }
        },
        "summary": "Get Health Areas for Realm",
        "tags": [
          "Health Area"
        ]
      }
    },
    "/api/healthArea/{healthAreaId}": {
      "get": {
        "description": "Retrieve a health area by its ID.",
        "operationId": "getHealthArea_1",
        "parameters": [
          {
            "description": "The ID of the health area to retrieve",
            "in": "path",
            "name": "healthAreaId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthArea"
                }
              }
            },
            "description": "Returns the HealthArea for the given ID"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to access this health area"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Health area not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting health area"
          }
        },
        "summary": "Get Health Area",
        "tags": [
          "Health Area"
        ]
      }
    },
    "/api/integration": {
      "get": {
        "description": "Retrieve a complete list of all integrations.",
        "operationId": "getIntegration",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Integration"
                  }
                }
              }
            },
            "description": "Returns the Integration list"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retreival of Integration list"
          }
        },
        "summary": "Get Integration List",
        "tags": [
          "Integration"
        ]
      },
      "post": {
        "description": "Add a new integration configuration.",
        "operationId": "addIntegration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Integration"
              }
            }
          },
          "description": "The Integration object that you want to add",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a Success code if the operation was successful"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a HttpStatus.FORBIDDEN if the User does not have access"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a HttpStatus.NOT_ACCEPTABLE if the data supplied is not unique"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a HttpStatus.INTERNAL_SERVER_ERROR if there was some other error that did not allow the operation to complete"
          }
        },
        "summary": "Add Integration",
        "tags": [
          "Integration"
        ]
      },
      "put": {
        "description": "Update an existing integration configuration.",
        "operationId": "updateIntegration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Integration"
              }
            }
          },
          "description": "The Integration object that you want to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a Success code if the operation was successful"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a HttpStatus.FORBIDDEN if the User does not have access"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a HttpStatus.NOT_FOUND if the IntegrationId supplied does not exist"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a HttpStatus.NOT_ACCEPTABLE if the data supplied is not unique"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a HttpStatus.INTERNAL_SERVER_ERROR if there was some other error that did not allow the operation to complete"
          }
        },
        "summary": "Update Integration",
        "tags": [
          "Integration"
        ]
      }
    },
    "/api/integration/viewList": {
      "get": {
        "description": "Retrieve a complete list of all integration views.",
        "operationId": "getIntegrationView",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IntegrationView"
                  }
                }
              }
            },
            "description": "Returns the Integration View list"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retreival of Integration list"
          }
        },
        "summary": "Get Integration Views",
        "tags": [
          "Integration"
        ]
      }
    },
    "/api/integration/{integrationId}": {
      "get": {
        "description": "Retrieve an integration by its ID.",
        "operationId": "getIntegration_1",
        "parameters": [
          {
            "description": "IntegrationId that you want to the Integration for",
            "in": "path",
            "name": "integrationId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integration"
                }
              }
            },
            "description": "Returns the Integration"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a HttpStatus.FORBIDDEN if the User does not have access"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a HttpStatus.NOT_FOUND if the IntegrationId specified does not exist"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retreival of Integration"
          }
        },
        "summary": "Get Integration",
        "tags": [
          "Integration"
        ]
      }
    },
    "/api/integrationProgram": {
      "get": {
        "description": "Retrieve a complete list of all integration programs.",
        "operationId": "getIntegrationProgram",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IntegrationProgram"
                  }
                }
              }
            },
            "description": "Returns the Integration Program list"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retreival of Integration Program list"
          }
        },
        "summary": "Get Integration Program List",
        "tags": [
          "Integration Program"
        ]
      },
      "put": {
        "description": "Update an existing integration program.",
        "operationId": "updateIntegrationProgram",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IntegrationProgram"
              }
            }
          },
          "description": "An array of Integration Program objects that you want to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a Success code if the operation was successful"
          },
          "403": {
            "content": {
              "text/json": {

              }
            },
            "description": "Returns a HttpStatus.FORBIDDEN if the User does not have access"
          },
          "404": {
            "content": {
              "text/json": {

              }
            },
            "description": "Returns a HttpStatus.NOT_FOUND if the IntegrationId supplied does not exist"
          },
          "406": {
            "content": {
              "text/json": {

              }
            },
            "description": "Returns a HttpStatus.NOT_ACCEPTABLE if the data supplied is not unique"
          },
          "500": {
            "content": {
              "text/json": {

              }
            },
            "description": "Returns a HttpStatus.INTERNAL_SERVER_ERROR if there was some other error that did not allow the operation to complete"
          }
        },
        "summary": "Update Integration Program",
        "tags": [
          "Integration Program"
        ]
      }
    },
    "/api/integrationProgram/manualJson": {
      "post": {
        "description": "Manually pushes integration data to external systems. Handles batch requests with authentication validation and error tracking.",
        "operationId": "addManualJsonPush",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManualIntegration"
              }
            }
          },
          "description": "An array of Manual Integration requests that you want to add",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a Success code if the operation was successful"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a HttpStatus.FORBIDDEN if the User does not have access"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a HttpStatus.NOT_FOUND if the IntegrationId supplied does not exist"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a HttpStatus.INTERNAL_SERVER_ERROR if there was some other error that did not allow the operation to complete"
          }
        },
        "summary": "Manual JSON Push",
        "tags": [
          "Integration Program"
        ]
      }
    },
    "/api/integrationProgram/program/{programId}": {
      "get": {
        "description": "Retrieve a complete list of integration programs for a given program, identified by its ID.",
        "operationId": "getIntegrationProgramForProgramId",
        "parameters": [
          {
            "description": "programId that you want to the Integration Program list for",
            "in": "path",
            "name": "programId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IntegrationProgram"
                  }
                }
              }
            },
            "description": "Returns the Integration Program list for a ProgramId"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retreival of Integration Program list"
          }
        },
        "summary": "Get Integration Programs for ProgramId",
        "tags": [
          "Integration Program"
        ]
      }
    },
    "/api/integrationProgram/{integrationProgramId}": {
      "get": {
        "description": "Retrieve an integration program by its ID.",
        "operationId": "getIntegrationProgram_1",
        "parameters": [
          {
            "description": "IntegrationProgramId that you want to the Integration Program for",
            "in": "path",
            "name": "integrationProgramId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationProgram"
                }
              }
            },
            "description": "Returns the Integration Program"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a HttpStatus.FORBIDDEN if the User does not have access"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a HttpStatus.NOT_FOUND if the IntegrationId specified does not exist"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retreival of Integration Program"
          }
        },
        "summary": "Get Integration Program",
        "tags": [
          "Integration Program"
        ]
      }
    },
    "/api/language": {
      "get": {
        "description": "Retrieve a list of all active languages.",
        "operationId": "getLanguageList",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Language"
                  }
                }
              }
            },
            "description": "Returns the list of active languages"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting language list"
          }
        },
        "summary": "Get Languages",
        "tags": [
          "Language"
        ]
      },
      "post": {
        "description": "Add a new language to the system.",
        "operationId": "addLanguage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Language"
              }
            }
          },
          "description": "The Language to add",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to add this object"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Language code already exists"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while adding language"
          }
        },
        "summary": "Add Language",
        "tags": [
          "Language"
        ]
      },
      "put": {
        "description": "Update an existing language.",
        "operationId": "editLanguage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Language"
              }
            }
          },
          "description": "The Language to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to update this object"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Language code already exists"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while updating language"
          }
        },
        "summary": "Update Language",
        "tags": [
          "Language"
        ]
      }
    },
    "/api/language/all": {
      "get": {
        "description": "Retrieve a complete list of all languages (active and disabled).",
        "operationId": "getLanguageListAll",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Language"
                  }
                }
              }
            },
            "description": "Returns the list of all languages"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting language list"
          }
        },
        "summary": "Get Languages All",
        "tags": [
          "Language"
        ]
      }
    },
    "/api/language/{languageId}": {
      "get": {
        "description": "Retrieve a language by its ID.",
        "operationId": "getLanguageById",
        "parameters": [
          {
            "description": "The ID of the language to retrieve",
            "in": "path",
            "name": "languageId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Language"
                }
              }
            },
            "description": "Returns the language for the given ID"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Language not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting language"
          }
        },
        "summary": "Get Language",
        "tags": [
          "Language"
        ]
      }
    },
    "/api/loadDataset": {
      "get": {
        "description": "Retrieve the complete dataset, including realm and program data",
        "operationId": "getLoadDataset",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Returns the complete dataset, including realm and program data"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "The dataset with the given program ID was not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the dataset"
          }
        },
        "summary": "Load Dataset",
        "tags": [
          "Dataset"
        ]
      }
    },
    "/api/loadDataset/programId/{programId}/page/{page}": {
      "get": {
        "description": "Retrieve a paginated list of programs for a specific program ID",
        "operationId": "getLoadDataset_1",
        "parameters": [
          {
            "description": "The ID of the program to retrieve a paginated list of programs for",
            "in": "path",
            "name": "programId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "The page number to retrieve",
            "in": "path",
            "name": "page",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LoadProgram"
                  }
                }
              }
            },
            "description": "Returns the paginated list of programs for the specified program ID"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "The dataset with the given program ID was not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the dataset"
          }
        },
        "summary": "Load Program (paginated)",
        "tags": [
          "Dataset"
        ]
      }
    },
    "/api/loadProgram": {
      "get": {
        "description": "Retrieve a list of supply plan programs for load",
        "operationId": "getLoadProgram",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LoadProgram_InternalView"
                  }
                }
              }
            },
            "description": "Returns a list of programs for load"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_InternalView"
                }
              }
            },
            "description": "User does not have rights to access this realm"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_InternalView"
                }
              }
            },
            "description": "Internal error while getting load program"
          }
        },
        "summary": "Get Supply Plan Programs (load)",
        "tags": [
          "Program"
        ]
      }
    },
    "/api/loadProgram/programId/{programId}/page/{page}": {
      "get": {
        "description": "Retrieve a list of versions for a specific supply plan program",
        "operationId": "getLoadProgram_1",
        "parameters": [
          {
            "description": "The ID of the program to retrieve programs for",
            "in": "path",
            "name": "programId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "The page number to retrieve programs for",
            "in": "path",
            "name": "page",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoadProgram_InternalView"
                }
              }
            },
            "description": "Returns a list of programs for load"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_InternalView"
                }
              }
            },
            "description": "User does not have rights to access this program"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_InternalView"
                }
              }
            },
            "description": "Internal error while getting load program"
          }
        },
        "summary": "Get Version List for Supply Plan Program (load)",
        "tags": [
          "Program"
        ]
      }
    },
    "/api/locales/{languageCode}": {
      "get": {
        "description": "Retrieve localized static labels for a given language code.",
        "operationId": "getLanguageJson",
        "parameters": [
          {
            "description": "The language code to retrieve localized labels for",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Returns the localized labels for the given language code"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting language JSON"
          }
        },
        "summary": "Get Language JSON",
        "tags": [
          "Language"
        ]
      }
    },
    "/api/logout": {
      "get": {
        "description": "Logout",
        "operationId": "logout",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code if the operation was successful"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Invalid token"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while logging out"
          }
        },
        "summary": "Logout",
        "tags": [
          "User"
        ]
      }
    },
    "/api/master/forecastMethodType": {
      "get": {
        "description": "Retrieve a list of active forecast method types",
        "operationId": "getForecastMethodTypeList",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleBaseModel"
                  }
                }
              }
            },
            "description": "Returns the ForecastMethodType list"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retreival of ForecastMethodType list"
          }
        },
        "summary": "Get active Forecast Method Types",
        "tags": [
          "Master Data"
        ]
      }
    },
    "/api/master/nodeType": {
      "get": {
        "description": "Retrieve a list of active node types",
        "operationId": "getNodeTypeList",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NodeType"
                  }
                }
              }
            },
            "description": "Returns the NodeType list"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retreival of NodeType list"
          }
        },
        "summary": "Get active Node Types",
        "tags": [
          "Master Data"
        ]
      }
    },
    "/api/master/shipmentStatus": {
      "get": {
        "description": "Retrieve a list of shipment statuses",
        "operationId": "getShipmentStatusListActive",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShipmentStatus"
                  }
                }
              }
            },
            "description": "Returns the ShipmentStatus list"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retreival of ShipmentStatus list"
          }
        },
        "summary": "Get Shipment Statuses",
        "tags": [
          "Master Data"
        ]
      }
    },
    "/api/master/usageType": {
      "get": {
        "description": "Retrieve a list of active usage types",
        "operationId": "getUsageTypeList",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleBaseModel"
                  }
                }
              }
            },
            "description": "Returns the UsageType list"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retreival of UsageType list"
          }
        },
        "summary": "Get active Usage Types",
        "tags": [
          "Master Data"
        ]
      }
    },
    "/api/master/versionStatus": {
      "get": {
        "description": "Retrieve a list of version statuses",
        "operationId": "getVersionStatus",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleObject"
                  }
                }
              }
            },
            "description": "Returns the VersionStatus list"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retreival of VersionStatus list"
          }
        },
        "summary": "Get Version Statuses",
        "tags": [
          "Master Data"
        ]
      }
    },
    "/api/master/versionType": {
      "get": {
        "description": "Retrieve a list of version types",
        "operationId": "getVersionType",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleObject"
                  }
                }
              }
            },
            "description": "Returns the VersionType list"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retreival of VersionType list"
          }
        },
        "summary": "Get Version Types",
        "tags": [
          "Master Data"
        ]
      }
    },
    "/api/modelingType": {
      "get": {
        "description": "Retrieve a list of active Modeling Types",
        "operationId": "getModelingTypeList",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ModelingType"
                  }
                }
              }
            },
            "description": "Returns the ModelingType list"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retreival of ModelingType list"
          }
        },
        "summary": "Get Modeling Types",
        "tags": [
          "Modeling Type"
        ]
      },
      "post": {
        "description": "Create or update a list of Modeling Types",
        "operationId": "addAndUpadteModelingType",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModelingType"
              }
            }
          },
          "description": "The list of ModelingType objects that you want to add or update. If modelingTypeId is null or 0 then it is added if modelingTypeId is not null and non 0 it is updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a Success code if the operation was successful"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a HttpStatus.FORBIDDEN if you do not have rights to add/update this object"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a HttpStatus.NOT_ACCEPTABLE if the data supplied is not acceptable"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a HttpStatus.INTERNAL_SERVER_ERROR if there was some other error that did not allow the operation to complete"
          }
        },
        "summary": "Save Modeling Types",
        "tags": [
          "Modeling Type"
        ]
      }
    },
    "/api/modelingType/all": {
      "get": {
        "description": "Retrieve a complete list of all Modeling Types (active and disabled)",
        "operationId": "getModelingTypeListAll",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ModelingType"
                  }
                }
              }
            },
            "description": "Returns the ModelingType list"
          },
          "500": {
            "content": {
              "text/json": {

              }
            },
            "description": "Internal error that prevented the retreival of ModelingType list"
          }
        },
        "summary": "Get all Modeling Types",
        "tags": [
          "Modeling Type"
        ]
      }
    },
    "/api/organisation": {
      "get": {
        "description": "Retrieve a list of organisations",
        "operationId": "getOrganisation",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organisation"
                  }
                }
              }
            },
            "description": "Returns a list of organisations"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting organisation list"
          }
        },
        "summary": "Get Organisation list",
        "tags": [
          "Organisation"
        ]
      },
      "post": {
        "description": "Add a new organisation",
        "operationId": "postOrganisation_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Organisation"
              }
            }
          },
          "description": "The organisation data to add",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to add this object"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Organisation already exists"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while adding organisation"
          }
        },
        "summary": "Add Organisation",
        "tags": [
          "Organisation"
        ]
      },
      "put": {
        "description": "Update an existing organisation",
        "operationId": "putOrganisation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Organisation"
              }
            }
          },
          "description": "The organisation data to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to update this object"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Organisation data is not acceptable"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while updating organisation"
          }
        },
        "summary": "Update Organisation",
        "tags": [
          "Organisation"
        ]
      }
    },
    "/api/organisation/getDisplayName/realmId/{realmId}/name/{name}": {
      "get": {
        "description": "Retrieve an organisation's funding source suggested display name",
        "operationId": "getOrganisationDisplayName",
        "parameters": [
          {
            "description": "The ID of the realm to retrieve the organisation from",
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "The name of the organisation to retrieve",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Returns an organisation's funding source suggested display name"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting organisation display name"
          }
        },
        "summary": "Get Organisation Display Name",
        "tags": [
          "Organisation"
        ]
      }
    },
    "/api/organisation/{organisationId}": {
      "get": {
        "description": "Retrieve an organisation by its ID",
        "operationId": "getOrganisation_1",
        "parameters": [
          {
            "description": "The ID of the organisation to retrieve",
            "in": "path",
            "name": "organisationId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organisation"
                }
              }
            },
            "description": "Returns an organisation"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Organisation not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting organisation"
          }
        },
        "summary": "Get Organisation",
        "tags": [
          "Organisation"
        ]
      }
    },
    "/api/organisationType": {
      "get": {
        "description": "Retrieve a list of active organisation types",
        "operationId": "getOrganisationTypeList",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganisationType"
                  }
                }
              }
            },
            "description": "Returns a list of active organisation types"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting organisation type list"
          }
        },
        "summary": "Get Organisation Types",
        "tags": [
          "Organisation Type"
        ]
      },
      "post": {
        "description": "Add a new organisation type",
        "operationId": "postOrganisationType",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganisationType"
              }
            }
          },
          "description": "The organisation type to add",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to add this object"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Organisation type already exists"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while adding organisation type"
          }
        },
        "summary": "Add Organisation Type",
        "tags": [
          "Organisation Type"
        ]
      },
      "put": {
        "description": "Update an existing organisation type",
        "operationId": "putOrganisationType",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganisationType"
              }
            }
          },
          "description": "The organisation type to add",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to update this object"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Organisation type not found"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Organisation type already exists"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while updating organisation type"
          }
        },
        "summary": "Update Organisation Type",
        "tags": [
          "Organisation Type"
        ]
      }
    },
    "/api/organisationType/all": {
      "get": {
        "description": "Retrieve a list of all organisation types (active and disabled)",
        "operationId": "getOrganisationTypeListAll",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganisationType"
                  }
                }
              }
            },
            "description": "Returns a list of all organisation types"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting organisation type list"
          }
        },
        "summary": "Get all Organisation Types",
        "tags": [
          "Organisation Type"
        ]
      }
    },
    "/api/organisationType/realmId/{realmId}": {
      "get": {
        "description": "Retrieve a list of organisation types by realm",
        "operationId": "getOrganisationTypeByRealmId",
        "parameters": [
          {
            "description": "The ID of the realm to retrieve the organisation types from",
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganisationType"
                  }
                }
              }
            },
            "description": "Returns a list of organisation types"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to access this realm"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Organisation type not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting organisation type list"
          }
        },
        "summary": "Get Organisation Types by Realm",
        "tags": [
          "Organisation Type"
        ]
      }
    },
    "/api/organisationType/{organisationTypeId}": {
      "get": {
        "description": "Retrieve an organisation type by its ID",
        "operationId": "getOrganisationType",
        "parameters": [
          {
            "description": "The ID of the organisation type to retrieve",
            "in": "path",
            "name": "organisationTypeId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationType"
                }
              }
            },
            "description": "Returns an organisation type"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to access this organisation type"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Organisation type not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting organisation type"
          }
        },
        "summary": "Get Organisation Type",
        "tags": [
          "Organisation Type"
        ]
      }
    },
    "/api/pipeline": {
      "get": {
        "description": "Retrieve a list of pipeline programs from adb table",
        "operationId": "getPipelineProgramList",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "description": "Returns a list of pipeline programs"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting pipeline program list"
          }
        },
        "summary": "Get Pipeline Program List",
        "tags": [
          "Pipeline"
        ]
      }
    },
    "/api/pipeline/consumption/{pipelineId}": {
      "get": {
        "description": "Retrieve consumption data by pipeline ID from adb tables",
        "operationId": "getPlanningProgramConsumption",
        "parameters": [
          {
            "description": "The ID of the pipeline to retrieve the consumption data from",
            "in": "path",
            "name": "pipelineId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PplConsumption"
                  }
                }
              }
            },
            "description": "Returns a list of consumption data"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting pipeline consumption data"
          }
        },
        "summary": "Get Pipeline Consumption",
        "tags": [
          "Pipeline"
        ]
      },
      "put": {
        "description": "Save consumption data for a program",
        "operationId": "saveConsumptionForProgram",
        "parameters": [
          {
            "description": "The ID of the pipeline to save the consumption data into",
            "in": "path",
            "name": "pipelineId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QatTempConsumption"
              }
            }
          },
          "description": "The consumption data to save",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to save this consumption data"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while saving pipeline consumption data"
          }
        },
        "summary": "Save Consumption",
        "tags": [
          "Pipeline"
        ]
      }
    },
    "/api/pipeline/datasource/{pipelineId}": {
      "put": {
        "description": "Save data source data for a program",
        "operationId": "saveDataSourceForProgram",
        "parameters": [
          {
            "description": "The ID of the pipeline to save the data source data into",
            "in": "path",
            "name": "pipelineId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QatTempDataSource"
              }
            }
          },
          "description": "The data source data to save",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to save this data source data"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while saving pipeline data source data"
          }
        },
        "summary": "Save Data Source",
        "tags": [
          "Pipeline"
        ]
      }
    },
    "/api/pipeline/fundingsource/{pipelineId}": {
      "put": {
        "description": "Save funding source data for a program",
        "operationId": "saveFundingSourceForProgram",
        "parameters": [
          {
            "description": "The ID of the pipeline to save the funding source data into",
            "in": "path",
            "name": "pipelineId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QatTempFundingSource"
              }
            }
          },
          "description": "The funding source data to save",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to save this funding source data"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while saving pipeline funding source data"
          }
        },
        "summary": "Save Funding Source",
        "tags": [
          "Pipeline"
        ]
      }
    },
    "/api/pipeline/inventory/{pipelineId}": {
      "get": {
        "description": "Retrieve  pipeline inventory data from adb or temp tables",
        "operationId": "getPipelineProgramInventory",
        "parameters": [
          {
            "description": "The ID of the pipeline to retrieve the inventory data from",
            "in": "path",
            "name": "pipelineId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Returns inventory data"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting pipeline inventory data"
          }
        },
        "summary": "Get Pipeline Inventory Data",
        "tags": [
          "Pipeline"
        ]
      },
      "put": {
        "description": "Save inventory data for a program",
        "operationId": "saveInventoryForProgram",
        "parameters": [
          {
            "description": "The ID of the pipeline to save the inventory data into",
            "in": "path",
            "name": "pipelineId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QatTempInventory"
              }
            }
          },
          "description": "The inventory data to save",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to save this inventory data"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while saving pipeline inventory data"
          }
        },
        "summary": "Save Inventory Data",
        "tags": [
          "Pipeline"
        ]
      }
    },
    "/api/pipeline/json/{fileName}": {
      "post": {
        "description": "Add pipeline data from a JSON file",
        "operationId": "postOrganisation",
        "parameters": [
          {
            "description": "The name of the file containing the pipeline data",
            "in": "path",
            "name": "fileName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Pipeline"
              }
            }
          },
          "description": "The pipeline data to add",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "412": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Pipeline data already exists"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while adding pipeline data"
          }
        },
        "summary": "Add Pipeline Data",
        "tags": [
          "Pipeline"
        ]
      }
    },
    "/api/pipeline/planningUnit/{pipelineId}": {
      "put": {
        "description": "Save planning unit data for a program",
        "operationId": "savePlanningUnitForProgram_1",
        "parameters": [
          {
            "description": "The ID of the pipeline to save the planning unit data into",
            "in": "path",
            "name": "pipelineId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QatTempProgramPlanningUnit"
              }
            }
          },
          "description": "The planning unit data to save",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to save this planning unit data"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while saving pipeline planning unit data"
          }
        },
        "summary": "Save Planning Unit",
        "tags": [
          "Pipeline"
        ]
      }
    },
    "/api/pipeline/procurementagent/{pipelineId}": {
      "put": {
        "description": "Save procurement agent data for a program",
        "operationId": "saveProcurementAgentForProgram",
        "parameters": [
          {
            "description": "The ID of the pipeline to save the procurement agent data into",
            "in": "path",
            "name": "pipelineId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QatTempProcurementAgent"
              }
            }
          },
          "description": "The procurement agent data to save",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to save this procurement agent data"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while saving pipeline procurement agent data"
          }
        },
        "summary": "Save Procurement Agent",
        "tags": [
          "Pipeline"
        ]
      }
    },
    "/api/pipeline/product/{pipelineId}": {
      "get": {
        "description": "Retrieve a list of pipeline products by pipeline ID",
        "operationId": "getPipelineProductList",
        "parameters": [
          {
            "description": "The ID of the pipeline to retrieve the product list from",
            "in": "path",
            "name": "pipelineId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PplProduct"
                  }
                }
              }
            },
            "description": "Returns a list of pipeline products"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting pipeline product list"
          }
        },
        "summary": "Get Pipeline Product List",
        "tags": [
          "Pipeline"
        ]
      }
    },
    "/api/pipeline/programInfo/{pipelineId}": {
      "get": {
        "description": "Retrieve pipeline program information by pipeline ID",
        "operationId": "getProgramInfo",
        "parameters": [
          {
            "description": "The ID of the pipeline to retrieve the program information from",
            "in": "path",
            "name": "pipelineId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PplPrograminfo"
                }
              }
            },
            "description": "Returns a pipeline program information"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to access this pipeline program information"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Pipeline program information not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting pipeline program information"
          }
        },
        "summary": "Get Pipeline Program Info",
        "tags": [
          "Pipeline"
        ]
      }
    },
    "/api/pipeline/programdata/{pipelineId}": {
      "post": {
        "description": "save final program data into QAT tables from temp table",
        "operationId": "finalSaveProgramData",
        "parameters": [
          {
            "description": "The ID of the pipeline to save the final program data into",
            "in": "path",
            "name": "pipelineId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "description": "Returns 1"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Program already exists"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while saving pipeline final program data"
          }
        },
        "summary": "Save Final Program Data",
        "tags": [
          "Pipeline"
        ]
      }
    },
    "/api/pipeline/realmCountryPlanningUnit/{pipelineId}/{realmCountryId}": {
      "put": {
        "description": "Create realm country planning units for a program",
        "operationId": "createRealmCountryPlanningUnits",
        "parameters": [
          {
            "description": "The ID of the pipeline to save the realm country planning unit data into",
            "in": "path",
            "name": "pipelineId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "The ID of the realm country to save the planning unit data into",
            "in": "path",
            "name": "realmCountryId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QatTempProgramPlanningUnit"
              }
            }
          },
          "description": "The realm country planning unit data to save",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to save this realm country planning unit data"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while saving pipeline realm country planning unit data"
          }
        },
        "summary": "Create Realm Country Planning Units",
        "tags": [
          "Pipeline"
        ]
      }
    },
    "/api/pipeline/shipment/{pipelineId}": {
      "get": {
        "description": "Retrieve pipeline shipment data by pipeline ID",
        "operationId": "getPipelineShipmentdata",
        "parameters": [
          {
            "description": "The ID of the pipeline to retrieve the shipment data from",
            "in": "path",
            "name": "pipelineId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QatTempShipment"
                  }
                }
              }
            },
            "description": "Returns a pipeline shipment data"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to access this pipeline shipment data"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Pipeline shipment data not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting pipeline shipment data"
          }
        },
        "summary": "Get Pipeline Shipment Data",
        "tags": [
          "Pipeline"
        ]
      },
      "post": {
        "description": "Save shipment data for a program",
        "operationId": "saveShipmentData",
        "parameters": [
          {
            "description": "The ID of the pipeline to save the shipment data into",
            "in": "path",
            "name": "pipelineId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QatTempShipment"
              }
            }
          },
          "description": "The shipment data to save",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "description": "Returns 1"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while saving pipeline shipment data"
          }
        },
        "summary": "Save Shipment Data",
        "tags": [
          "Pipeline"
        ]
      }
    },
    "/api/planningUnit": {
      "get": {
        "description": "Retrieve a list of active planning units",
        "operationId": "getPlanningUnit",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlanningUnit_ReportView"
                  }
                }
              }
            },
            "description": "Returns a list of active planning units"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while getting planning unit list"
          }
        },
        "summary": "Get Planning Units",
        "tags": [
          "Planning Unit"
        ]
      },
      "post": {
        "description": "Save a new planning unit",
        "operationId": "postPlanningUnit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlanningUnit"
              }
            }
          },
          "description": "The planning unit data to add",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to add this planning unit"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Planning unit already exists"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while adding planning unit"
          }
        },
        "summary": "Add Planning Unit",
        "tags": [
          "Planning Unit"
        ]
      },
      "put": {
        "description": "Update an existing planning unit",
        "operationId": "putPlanningUnit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlanningUnit"
              }
            }
          },
          "description": "The planning unit data to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to update this planning unit"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while updating planning unit"
          }
        },
        "summary": "Update Planning Unit",
        "tags": [
          "Planning Unit"
        ]
      }
    },
    "/api/planningUnit/all": {
      "get": {
        "description": "Retrieve a list of all planning units (active and disabled)",
        "operationId": "getPlanningUnitAll",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlanningUnit_ReportView"
                  }
                }
              }
            },
            "description": "Returns a list of all planning units (active and disabled)"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while getting planning unit list"
          }
        },
        "summary": "Get all Planning Units",
        "tags": [
          "Planning Unit"
        ]
      }
    },
    "/api/planningUnit/basic": {
      "get": {
        "description": "Retrieve a list of planning units with basic information",
        "operationId": "getPlanningUnitListBasic",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimplePlanningUnitForAdjustPlanningUnit_InternalView"
                  }
                }
              }
            },
            "description": "Returns a list of planning units with basic information"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_InternalView"
                }
              }
            },
            "description": "Internal error while getting planning unit list"
          }
        },
        "summary": "Get Planning Units (basic)",
        "tags": [
          "Planning Unit"
        ]
      }
    },
    "/api/planningUnit/byIds": {
      "post": {
        "description": "Retrieve a list of planning units by their IDs",
        "operationId": "getPlanningUnitByIdList",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "The list of planning unit IDs to retrieve",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlanningUnit_ReportView"
                  }
                }
              }
            },
            "description": "Returns a list of planning units"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while getting planning unit list"
          }
        },
        "summary": "Get Planning Units",
        "tags": [
          "Planning Unit"
        ]
      }
    },
    "/api/planningUnit/capacity": {
      "put": {
        "description": "Create or update a list of planning unit capacities",
        "operationId": "savePlanningUnitCapacity",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PlanningUnitCapacity"
                }
              }
            }
          },
          "description": "The list of planning unit capacities to save",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a successful response code"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "No planning unit capacities found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while saving planning unit capacity"
          }
        },
        "summary": "Save Planning Unit Capacity",
        "tags": [
          "Planning Unit"
        ]
      }
    },
    "/api/planningUnit/capacity/all": {
      "get": {
        "description": "Retrieve a full list of all planning unit capacities",
        "operationId": "getPlanningUnitCapacityList",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlanningUnitCapacity"
                  }
                }
              }
            },
            "description": "Returns a full list of all planning unit capacities"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "No planning unit capacities found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting planning unit capacity"
          }
        },
        "summary": "Get Planning Unit Capacity List",
        "tags": [
          "Planning Unit"
        ]
      }
    },
    "/api/planningUnit/capacity/realmId/{realmId}": {
      "get": {
        "description": "Retrieve a list of planning unit capacities for a specific realm",
        "operationId": "getPlanningUnitCapacityForRealmId",
        "parameters": [
          {
            "description": "The ID of the realm to retrieve planning units for",
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlanningUnitCapacity"
                  }
                }
              }
            },
            "description": "Returns a list of planning unit capacities for a specific realm"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to access this realm"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "No planning unit capacities found for the specified realm"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting planning unit capacity"
          }
        },
        "summary": "Get Planning Unit Capacity for Realm",
        "tags": [
          "Planning Unit"
        ]
      }
    },
    "/api/planningUnit/capacity/realmId/{realmId}/between/{startDate}/{stopDate}": {
      "get": {
        "description": "Retrieve a list of planning unit capacities for a specific realm between two dates",
        "operationId": "getPlanningUnitCapacityForRealmId_1",
        "parameters": [
          {
            "description": "The ID of the realm to retrieve planning units for",
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "The start date of the range to retrieve planning unit capacities for",
            "in": "path",
            "name": "startDate",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The stop date of the range to retrieve planning unit capacities for",
            "in": "path",
            "name": "stopDate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlanningUnitCapacity"
                  }
                }
              }
            },
            "description": "Returns a list of planning unit capacities for a specific realm between two dates"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to access this realm"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "No planning unit capacities found for the specified realm between the specified dates"
          },
          "412": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Invalid date format"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting planning unit capacity"
          }
        },
        "summary": "Get Planning Unit Capacity for Realm (Between Dates)",
        "tags": [
          "Planning Unit"
        ]
      }
    },
    "/api/planningUnit/capacity/{planningUnitId}": {
      "get": {
        "description": "Retrieve a planning unit capacity for a specific planning unit",
        "operationId": "getPlanningUnitCapacityForId",
        "parameters": [
          {
            "description": "The ID of the planning unit to retrieve",
            "in": "path",
            "name": "planningUnitId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanningUnitCapacity"
                }
              }
            },
            "description": "Returns the planning unit capacity for a specific planning unit"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Planning unit capacity not found"
          },
          "412": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Invalid date format"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting planning unit capacity"
          }
        },
        "summary": "Get Planning Unit Capacity",
        "tags": [
          "Planning Unit"
        ]
      }
    },
    "/api/planningUnit/capacity/{planningUnitId}/between/{startDate}/{stopDate}": {
      "get": {
        "description": "Retrieve a planning unit capacity for a specific planning unit between two dates",
        "operationId": "getPlanningUnitCapacityForId_1",
        "parameters": [
          {
            "description": "The ID of the planning unit to retrieve",
            "in": "path",
            "name": "planningUnitId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "The start date of the range to retrieve planning unit capacities for",
            "in": "path",
            "name": "startDate",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The end date of the range to retrieve planning unit capacities for",
            "in": "path",
            "name": "stopDate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanningUnitCapacity"
                }
              }
            },
            "description": "Returns the planning unit capacity for a specific planning unit between two dates"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to access this planning unit"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Planning unit capacity not found"
          },
          "412": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Invalid date format"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting planning unit capacity"
          }
        },
        "summary": "Get Planning Unit Capacity (Between Dates)",
        "tags": [
          "Planning Unit"
        ]
      }
    },
    "/api/planningUnit/forecastingUnit/{forecastingUnitId}": {
      "get": {
        "description": "Retrieve a list of active planning units associated with a specific forecasting unit",
        "operationId": "getPlanningUnitByForecastingUnitId",
        "parameters": [
          {
            "description": "The ID of the forecasting unit to retrieve planning units for",
            "in": "path",
            "name": "forecastingUnitId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlanningUnit_ReportView"
                  }
                }
              }
            },
            "description": "Returns a list of active planning units associated with a specific forecasting unit"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "No planning units found for the specified forecasting unit"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while getting planning unit"
          }
        },
        "summary": "Get Planning Unit by Forecasting Unit",
        "tags": [
          "Planning Unit"
        ]
      }
    },
    "/api/planningUnit/productCategory/{productCategoryId}/active": {
      "get": {
        "description": "Retrieve a list of active planning units for a specific product category",
        "operationId": "getPlanningUnitForproductCategory",
        "parameters": [
          {
            "description": "The ID of the product category to retrieve planning units for",
            "in": "path",
            "name": "productCategoryId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlanningUnit_ReportView"
                  }
                }
              }
            },
            "description": "Returns a list of active planning units for a specific product category"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "User does not have rights to access this product category"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "No planning units found for the specified product category"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while getting planning unit"
          }
        },
        "summary": "Get Planning Unit for Product Category",
        "tags": [
          "Planning Unit"
        ]
      }
    },
    "/api/planningUnit/productCategory/{productCategoryId}/all": {
      "get": {
        "description": "Retrieve a list of all planning units for a specific product category (active and disabled)",
        "operationId": "getPlanningUnitForProductCategoryAll",
        "parameters": [
          {
            "description": "The ID of the product category to retrieve planning units for",
            "in": "path",
            "name": "productCategoryId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlanningUnit_ReportView"
                  }
                }
              }
            },
            "description": "Returns a list of all planning units for a specific product category (active and disabled)"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "User does not have rights to access this product category"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "No planning units found for the specified product category"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while getting planning unit"
          }
        },
        "summary": "Get all Planning Units for Product Category",
        "tags": [
          "Planning Unit"
        ]
      }
    },
    "/api/planningUnit/productCategoryList/active/realmCountryId/{realmCountryId}": {
      "post": {
        "description": "Retrieve a list of active planning units for a list of product categories",
        "operationId": "getPlanningUnitForproductCategoryList",
        "parameters": [
          {
            "description": "The ID of the realm country to retrieve planning units for",
            "in": "path",
            "name": "realmCountryId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleObject_ReportView"
                  }
                }
              }
            },
            "description": "Returns a list of active planning units for a list of product categories"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "User does not have rights to access this product category"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "No planning units found for the specified product category"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while getting planning unit"
          }
        },
        "summary": "Get Planning Unit for Product Category List",
        "tags": [
          "Planning Unit"
        ]
      }
    },
    "/api/planningUnit/programId/{programId}/versionId/{versionId}": {
      "get": {
        "description": "Retrieve planning unit data for a specific program and version ID",
        "operationId": "getPlanningUnitForDataset",
        "parameters": [
          {
            "description": "The ID of the program to retrieve planning unit data for",
            "in": "path",
            "name": "programId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "The ID of the version to retrieve planning unit data for",
            "in": "path",
            "name": "versionId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetPlanningUnit"
                }
              }
            },
            "description": "Returns the planning unit data for the specified program and version ID"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "The user does not have permission to access this dataset"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "The dataset with the given program ID was not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retrieval of the planning unit data"
          }
        },
        "summary": "Get Planning Unit for Dataset",
        "tags": [
          "Dataset"
        ]
      }
    },
    "/api/planningUnit/programs": {
      "post": {
        "description": "Retrieve a list of planning units for a list of supply plan programs",
        "operationId": "getPlanningUnitForProgramList_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "description": "The list of program IDs to retrieve planning units for",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleObject"
                  }
                }
              }
            },
            "description": "Returns a list of planning units for a list of programs"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to access these programs"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting planning unit list"
          }
        },
        "summary": "Get Planning Units mapped to Supply Plan Programs",
        "tags": [
          "Program"
        ]
      }
    },
    "/api/planningUnit/realmCountry/{realmCountryId}": {
      "get": {
        "description": "Retrieve a list of all planning units attached to a supply plan for a specific realm country",
        "operationId": "getPlanningUnitByRealmCountry",
        "parameters": [
          {
            "description": "The ID of the realm country to retrieve planning units for",
            "in": "path",
            "name": "realmCountryId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleObject"
                  }
                }
              }
            },
            "description": "Returns a list of planning units for a specific realm country"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to access this realm country"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "No planning units found for the specified realm country"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting planning unit"
          }
        },
        "summary": "Get Planning Units by Realm Country",
        "tags": [
          "Planning Unit"
        ]
      }
    },
    "/api/planningUnit/realmId/{realmId}": {
      "get": {
        "description": "Retrieve a list of active planning units for a specific realm",
        "operationId": "getPlanningUnitForRealm",
        "parameters": [
          {
            "description": "The ID of the realm to retrieve planning units for",
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlanningUnit_ReportView"
                  }
                }
              }
            },
            "description": "Returns a list of active planning units for a specific realm"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "User does not have rights to access this realm"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "No planning units found for the specified realm"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while getting planning unit list"
          }
        },
        "summary": "Get Planning Units for Realm",
        "tags": [
          "Planning Unit"
        ]
      }
    },
    "/api/planningUnit/realmId/{realmId}/all": {
      "get": {
        "description": "Retrieve a list of all planning units (active and disabled) for a specific realm",
        "operationId": "getPlanningUnitForRealmAll",
        "parameters": [
          {
            "description": "The ID of the realm to retrieve planning units for",
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlanningUnit_ReportView"
                  }
                }
              }
            },
            "description": "Returns a list of all planning units (active and disabled) for a specific realm"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "User does not have rights to access this realm"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "No planning units found for the specified realm"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while getting planning unit list"
          }
        },
        "summary": "Get all Planning Units for Realm",
        "tags": [
          "Planning Unit"
        ]
      }
    },
    "/api/planningUnit/tracerCategory/productCategory/forecastingUnit": {
      "post": {
        "description": "Retrieve a list of planning units for a specific tracer category, product category and forecasting unit",
        "operationId": "getPlanningUnitForTracerCategorys_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductCategoryTracerCategoryAndForecastingUnitDTO_ReportView"
              }
            }
          },
          "description": "The input object containing tracer category, product category and forecasting unit IDs",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlanningUnitWithCount_ReportView"
                  }
                }
              }
            },
            "description": "Returns a list of planning units for a specific tracer category, product category and forecasting unit"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "User does not have rights to access this tracer category, product category and forecasting unit"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "No planning units found for the specified tracer category, product category and forecasting unit"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while getting planning unit"
          }
        },
        "summary": "Get Planning Units by Tracer Category, Product Category and Forecasting Unit",
        "tags": [
          "Planning Unit"
        ]
      }
    },
    "/api/planningUnit/tracerCategory/{tracerCategoryId}": {
      "get": {
        "description": "Retrieve a list of active planning units for a specific tracer category",
        "operationId": "getPlanningUnitForTracerCategory",
        "parameters": [
          {
            "description": "The ID of the tracer category to retrieve planning units for",
            "in": "path",
            "name": "tracerCategoryId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleObject"
                  }
                }
              }
            },
            "description": "Returns a list of active planning units for a specific tracer category"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to access this tracer category"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "No planning units found for the specified tracer category"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting planning unit"
          }
        },
        "summary": "Get Planning Units by Tracer Category",
        "tags": [
          "Planning Unit"
        ]
      }
    },
    "/api/planningUnit/tracerCategorys": {
      "post": {
        "description": "Retrieve a list of planning units for a list of tracer categories",
        "operationId": "getPlanningUnitForTracerCategorys",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "description": "The list of tracer categories to retrieve planning units for",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlanningUnit"
                  }
                }
              }
            },
            "description": "Returns a list of planning units for a list of tracer categories"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to access this tracer category"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "No planning units found for the specified tracer category"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting planning unit"
          }
        },
        "summary": "Get Planning Units by Tracer Category List",
        "tags": [
          "Planning Unit"
        ]
      }
    },
    "/api/planningUnit/withPrices/byIds": {
      "post": {
        "description": "Retrieve a list of planning units with prices",
        "operationId": "getPlanningUnitWithPricesByIdList",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "The list of planning unit IDs to retrieve",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlanningUnitWithPrices_ReportView"
                  }
                }
              }
            },
            "description": "Returns a list of planning units with prices"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while getting planning unit list"
          }
        },
        "summary": "Get Planning Units with Prices",
        "tags": [
          "Planning Unit"
        ]
      }
    },
    "/api/planningUnit/withPricing/productCategory/{productCategoryId}": {
      "get": {
        "description": "Retrieve a list of planning units with pricing for a specific product category",
        "operationId": "getPlanningUnitWithPricingForProductCategory",
        "parameters": [
          {
            "description": "The ID of the product category to retrieve planning units with pricing for",
            "in": "path",
            "name": "productCategoryId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimplePlanningUnitWithPrices"
                  }
                }
              }
            },
            "description": "Returns a list of planning units with pricing for a specific product category"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to access this product category"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "No planning units found with pricing for the specified product category"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting planning unit"
          }
        },
        "summary": "Get Planning Units with Pricing for Product Category",
        "tags": [
          "Planning Unit"
        ]
      }
    },
    "/api/planningUnit/{planningUnitId}": {
      "get": {
        "description": "Retrieve a planning unit by its ID",
        "operationId": "getPlanningUnitById",
        "parameters": [
          {
            "description": "The ID of the planning unit to retrieve",
            "in": "path",
            "name": "planningUnitId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanningUnit"
                }
              }
            },
            "description": "Returns the planning unit with the specified ID"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Planning unit not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting planning unit"
          }
        },
        "summary": "Get Planning Unit",
        "tags": [
          "Planning Unit"
        ]
      }
    },
    "/api/planningUnit/{planningUnitId}/withPrograms": {
      "get": {
        "description": "Retrieve a planning unit with its associated supply planning and forecasting programs (active and disabled)",
        "operationId": "getPlanningUnitWithProgramsById",
        "parameters": [
          {
            "description": "The ID of the planning unit to retrieve",
            "in": "path",
            "name": "planningUnitId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Returns the planning unit with its associated supply planning and forecasting programs (active and disabled)"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_InternalView"
                }
              }
            },
            "description": "Planning unit not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_InternalView"
                }
              }
            },
            "description": "Internal error while getting planning unit"
          }
        },
        "summary": "Get Planning Unit with Programs",
        "tags": [
          "Planning Unit"
        ]
      }
    },
    "/api/problemReport/createManualProblem": {
      "post": {
        "description": "Create a new manual problem entry for a Supply Plan Program",
        "operationId": "createManualProblem",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManualProblem"
              }
            }
          },
          "description": "The input object containing problem details",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "description": "Returns the created manual problem ID"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to create a manual problem entry"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "No manual problem entry found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while creating a manual problem entry"
          }
        },
        "summary": "Create Manual Problem",
        "tags": [
          "Problem"
        ]
      }
    },
    "/api/problemStatus": {
      "get": {
        "description": "Retrieve a complete list of all problem statuses",
        "operationId": "getProblemStatusList",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProblemStatus"
                  }
                }
              }
            },
            "description": "Returns a complete list of all problem statuses"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting problem status list"
          }
        },
        "summary": "Get Problem Status List",
        "tags": [
          "Problem"
        ]
      }
    },
    "/api/procurementAgent": {
      "get": {
        "description": "Retrieve a list of active procurement agents",
        "operationId": "getProcurementAgent",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProcurementAgent_ReportView"
                  }
                }
              }
            },
            "description": "Returns a list of active procurement agents"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while getting procurement agent list"
          }
        },
        "summary": "Get Procurement Agents",
        "tags": [
          "Procurement Agent"
        ]
      },
      "post": {
        "description": "Create a new procurement agent",
        "operationId": "postProcurementAgent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcurementAgent"
              }
            }
          },
          "description": "The input object containing procurement agent details",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to create a procurement agent"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "No procurement agent found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while creating a procurement agent"
          }
        },
        "summary": "Add Procurement Agent",
        "tags": [
          "Procurement Agent"
        ]
      },
      "put": {
        "description": "Update an existing procurement agent",
        "operationId": "putProcurementAgent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcurementAgent"
              }
            }
          },
          "description": "The input object containing procurement agent details",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to update a procurement agent"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Procurement agent already exists"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while updating a procurement agent"
          }
        },
        "summary": "Update Procurement Agent",
        "tags": [
          "Procurement Agent"
        ]
      }
    },
    "/api/procurementAgent/forecastingUnit": {
      "put": {
        "description": "Create or update a list of forecasting units for a procurement agent",
        "operationId": "saveForecastingUnitForProcurementAgent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcurementAgentForecastingUnit"
              }
            }
          },
          "description": "The input object containing procurement agent forecasting unit details",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to update a procurement agent"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while updating a procurement agent"
          }
        },
        "summary": "Save Forecasting Unit for Procurement Agent",
        "tags": [
          "Procurement Agent"
        ]
      }
    },
    "/api/procurementAgent/getDisplayName/realmId/{realmId}/name/{name}": {
      "get": {
        "description": "Retrieve a procurement agent display name by their realm and name",
        "operationId": "getProcurementAgentDisplayName",
        "parameters": [
          {
            "description": "The ID of the realm to retrieve procurement agent display name for",
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "The name of the procurement agent to retrieve display name for",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Returns a procurement agent display name by their realm and name"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting procurement agent display name"
          }
        },
        "summary": "Get Procurement Agent Display Name",
        "tags": [
          "Procurement Agent"
        ]
      }
    },
    "/api/procurementAgent/planningUnit": {
      "put": {
        "description": "Create or update a list of planning units for a procurement agent",
        "operationId": "savePlanningUnitForProcurementAgent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcurementAgentPlanningUnit"
              }
            }
          },
          "description": "The input object containing procurement agent planning unit details",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to update a procurement agent"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while updating a procurement agent"
          }
        },
        "summary": "Save Planning Unit for Procurement Agent",
        "tags": [
          "Procurement Agent"
        ]
      }
    },
    "/api/procurementAgent/procurementUnit": {
      "put": {
        "description": "Save a list of procurement units for a procurement agent",
        "operationId": "saveProcurementUnitForProcurementAgent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcurementAgentProcurementUnit"
              }
            }
          },
          "description": "The input object containing procurement agent procurement unit details",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to update a procurement agent"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while updating a procurement agent"
          }
        },
        "summary": "Save Procurement Unit for Procurement Agent",
        "tags": [
          "Procurement Agent"
        ]
      }
    },
    "/api/procurementAgent/realmId/{realmId}": {
      "get": {
        "description": "Retrieve a list of procurement agents for a specific realm",
        "operationId": "getProcurementAgentForRealm",
        "parameters": [
          {
            "description": "The ID of the realm to retrieve procurement agent list for",
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProcurementAgent_ReportView"
                  }
                }
              }
            },
            "description": "Returns a list of procurement agents for a specific realm"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while getting procurement agent list"
          }
        },
        "summary": "Get Procurement Agent by Realm",
        "tags": [
          "Procurement Agent"
        ]
      }
    },
    "/api/procurementAgent/{procurementAgentId}": {
      "get": {
        "description": "Retrieve a procurement agent by their unique identifier",
        "operationId": "getProcurementAgent_1",
        "parameters": [
          {
            "description": "The ID of the procurement agent to retrieve",
            "in": "path",
            "name": "procurementAgentId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcurementAgent_ReportView"
                }
              }
            },
            "description": "Returns a procurement agent by their unique identifier"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Procurement agent not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while getting procurement agent"
          }
        },
        "summary": "Get Procurement Agent",
        "tags": [
          "Procurement Agent"
        ]
      }
    },
    "/api/procurementAgent/{procurementAgentId}/forecastingUnit": {
      "get": {
        "description": "Retrieve a list of forecasting units for a procurement agent",
        "operationId": "getProcurementAgentForecastingUnitList",
        "parameters": [
          {
            "description": "The ID of the procurement agent to retrieve forecasting unit list for",
            "in": "path",
            "name": "procurementAgentId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProcurementAgentForecastingUnit"
                  }
                }
              }
            },
            "description": "Returns a list of forecasting units for a procurement agent"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Procurement agent not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting procurement agent forecasting unit list"
          }
        },
        "summary": "Get Procurement Agent Forecasting Units",
        "tags": [
          "Procurement Agent"
        ]
      }
    },
    "/api/procurementAgent/{procurementAgentId}/forecastingUnit/all": {
      "get": {
        "description": "Retrieve a list of forecasting units for a procurement agent",
        "operationId": "getProcurementAgentForecastingUnitListAll",
        "parameters": [
          {
            "description": "The ID of the procurement agent to retrieve forecasting unit list for",
            "in": "path",
            "name": "procurementAgentId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProcurementAgentForecastingUnit"
                  }
                }
              }
            },
            "description": "Returns a list of forecasting units for a procurement agent"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Procurement agent not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting procurement agent forecasting unit list"
          }
        },
        "summary": "Get Procurement Agent Forecasting Units",
        "tags": [
          "Procurement Agent"
        ]
      }
    },
    "/api/procurementAgent/{procurementAgentId}/planningUnit/all": {
      "get": {
        "description": "Retrieve a list of planning units for a procurement agent",
        "operationId": "getProcurementAgentPlanningUnitListAll",
        "parameters": [
          {
            "description": "The ID of the procurement agent to retrieve planning unit list for",
            "in": "path",
            "name": "procurementAgentId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProcurementAgentPlanningUnit"
                  }
                }
              }
            },
            "description": "Returns a list of planning units for a procurement agent"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Procurement agent not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting procurement agent planning unit list"
          }
        },
        "summary": "Get Procurement Agent Planning Units",
        "tags": [
          "Procurement Agent"
        ]
      }
    },
    "/api/procurementAgent/{procurementAgentId}/procurementUnit": {
      "get": {
        "description": "Retrieve a list of active procurement units for a procurement agent",
        "operationId": "getProcurementAgentProcurementUnitList",
        "parameters": [
          {
            "description": "The ID of the procurement agent to retrieve procurement unit list for",
            "in": "path",
            "name": "procurementAgentId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProcurementAgentProcurementUnit"
                  }
                }
              }
            },
            "description": "Returns a list of procurement units for a procurement agent"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Procurement agent not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting procurement agent procurement unit list"
          }
        },
        "summary": "Get Procurement Agent Procurement Units",
        "tags": [
          "Procurement Agent"
        ]
      }
    },
    "/api/procurementAgent/{procurementAgentId}/procurementUnit/all": {
      "get": {
        "description": "Retrieve a list of procurement units for a procurement agent",
        "operationId": "getProcurementAgentProcurementUnitListAll",
        "parameters": [
          {
            "description": "The ID of the procurement agent to retrieve procurement unit list for",
            "in": "path",
            "name": "procurementAgentId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProcurementAgentProcurementUnit"
                  }
                }
              }
            },
            "description": "Returns a list of procurement units for a procurement agent"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Procurement agent not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting procurement agent procurement unit list"
          }
        },
        "summary": "Get Procurement Agent Procurement Units",
        "tags": [
          "Procurement Agent"
        ]
      }
    },
    "/api/procurementAgentType": {
      "get": {
        "description": "Retrieve a list of active procurement agent types",
        "operationId": "getProcurementAgentType",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProcurementAgentType"
                  }
                }
              }
            },
            "description": "Returns a list of active procurement agent types"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while retrieving a list of active procurement agent types"
          }
        },
        "summary": "Get Procurement Agent Types",
        "tags": [
          "procurement-agent-type-rest-controller"
        ]
      },
      "post": {
        "description": "Create a new procurement agent type",
        "operationId": "postProcurementAgentType",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcurementAgentType"
              }
            }
          },
          "description": "The input object containing procurement agent type details",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to create a procurement agent type"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Procurement agent type already exists"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while creating a procurement agent type"
          }
        },
        "summary": "Create Procurement Agent Type",
        "tags": [
          "procurement-agent-type-rest-controller"
        ]
      },
      "put": {
        "description": "Update an existing procurement agent type",
        "operationId": "putProcurementAgentType",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcurementAgentType"
              }
            }
          },
          "description": "The input object containing procurement agent type details",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to update a procurement agent type"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while updating a procurement agent type"
          }
        },
        "summary": "Update Procurement Agent Type",
        "tags": [
          "procurement-agent-type-rest-controller"
        ]
      }
    },
    "/api/procurementAgentType/realmId/{realmId}": {
      "get": {
        "description": "Retrieve a list of active procurement agent types for a realm",
        "operationId": "getProcurementAgentTypeForRealm",
        "parameters": [
          {
            "description": "The ID of the realm to retrieve procurement agent types for",
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProcurementAgentType"
                  }
                }
              }
            },
            "description": "Returns a list of active procurement agent types for a realm"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to access this realm"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "No active procurement agent types found for the specified realm"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while retrieving a list of active procurement agent types for a realm"
          }
        },
        "summary": "Get Procurement Agent Types for Realm",
        "tags": [
          "procurement-agent-type-rest-controller"
        ]
      }
    },
    "/api/procurementAgentType/{procurementAgentTypeId}": {
      "get": {
        "description": "Retrieve a procurement agent type by its ID",
        "operationId": "getProcurementAgentType_1",
        "parameters": [
          {
            "description": "The ID of the procurement agent type to retrieve",
            "in": "path",
            "name": "procurementAgentTypeId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcurementAgentType"
                }
              }
            },
            "description": "Returns a procurement agent type"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Procurement agent type not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting a procurement agent type"
          }
        },
        "summary": "Get Procurement Agent Type by Id",
        "tags": [
          "procurement-agent-type-rest-controller"
        ]
      }
    },
    "/api/procurementUnit": {
      "get": {
        "description": "Retrieve a list of active procurement units",
        "operationId": "getProcurementUnit",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProcurementUnit"
                  }
                }
              }
            },
            "description": "Returns a list of active procurement units"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting procurement unit list"
          }
        },
        "summary": "Get Procurement Unit List",
        "tags": [
          "Procurement Unit"
        ]
      },
      "post": {
        "description": "Create a new procurement unit",
        "operationId": "postProcurementUnit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcurementUnit"
              }
            }
          },
          "description": "The input object containing procurement unit details",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to add a procurement unit"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Procurement unit name already exists"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while adding a procurement unit"
          }
        },
        "summary": "Add Procurement Unit",
        "tags": [
          "Procurement Unit"
        ]
      },
      "put": {
        "description": "Update an existing procurement unit",
        "operationId": "putProcurementUnit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcurementUnit"
              }
            }
          },
          "description": "The input object containing procurement unit details",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to update a procurement unit"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Procurement unit name already exists"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while updating a procurement unit"
          }
        },
        "summary": "Update Procurement Unit",
        "tags": [
          "Procurement Unit"
        ]
      }
    },
    "/api/procurementUnit/all": {
      "get": {
        "description": "Retrieve a list of all procurement units (active and disabled)",
        "operationId": "getProcurementUnitAll",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProcurementUnit"
                  }
                }
              }
            },
            "description": "Returns a list of all procurement units (active and disabled)"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting all procurement unit list"
          }
        },
        "summary": "Get all Procurement Units",
        "tags": [
          "Procurement Unit"
        ]
      }
    },
    "/api/procurementUnit/planningUnitId/{planningUnitId}": {
      "get": {
        "description": "Retrieve a list of procurement units for a specific planning unit",
        "operationId": "getProcurementUnitForPlanningUnit",
        "parameters": [
          {
            "description": "The ID of the planning unit to retrieve procurement units for",
            "in": "path",
            "name": "planningUnitId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProcurementUnit"
                  }
                }
              }
            },
            "description": "Returns a list of procurement units for a specific planning unit"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to access this planning unit"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting procurement unit list"
          }
        },
        "summary": "Get Procurement Units by Planning Unit",
        "tags": [
          "Procurement Unit"
        ]
      }
    },
    "/api/procurementUnit/planningUnitId/{planningUnitId}/all": {
      "get": {
        "description": "Retrieve a list of all procurement units (active and disabled) for a specific planning unit",
        "operationId": "getProcurementUnitForPlanningUnitAll",
        "parameters": [
          {
            "description": "The ID of the planning unit to retrieve procurement units for",
            "in": "path",
            "name": "planningUnitId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProcurementUnit"
                  }
                }
              }
            },
            "description": "Returns a list of all procurement units (active and disabled) for a specific planning unit"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to access this planning unit"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting all procurement unit list"
          }
        },
        "summary": "Get all Procurement Units by Planning Unit",
        "tags": [
          "Procurement Unit"
        ]
      }
    },
    "/api/procurementUnit/realmId/{realmId}": {
      "get": {
        "description": "Retrieve a list of procurement units for a specific realm",
        "operationId": "getProcurementUnitForRealm",
        "parameters": [
          {
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProcurementUnit"
                  }
                }
              }
            },
            "description": "Returns a list of procurement units for a specific realm"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to access this realm"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting procurement unit list"
          }
        },
        "summary": "Get Procurement Units by Realm",
        "tags": [
          "Procurement Unit"
        ]
      }
    },
    "/api/procurementUnit/realmId/{realmId}/all": {
      "get": {
        "description": "Retrieve a list of all procurement units (active and disabled) for a specific realm",
        "operationId": "getProcurementUnitForRealmAll",
        "parameters": [
          {
            "description": "The ID of the realm to retrieve procurement units for",
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProcurementUnit"
                  }
                }
              }
            },
            "description": "Returns a list of all procurement units (active and disabled) for a specific realm"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to access this realm"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting all procurement unit list"
          }
        },
        "summary": "Get all Procurement Units by Realm",
        "tags": [
          "Procurement Unit"
        ]
      }
    },
    "/api/procurementUnit/{procurementUnitId}": {
      "get": {
        "description": "Retrieve a procurement unit by their unique identifier",
        "operationId": "getProcurementUnitById",
        "parameters": [
          {
            "description": "The ID of the procurement unit to retrieve",
            "in": "path",
            "name": "procurementUnitId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcurementUnit"
                }
              }
            },
            "description": "Returns a procurement unit by their unique identifier"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Procurement unit not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting procurement unit"
          }
        },
        "summary": "Get Procurement Unit",
        "tags": [
          "Procurement Unit"
        ]
      }
    },
    "/api/productCategory": {
      "put": {
        "description": "Save a product category tree",
        "operationId": "putProductCategory",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductCategory"
              }
            }
          },
          "description": "The input object containing product category details",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to update product categories"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while updating product categories"
          }
        },
        "summary": "Save Product Category",
        "tags": [
          "Product Category"
        ]
      }
    },
    "/api/productCategory/realmId/{realmId}": {
      "get": {
        "description": "Retrieve a list of product categories for a specific realm",
        "operationId": "getProductCategory",
        "parameters": [
          {
            "description": "The ID of the realm to retrieve product categories for",
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductCategory"
                  }
                }
              }
            },
            "description": "Returns a list of product categories for a specific realm"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to access this realm"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting product category list"
          }
        },
        "summary": "Get Product Categories",
        "tags": [
          "Product Category"
        ]
      }
    },
    "/api/productCategory/realmId/{realmId}/list/{productCategoryId}/{includeCurrentLevel}/{includeAllChildren}": {
      "get": {
        "description": "Retrieve a list of product categories for a specific realm",
        "operationId": "getProductCategoryByRealmId",
        "parameters": [
          {
            "description": "The ID of the realm to retrieve product categories for",
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "The ID of the product category to retrieve",
            "in": "path",
            "name": "productCategoryId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Whether to include the current level of product categories",
            "in": "path",
            "name": "includeCurrentLevel",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Whether to include all children of the product category",
            "in": "path",
            "name": "includeAllChildren",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Node"
                  }
                }
              }
            },
            "description": "Returns a list of product categories for a specific realm"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting product category list"
          }
        },
        "summary": "Get Product Categories by Realm",
        "tags": [
          "Product Category"
        ]
      }
    },
    "/api/productCategory/realmId/{realmId}/programId/{programId}": {
      "get": {
        "description": "Retrieve a list of product categories for a specific program",
        "operationId": "getProductCategoryForProgram",
        "parameters": [
          {
            "description": "The ID of the realm to retrieve product categories for",
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "The ID of the program to retrieve product categories for",
            "in": "path",
            "name": "programId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Node"
                  }
                }
              }
            },
            "description": "Returns a list of product categories for a specific program"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting product category list"
          }
        },
        "summary": "Get Product Categories for Supply Plan Program",
        "tags": [
          "Product Category"
        ]
      }
    },
    "/api/program": {
      "get": {
        "description": "Retrieve a list of active supply plan programs",
        "operationId": "getProgram",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Program"
                  }
                }
              }
            },
            "description": "Returns a list of active supply plan programs"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting program list"
          }
        },
        "summary": "Get Supply Plan Programs",
        "tags": [
          "Program"
        ]
      },
      "put": {
        "description": "Update an existing supply plan program",
        "operationId": "putProgram",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProgramInitialize"
              }
            }
          },
          "description": "The input object containing program details",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to update a program"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Program not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while updating program"
          }
        },
        "summary": "Update Program",
        "tags": [
          "Program"
        ]
      }
    },
    "/api/program/actualConsumptionReport": {
      "post": {
        "description": "Retrieve actual consumption data for a specific program and version",
        "operationId": "getProgramProductCatalog_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActualConsumptionDataInput_ReportView"
              }
            }
          },
          "description": "The input object containing actual consumption data",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Returns actual consumption data for a specific program and version"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "User does not have rights to access this program"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while getting actual consumption data"
          }
        },
        "summary": "Get Actual Consumption Report",
        "tags": [
          "Program Data"
        ]
      }
    },
    "/api/program/all": {
      "get": {
        "description": "Retrieve a list of all supply plan programs",
        "operationId": "getProgramAll",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Program"
                  }
                }
              }
            },
            "description": "Returns a list of all supply plan programs"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting program list"
          }
        },
        "summary": "Get Supply Plan Programs (All)",
        "tags": [
          "Program"
        ]
      }
    },
    "/api/program/data/version/trans/programId/{programId}": {
      "get": {
        "description": "Retrieve transactions for a specific program and version",
        "operationId": "getProgramVersionTrans",
        "parameters": [
          {
            "description": "The ID of the program to retrieve transactions for",
            "in": "path",
            "name": "programId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProgramVersionTrans_ReportView"
                  }
                }
              }
            },
            "description": "Returns transactions for a specific program and version"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "User does not have rights to access this program"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while getting transactions for program"
          }
        },
        "summary": "Get Program Version Transactions",
        "tags": [
          "Program Data"
        ]
      }
    },
    "/api/program/data/version/trans/programId/{programId}/versionId/{versionId}": {
      "get": {
        "description": "Retrieve transactions for a specific program and version",
        "operationId": "getProgramVersionTrans_1",
        "parameters": [
          {
            "description": "The ID of the program to retrieve transactions for",
            "in": "path",
            "name": "programId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "The ID of the version to retrieve transactions for",
            "in": "path",
            "name": "versionId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProgramVersionTrans_ReportView"
                  }
                }
              }
            },
            "description": "Returns transactions for a specific program and version"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "User does not have rights to access this program"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while getting transactions for program"
          }
        },
        "summary": "Get Program Version Transactions",
        "tags": [
          "Program Data"
        ]
      }
    },
    "/api/program/initialize": {
      "post": {
        "description": "Initialize a new supply plan program",
        "operationId": "postProgramInitialize",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProgramInitialize"
              }
            }
          },
          "description": "The program initialize object to add",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to add this program"
          },
          "409": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Program already exists"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while adding program initialize"
          }
        },
        "summary": "Add Supply Plan Program",
        "tags": [
          "Program"
        ]
      }
    },
    "/api/program/planningUnit": {
      "put": {
        "description": "Add and update planning units for a specific program",
        "operationId": "savePlanningUnitForProgram",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProgramPlanningUnit"
                }
              }
            }
          },
          "description": "The list of program planning units to save",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to update this program"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while saving planning unit"
          }
        },
        "summary": "Save Planning Unit for Program",
        "tags": [
          "Program"
        ]
      }
    },
    "/api/program/planningUnit/procurementAgent": {
      "put": {
        "description": "Save procurement agent prices for a specific supply plan program planning unit",
        "operationId": "saveProgramPlanningUnitProcurementAgentPrices",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProgramPlanningUnitProcurementAgentPrice"
                }
              }
            }
          },
          "description": "The list of program planning unit procurement agent prices to save",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to update this program"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while saving program planning unit procurement agent prices"
          }
        },
        "summary": "Save Procurement Agent Prices for Program Planning Unit",
        "tags": [
          "Program"
        ]
      }
    },
    "/api/program/planningUnit/procurementAgent/": {
      "post": {
        "description": "Retrieve a list of procurement agents for a specific supply plan program planning unit",
        "operationId": "getProgramPlanningUnitProcurementAgent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProgramPlanningUnitProcurementAgentInput"
              }
            }
          },
          "description": "The input object containing program planning unit procurement agent data",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProgramPlanningUnitProcurementAgentPrice"
                  }
                }
              }
            },
            "description": "Returns a list of program planning unit procurement agents"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Program not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting program planning unit procurement agent list"
          }
        },
        "summary": "Get Procurement Agents for Program Planning Unit",
        "tags": [
          "Program"
        ]
      }
    },
    "/api/program/productCategoryList": {
      "post": {
        "description": "Retrieve a simple list of programs by product category IDs",
        "operationId": "getProgramListByProductCategoryIdList",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "description": "The list of product category IDs to retrieve programs for",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleCodeObject"
                  }
                }
              }
            },
            "description": "Returns a list of programs by product category IDs"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to access this product category"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting program list by product category IDs"
          }
        },
        "summary": "Get Programs by Product Categories",
        "tags": [
          "Program"
        ]
      }
    },
    "/api/program/realmCountryList": {
      "post": {
        "description": "Retrieve a simple list of supply plan programs by realm country IDs",
        "operationId": "getProgramListByRealmCountryIdList",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "description": "The list of realm country IDs to retrieve programs for",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleCodeObject"
                  }
                }
              }
            },
            "description": "Returns a list of programs by realm country IDs"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to access this realm"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting program list by realm country IDs"
          }
        },
        "summary": "Get Supply Plan Programs for Realm Countries",
        "tags": [
          "Program"
        ]
      }
    },
    "/api/program/realmId/{realmId}": {
      "get": {
        "description": "Retrieve a list of supply plan programs for a specific realm",
        "operationId": "getProgramForRealm",
        "parameters": [
          {
            "description": "The ID of the realm to retrieve programs for",
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Program"
                  }
                }
              }
            },
            "description": "Returns a list of programs for a specific realm"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to access this realm"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Realm not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting program list"
          }
        },
        "summary": "Get Supply Plan Programs for Realm",
        "tags": [
          "Program"
        ]
      }
    },
    "/api/program/{programId}": {
      "get": {
        "description": "Retrieve details for a specific supply plan program",
        "operationId": "getProgram_1",
        "parameters": [
          {
            "description": "The ID of the program to retrieve details for",
            "in": "path",
            "name": "programId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProgramInitialize"
                }
              }
            },
            "description": "Returns details for a specific program"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to access this program"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Program not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting program details"
          }
        },
        "summary": "Get Supply Plan Program Details",
        "tags": [
          "Program"
        ]
      }
    },
    "/api/program/{programId}/planningUnit": {
      "get": {
        "description": "Retrieve a list of planning units for a specific supply plan program",
        "operationId": "getPlanningUnitForProgram",
        "parameters": [
          {
            "description": "The ID of the program to retrieve planning units for",
            "in": "path",
            "name": "programId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProgramPlanningUnit"
                  }
                }
              }
            },
            "description": "Returns a list of planning units for a specific program"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Program not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting planning unit list"
          }
        },
        "summary": "Get Planning Units for Supply Plan Program",
        "tags": [
          "Program"
        ]
      }
    },
    "/api/program/{programId}/planningUnit/all": {
      "get": {
        "description": "Retrieve a list of all planning units for a specific supply plan program",
        "operationId": "getPlanningUnitForProgramAll",
        "parameters": [
          {
            "description": "The ID of the program to retrieve planning units for",
            "in": "path",
            "name": "programId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProgramPlanningUnit"
                  }
                }
              }
            },
            "description": "Returns a list of all planning units for a specific program"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Program not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting planning unit list"
          }
        },
        "summary": "Get Planning Units for Supply Plan Program",
        "tags": [
          "Program"
        ]
      }
    },
    "/api/program/{programId}/tracerCategory/planningUnit": {
      "post": {
        "description": "Retrieve a list of planning units for a specific program and tracer categories",
        "operationId": "getPlanningUnitForProgramTracerCategory",
        "parameters": [
          {
            "description": "The ID of the program to retrieve planning units for",
            "in": "path",
            "name": "programId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProgramPlanningUnit"
                  }
                }
              }
            },
            "description": "Returns a list of planning units for a specific program and tracer categories"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to access this program"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Program not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting planning unit list"
          }
        },
        "summary": "Get Planning Units for Program and Tracer Category",
        "tags": [
          "Program"
        ]
      }
    },
    "/api/program/{programId}/tracerCategory/simple/planningUnit": {
      "post": {
        "description": "Retrieve a list of simple planning units for a specific program and tracer categories",
        "operationId": "getSimplePlanningUnitForProgramTracerCategory",
        "parameters": [
          {
            "description": "The ID of the program to retrieve planning units for",
            "in": "path",
            "name": "programId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimplePlanningUnitObject"
                  }
                }
              }
            },
            "description": "Returns a list of simple planning units for a specific program and tracer categories"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to access this program"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Program not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting planning unit list"
          }
        },
        "summary": "Get Simple Planning Units for Program and Tracer Category",
        "tags": [
          "Program"
        ]
      }
    },
    "/api/program/{programId}/{productCategory}/planningUnit/all": {
      "get": {
        "description": "Retrieve a list of planning units for a specific supply plan program and product category",
        "operationId": "getPlanningUnitForProgramAndProductCategory",
        "parameters": [
          {
            "description": "The ID of the program to retrieve planning units for",
            "in": "path",
            "name": "programId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "The ID of the product category to retrieve planning units for",
            "in": "path",
            "name": "productCategory",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProgramPlanningUnit"
                  }
                }
              }
            },
            "description": "Returns a list of planning units for a specific program and product category"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to access this program"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Program or Product Category not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting planning unit list"
          }
        },
        "summary": "Get Planning Units for Supply Plan Program and Product Category",
        "tags": [
          "Program"
        ]
      }
    },
    "/api/programAndPlanningUnit/programs": {
      "post": {
        "description": "Retrieve a list of programs and planning units given a list of supply plan programs",
        "operationId": "getProgramAndPlanningUnitForProgramList",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "description": "The list of program IDs to retrieve programs and planning units for",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleObjectWithType_DropDownView"
                  }
                }
              }
            },
            "description": "Returns a list of programs and planning units for a list of programs"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDownView"
                }
              }
            },
            "description": "User does not have rights to access these programs"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_DropDownView"
                }
              }
            },
            "description": "Internal error while getting program and planning unit list"
          }
        },
        "summary": "Get Program and Planning Units",
        "tags": [
          "Program"
        ]
      }
    },
    "/api/programData": {
      "post": {
        "description": "Retrieve supply plan data for a list of programs and versions",
        "operationId": "getLoadProgramData",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoadProgramInput_InternalView"
              }
            }
          },
          "description": "The input object containing program data details",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProgramData_InternalView"
                }
              }
            },
            "description": "Returns program data for a list of programs and versions"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_InternalView"
                }
              }
            },
            "description": "User does not have rights to access this program"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_InternalView"
                }
              }
            },
            "description": "Program data not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_InternalView"
                }
              }
            },
            "description": "Internal error while getting program data"
          }
        },
        "summary": "Get Supply Plan Data",
        "tags": [
          "Program Data"
        ]
      }
    },
    "/api/programData/checkNewerVersions": {
      "post": {
        "description": "Check if newer versions are available for a list of program IDs and versions",
        "operationId": "checkNewerVersions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProgramIdAndVersionId"
                }
              }
            }
          },
          "description": "The list of program IDs and versions to check for newer versions",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Returns true if there are newer versions, false otherwise"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to access this program"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while checking for newer versions"
          }
        },
        "summary": "Check for Newer Versions",
        "tags": [
          "Program Data"
        ]
      }
    },
    "/api/programData/getLastModifiedDateForProgram/{programId}/{versionId}": {
      "get": {
        "description": "Retrieve the last modified date for a specific program and version",
        "operationId": "getLastModifiedDateForProgram",
        "parameters": [
          {
            "description": "The ID of the program to retrieve the last modified date for",
            "in": "path",
            "name": "programId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "The ID of the version to retrieve the last modified date for",
            "in": "path",
            "name": "versionId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Returns the last modified date for a specific program and version"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to access this program"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting last modified date for program"
          }
        },
        "summary": "Get Last Modified Date for Program",
        "tags": [
          "Program Data"
        ]
      }
    },
    "/api/programData/getLatestVersionForProgram/{programId}": {
      "get": {
        "description": "Retrieve the latest version for a specific program",
        "operationId": "getLatestVersionForProgram_1",
        "parameters": [
          {
            "description": "The ID of the program to retrieve the latest version for",
            "in": "path",
            "name": "programId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "description": "Returns the latest version for a specific program"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to access this program"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting latest version for program"
          }
        },
        "summary": "Get Latest Version for Program",
        "tags": [
          "Program Data"
        ]
      }
    },
    "/api/programData/getLatestVersionForPrograms": {
      "post": {
        "description": "Retrieve the latest version for a list of programs",
        "operationId": "getLatestVersionForProgram",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "description": "The list of program IDs to retrieve the latest version for",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProgramIdAndVersionId"
                  }
                }
              }
            },
            "description": "Returns the latest version for a list of programs"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to access this program"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting latest version for program"
          }
        },
        "summary": "Get Latest Version for Programs",
        "tags": [
          "Program Data"
        ]
      }
    },
    "/api/programData/programId/{programId}/versionId/{versionId}": {
      "get": {
        "description": "Retrieve supply plan data for a specific program and version",
        "operationId": "getProgramData",
        "parameters": [
          {
            "description": "The ID of the program to retrieve program data for",
            "in": "path",
            "name": "programId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "The ID of the version to retrieve program data for",
            "in": "path",
            "name": "versionId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProgramData_InternalView"
                }
              }
            },
            "description": "Returns program data for a specific program and version"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_InternalView"
                }
              }
            },
            "description": "User does not have rights to access this program"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_InternalView"
                }
              }
            },
            "description": "Internal error while getting program data"
          }
        },
        "summary": "Get Supply Plan Data",
        "tags": [
          "Program Data"
        ]
      }
    },
    "/api/programData/shipmentSync/programId/{programId}/versionId/{versionId}/userId/{userId}/lastSyncDate/{lastSyncDate}": {
      "get": {
        "description": "Retrieve a list of shipments for synchronization, for given programId and versionId which are modified after given date",
        "operationId": "shipmentSync",
        "parameters": [
          {
            "description": "The ID of the program to retrieve shipments for synchronization for",
            "in": "path",
            "name": "programId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "The ID of the version to retrieve shipments for synchronization for",
            "in": "path",
            "name": "versionId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "The ID of the user to retrieve shipments for synchronization for",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "The last synchronization date to retrieve shipments for synchronization for",
            "in": "path",
            "name": "lastSyncDate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShipmentSync"
                }
              }
            },
            "description": "Returns a list of shipments for synchronization"
          },
          "412": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Invalid date format"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting shipment sync list"
          }
        },
        "summary": "Get Shipment List for Sync",
        "tags": [
          "Program Data"
        ]
      }
    },
    "/api/programVersion/programId/{programId}/versionId/{versionId}/realmCountryId/{realmCountryId}/healthAreaId/{healthAreaId}/organisationId/{organisationId}/versionTypeId/{versionTypeId}/versionStatusId/{versionStatusId}/dates/{startDate}/{stopDate}": {
      "get": {
        "description": "Retrieve a list of program versions based on various filters",
        "operationId": "getProgramVersionList",
        "parameters": [
          {
            "description": "The ID of the program to retrieve program versions for",
            "in": "path",
            "name": "programId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "The ID of the version to retrieve program versions for",
            "in": "path",
            "name": "versionId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "The ID of the realm country to retrieve program versions for",
            "in": "path",
            "name": "realmCountryId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "The ID of the health area to retrieve program versions for",
            "in": "path",
            "name": "healthAreaId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "The ID of the organisation to retrieve program versions for",
            "in": "path",
            "name": "organisationId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "The ID of the version type to retrieve program versions for",
            "in": "path",
            "name": "versionTypeId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "The ID of the version status to retrieve program versions for",
            "in": "path",
            "name": "versionStatusId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "The start date to retrieve program versions for",
            "in": "path",
            "name": "startDate",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The stop date to retrieve program versions for",
            "in": "path",
            "name": "stopDate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProgramVersion"
                  }
                }
              }
            },
            "description": "Returns a list of program versions based on various filters"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to access this program"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Program version not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting program version list"
          }
        },
        "summary": "Get Program Version List",
        "tags": [
          "Program Data"
        ]
      }
    },
    "/api/programVersion/programId/{programId}/versionId/{versionId}/versionStatusId/{versionStatusId}": {
      "put": {
        "description": "Update the status of a program version",
        "operationId": "updateProgramVersion",
        "parameters": [
          {
            "description": "The ID of the program to update the version status for",
            "in": "path",
            "name": "programId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "The ID of the version to update the status for",
            "in": "path",
            "name": "versionId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "The ID of the version status to update the status for",
            "in": "path",
            "name": "versionStatusId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProgramVersion"
              }
            }
          },
          "description": "The input object containing program version details",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Version"
                }
              }
            },
            "description": "Updates the status of a program version"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to access this program"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Program version not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while updating program version"
          }
        },
        "summary": "Update Program Version",
        "tags": [
          "Program Data"
        ]
      }
    },
    "/api/programVersion/resetProblem": {
      "put": {
        "description": "Reset the problem reports for a list of program IDs",
        "operationId": "resetProblemForProgramIds",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "description": "The list of program IDs to reset the problem list for",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Resets the problem list for a list of program IDs"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to access this program"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Program not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while resetting program problem list"
          }
        },
        "summary": "Reset Problem Reports for Programs",
        "tags": [
          "Program Data"
        ]
      }
    },
    "/api/qatTemp/consumption/{pipelineId}": {
      "get": {
        "description": "Retrieve a list of consumption data from temp tables",
        "operationId": "getQatTempConsumptionList",
        "parameters": [
          {
            "description": "The ID of the pipeline to retrieve the consumption list from",
            "in": "path",
            "name": "pipelineId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QatTempConsumption"
                  }
                }
              }
            },
            "description": "Returns a list of consumption data"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting pipeline consumption list"
          }
        },
        "summary": "Get QAT Temp Consumption List",
        "tags": [
          "Pipeline"
        ]
      }
    },
    "/api/qatTemp/datasource/{pipelineId}": {
      "get": {
        "description": "Retrieve a list of data source from temp tables",
        "operationId": "getQatTempDataSourceList",
        "parameters": [
          {
            "description": "The ID of the pipeline to retrieve the data source list from",
            "in": "path",
            "name": "pipelineId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QatTempDataSource"
                  }
                }
              }
            },
            "description": "Returns a list of data source"
          },
          "500": {
            "content": {
              "text/json": {

              }
            },
            "description": "Internal error while getting pipeline data source list"
          }
        },
        "summary": "Get QAT Temp Data Source List",
        "tags": [
          "Pipeline"
        ]
      }
    },
    "/api/qatTemp/fundingsource/{pipelineId}": {
      "get": {
        "description": "Retrieve a list of funding source from temp tables",
        "operationId": "getQatTempFundingSourceList",
        "parameters": [
          {
            "description": "The ID of the pipeline to retrieve the funding source list from",
            "in": "path",
            "name": "pipelineId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QatTempFundingSource"
                  }
                }
              }
            },
            "description": "Returns a list of funding source"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting pipeline funding source list"
          }
        },
        "summary": "Get QAT Temp Funding Source List",
        "tags": [
          "Pipeline"
        ]
      }
    },
    "/api/qatTemp/planningUnitList/{pipelineId}": {
      "get": {
        "description": "Retrieve a planning unit list by pipeline ID from temp tables",
        "operationId": "getQatTempPlanningUnitList",
        "parameters": [
          {
            "description": "The ID of the pipeline to retrieve the planning unit list from",
            "in": "path",
            "name": "pipelineId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QatTempProgramPlanningUnit"
                  }
                }
              }
            },
            "description": "Returns a list of planning units"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting pipeline planning unit list"
          }
        },
        "summary": "Get QAT Temp Planning Unit List",
        "tags": [
          "Pipeline"
        ]
      }
    },
    "/api/qatTemp/planningUnitListFinalInventry/{pipelineId}": {
      "get": {
        "description": "Retrieve a list of planning units for inventory count from temp tables",
        "operationId": "getQatTempPlanningUnitListInventoryCount",
        "parameters": [
          {
            "description": "The ID of the pipeline to retrieve the planning unit list from",
            "in": "path",
            "name": "pipelineId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QatTempPlanningUnitInventoryCount"
                  }
                }
              }
            },
            "description": "Returns a list of planning units"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting pipeline planning unit list"
          }
        },
        "summary": "Get QAT Temp Planning Unit List",
        "tags": [
          "Pipeline"
        ]
      }
    },
    "/api/qatTemp/procurementagent/{pipelineId}": {
      "get": {
        "description": "Retrieve a list of procurement agent from temp tables",
        "operationId": "getQatTempProcurementAgentList",
        "parameters": [
          {
            "description": "The ID of the pipeline to retrieve the procurement agent list from",
            "in": "path",
            "name": "pipelineId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QatTempProcurementAgent"
                  }
                }
              }
            },
            "description": "Returns a list of procurement agent"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting pipeline procurement agent list"
          }
        },
        "summary": "Get QAT Temp Procurement Agent List",
        "tags": [
          "Pipeline"
        ]
      }
    },
    "/api/qatTemp/program/{pipelineId}": {
      "get": {
        "description": "Retrieve pipeline program data from QAT temp tables",
        "operationId": "getQatTempProgram",
        "parameters": [
          {
            "description": "The ID of the pipeline to retrieve the program data from",
            "in": "path",
            "name": "pipelineId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/QatTempProgram"
                }
              }
            },
            "description": "Returns a pipeline program data"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to access this pipeline program data"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting pipeline program data"
          }
        },
        "summary": "Get QAT Temp Program",
        "tags": [
          "Pipeline"
        ]
      },
      "post": {
        "description": "Save pipeline program data into QAT temp tables",
        "operationId": "postQatTempProgram",
        "parameters": [
          {
            "description": "The ID of the pipeline to save the program data into",
            "in": "path",
            "name": "pipelineId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QatTempProgram"
              }
            }
          },
          "description": "The program data to save",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to save this program data"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while saving pipeline program data"
          }
        },
        "summary": "Save QAT Temp Program",
        "tags": [
          "Pipeline"
        ]
      }
    },
    "/api/qatTemp/regions/{pipelineId}": {
      "get": {
        "description": "Retrieve a list of program regions from temp tables",
        "operationId": "getQatTempProgramRegion",
        "parameters": [
          {
            "description": "The ID of the pipeline to retrieve the region list from",
            "in": "path",
            "name": "pipelineId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Region"
                  }
                }
              }
            },
            "description": "Returns a list of program regions"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting pipeline program region list"
          }
        },
        "summary": "Get QAT Temp Program Region",
        "tags": [
          "Pipeline"
        ]
      }
    },
    "/api/quantimed/quantimedImport/{programId}": {
      "post": {
        "description": "Import forecast data from Quantimed for a given program.",
        "operationId": "quantimedImport",
        "parameters": [
          {
            "description": "The ID of the program to import forecast data for",
            "in": "path",
            "name": "programId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          },
          "description": "The file to import",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuantimedImportDTO"
                }
              }
            },
            "description": "Returns the QuantimedImportDTO object"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while importing forecast data"
          }
        },
        "summary": "Quantimed Import",
        "tags": [
          "Quantimed Import"
        ]
      }
    },
    "/api/realm": {
      "get": {
        "description": "Retrieve a list of realms",
        "operationId": "getRealm",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Realm"
                  }
                }
              }
            },
            "description": "Returns the list of realms"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to list realms"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting realm list"
          }
        },
        "summary": "Get Realms",
        "tags": [
          "Realm"
        ]
      },
      "post": {
        "description": "Add a new realm to the system",
        "operationId": "postRealm",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Realm"
              }
            }
          },
          "description": "The realm to add",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Realm already exists"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while saving realm"
          }
        },
        "summary": "Add a Realm",
        "tags": [
          "Realm"
        ]
      },
      "put": {
        "description": "Update an existing realm in the system",
        "operationId": "putRealm",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Realm"
              }
            }
          },
          "description": "The realm to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to update a realm"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Realm already exists"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while updating realm"
          }
        },
        "summary": "Update a Realm",
        "tags": [
          "Realm"
        ]
      }
    },
    "/api/realm/{realmId}": {
      "get": {
        "description": "Retrieve a realm by its ID",
        "operationId": "getRealm_1",
        "parameters": [
          {
            "description": "The ID of the realm to retrieve",
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Realm"
                }
              }
            },
            "description": "Returns the realm"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to get a realm"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Realm not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting realm"
          }
        },
        "summary": "Get a Realm",
        "tags": [
          "Realm"
        ]
      }
    },
    "/api/realmCountry": {
      "get": {
        "description": "Retrieve a list of realm countries",
        "operationId": "getRealmCountry",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RealmCountry"
                  }
                }
              }
            },
            "description": "Returns the list of realm countries"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to list realm countries"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while listing realm countries"
          }
        },
        "summary": "Get Realm Countries",
        "tags": [
          "Realm Country"
        ]
      },
      "post": {
        "description": "Add a list of realm countries",
        "operationId": "postRealmCountry",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RealmCountry"
                }
              }
            }
          },
          "description": "The list of realm countries to add",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to add realm countries"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while adding realm countries"
          }
        },
        "summary": "Add Realm Country",
        "tags": [
          "Realm Country"
        ]
      },
      "put": {
        "description": "Update a list of realm countries",
        "operationId": "putRealmCountry",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RealmCountry"
                }
              }
            }
          },
          "description": "The list of realm countries to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to update realm countries"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while updating realm countries"
          }
        },
        "summary": "Update Realm Country",
        "tags": [
          "Realm Country"
        ]
      }
    },
    "/api/realmCountry/planningUnit": {
      "put": {
        "description": "Save a list of planning units (administrative reporting units) for a given realm country",
        "operationId": "savePlanningUnitForCountry",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RealmCountryPlanningUnit"
                }
              }
            }
          },
          "description": "The list of planning units to save",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success response code"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to save planning units for a country"
          },
          "412": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Unable to save planning units for a country"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while saving planning units for a country"
          }
        },
        "summary": "Save Planning Unit for Country",
        "tags": [
          "Realm Country"
        ]
      }
    },
    "/api/realmCountry/program": {
      "get": {
        "description": "Retrieve a list of realm countries for active programs",
        "operationId": "getRealmCountryForActivePrograms",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RealmCountryHealthArea"
                  }
                }
              }
            },
            "description": "Returns the list of realm countries"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to list realm countries for active programs"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Realm country not found"
          },
          "412": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "A User with access to multiple Realms tried to access a RealmCountry Program list without specifying a Realm"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting realm countries for active programs"
          }
        },
        "summary": "Get Realm Countries for Active Programs",
        "tags": [
          "Realm Country"
        ]
      }
    },
    "/api/realmCountry/program/realmId/{realmId}": {
      "get": {
        "description": "Retrieve a list of realm countries for active programs by their realm ID",
        "operationId": "getRealmCountryByRealmIdForActivePrograms",
        "parameters": [
          {
            "description": "The ID of the realm to retrieve realm countries for active programs for",
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RealmCountryHealthArea"
                  }
                }
              }
            },
            "description": "Returns the list of realm countries"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to list realm countries for active programs by realm ID"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Realm country not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting realm countries for active programs by realm ID"
          }
        },
        "summary": "Get Realm Countries for Active Programs by Realm ID",
        "tags": [
          "Realm Country"
        ]
      }
    },
    "/api/realmCountry/programIds/planningUnit": {
      "post": {
        "description": "Retrieve a list of planning units (administrative reporting units) for a given list of program IDs",
        "operationId": "getPlanningUnitForProgramList",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "description": "The list of program IDs to retrieve planning units for",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RealmCountryPlanningUnit"
                  }
                }
              }
            },
            "description": "Returns the list of planning units"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to list planning units for a program list"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Planning unit not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting planning units for a program list"
          }
        },
        "summary": "Get Planning Units for Program List",
        "tags": [
          "Realm Country"
        ]
      }
    },
    "/api/realmCountry/realmId/{realmId}": {
      "get": {
        "description": "Retrieve a list of realm countries by their realm ID",
        "operationId": "getRealmCountryByRealmId",
        "parameters": [
          {
            "description": "The ID of the realm to retrieve realm countries for",
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RealmCountry"
                  }
                }
              }
            },
            "description": "Returns the list of realm countries"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to list realm countries by realm ID"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Realm country not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting a realm country by realm ID"
          }
        },
        "summary": "Get Realm Country by Realm",
        "tags": [
          "Realm Country"
        ]
      }
    },
    "/api/realmCountry/{realmCountryId}": {
      "get": {
        "description": "Retrieve a realm country by its ID",
        "operationId": "getRealmCountry_1",
        "parameters": [
          {
            "description": "The ID of the realm country to retrieve",
            "in": "path",
            "name": "realmCountryId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RealmCountry"
                }
              }
            },
            "description": "Returns the realm country"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to get a realm country"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Realm country not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting a realm country"
          }
        },
        "summary": "Get Realm Country",
        "tags": [
          "Realm Country"
        ]
      }
    },
    "/api/realmCountry/{realmCountryId}/planningUnit": {
      "get": {
        "description": "Retrieve a list of planning units (administrative reporting units) for a given realm country",
        "operationId": "getPlanningUnitForCountry",
        "parameters": [
          {
            "description": "The ID of the realm country to retrieve planning units for",
            "in": "path",
            "name": "realmCountryId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RealmCountryPlanningUnit"
                  }
                }
              }
            },
            "description": "Returns the list of planning units"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to list planning units for a country"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Planning unit not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting planning units for a country"
          }
        },
        "summary": "Get Planning Units for Country",
        "tags": [
          "Realm Country"
        ]
      }
    },
    "/api/realmCountry/{realmCountryId}/planningUnit/all": {
      "get": {
        "description": "Retrieve a list of all planning units (administrative reporting units) for a given realm country",
        "operationId": "getPlanningUnitForCountryAll",
        "parameters": [
          {
            "description": "The ID of the realm country to retrieve all planning units for",
            "in": "path",
            "name": "realmCountryId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RealmCountryPlanningUnit"
                  }
                }
              }
            },
            "description": "Returns the list of all planning units"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to list all planning units for a country"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Planning unit not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting all planning units for a country"
          }
        },
        "summary": "Get all Planning Units for Country",
        "tags": [
          "Realm Country"
        ]
      }
    },
    "/api/rebuildSupplyPlans": {
      "post": {
        "description": "Rebuild the supply plan for a list of program IDs and version IDs",
        "operationId": "rebuildSupplyPlans",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProgramIdAndVersionId"
              }
            }
          },
          "description": "A list of program IDs and version IDs to rebuild supply plans for",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Returns the supply plan build log"
          }
        },
        "summary": "Rebuild Supply Plan",
        "tags": [
          "Supply plan"
        ]
      }
    },
    "/api/region": {
      "get": {
        "description": "Retrieve a list of regions",
        "operationId": "getRegion",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Region"
                  }
                }
              }
            },
            "description": "Returns the list of regions"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to list regions"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting region list"
          }
        },
        "summary": "Get Regions",
        "tags": [
          "Region"
        ]
      },
      "put": {
        "description": "Add or update multiple regions in the system",
        "operationId": "putRegion",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Region"
                }
              }
            }
          },
          "description": "The regions to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to update regions"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Region already exists"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while updating regions"
          }
        },
        "summary": "Update Regions",
        "tags": [
          "Region"
        ]
      }
    },
    "/api/region/realmCountryId/{realmCountryId}": {
      "get": {
        "description": "Retrieve a list of regions by their realm country ID",
        "operationId": "getRegionByRealmCountry",
        "parameters": [
          {
            "description": "The ID of the realm country to retrieve regions for",
            "in": "path",
            "name": "realmCountryId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Region"
                  }
                }
              }
            },
            "description": "Returns the list of regions"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to list regions"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Region not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting region list"
          }
        },
        "summary": "Get Regions by Realm Country",
        "tags": [
          "Region"
        ]
      }
    },
    "/api/region/{regionId}": {
      "get": {
        "description": "Retrieve a region by its ID",
        "operationId": "getRegion_1",
        "parameters": [
          {
            "description": "The ID of the region to retrieve",
            "in": "path",
            "name": "regionId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Region"
                }
              }
            },
            "description": "Returns the region"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have rights to get a region"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Region not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting region"
          }
        },
        "summary": "Get a Region",
        "tags": [
          "Region"
        ]
      }
    },
    "/api/report/aggregateShipmentByProduct": {
      "post": {
        "description": "Retrieve the aggregate shipment by product report",
        "operationId": "getAggregateShipmentByProduct",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShipmentReportInput_ReportView"
              }
            }
          },
          "description": "The aggregate shipment by product input",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShipmentReportOutput_ReportView"
                  }
                }
              }
            },
            "description": "Returns the aggregate shipment by product report"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while generating the report"
          }
        },
        "summary": "Get Aggregate Shipment By Product Report",
        "tags": [
          "Reports"
        ]
      }
    },
    "/api/report/annualShipmentCost": {
      "post": {
        "description": "Retrieve the annual shipment cost report",
        "operationId": "getAnnualShipmentCost",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnnualShipmentCostInput_ReportView"
              }
            }
          },
          "description": "The annual shipment cost input",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnnualShipmentCostOutput_ReportView"
                  }
                }
              }
            },
            "description": "Returns the annual shipment cost report"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while generating the report"
          }
        },
        "summary": "Get Annual Shipment Cost Report",
        "tags": [
          "Reports"
        ]
      }
    },
    "/api/report/budgetReport": {
      "post": {
        "description": "Retrieve the budget report",
        "operationId": "getBudgetReport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BudgetReportInput_ReportView"
              }
            }
          },
          "description": "The budget report input",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BudgetReportOutput_ReportView"
                  }
                }
              }
            },
            "description": "Returns the budget report"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while generating the report"
          }
        },
        "summary": "Get Budget Report",
        "tags": [
          "Reports"
        ]
      }
    },
    "/api/report/consumptionForecastVsActual": {
      "post": {
        "description": "Retrieve a list of consumption forecast vs actual",
        "operationId": "getConsumptionForecastVsActual",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConsumptionForecastVsActualInput_ReportView"
              }
            }
          },
          "description": "The consumption forecast vs actual input",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConsumptionForecastVsActualOutput_ReportView"
                  }
                }
              }
            },
            "description": "Returns the list of consumption forecast vs actual"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while generating the report"
          }
        },
        "summary": "Get Consumption Forecast vs Actual",
        "tags": [
          "Reports"
        ]
      }
    },
    "/api/report/costOfInventory": {
      "post": {
        "description": "Retrieve the cost of inventory report",
        "operationId": "getCostOfInventory",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CostOfInventoryInput_ReportView"
              }
            }
          },
          "description": "The cost of inventory input",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CostOfInventoryOutput_ReportView"
                  }
                }
              }
            },
            "description": "Returns the list of cost of inventory report"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while generating the report"
          }
        },
        "summary": "Get Cost Of Inventory Report",
        "tags": [
          "Reports"
        ]
      }
    },
    "/api/report/expiredStock": {
      "post": {
        "description": "Retrieve the expired stock report",
        "operationId": "getExpiredStock",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpiredStockInput_ReportView"
              }
            }
          },
          "description": "The expired stock input",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExpiredStockOutput_ReportView"
                  }
                }
              }
            },
            "description": "Returns the expired stock report"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while generating the report"
          }
        },
        "summary": "Get Expired Stock Report",
        "tags": [
          "Reports"
        ]
      }
    },
    "/api/report/forecastErrorNew": {
      "post": {
        "description": "Retrieve the forecast error report",
        "operationId": "getForecastError",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForecastErrorInputNew_ReportView"
              }
            }
          },
          "description": "The forecast error input",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ForecastErrorOutput_ReportView"
                  }
                }
              }
            },
            "description": "Returns the forecast error report"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while generating the report"
          }
        },
        "summary": "Get Forecast Error Report",
        "tags": [
          "Reports"
        ]
      }
    },
    "/api/report/forecastMetricsComparision": {
      "post": {
        "description": "Retrieve the forecast metrics comparision report",
        "operationId": "getForecastMetricsComparision",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForecastMetricsComparisionInput_ReportView"
              }
            }
          },
          "description": "The forecast metrics comparision input",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ForecastMetricsComparisionOutput_ReportView"
                  }
                }
              }
            },
            "description": "Returns the forecast metrics comparision"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while generating the report"
          }
        },
        "summary": "Get Forecast Metrics Comparision",
        "tags": [
          "Reports"
        ]
      }
    },
    "/api/report/forecastMetricsMonthly": {
      "post": {
        "description": "Retrieve the forecast metrics monthly report",
        "operationId": "getForecastMetricsMonthly",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForecastMetricsMonthlyInput_ReportView"
              }
            }
          },
          "description": "The forecast metrics monthly input",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ForecastMetricsMonthlyOutput_ReportView"
                  }
                }
              }
            },
            "description": "Returns the list of forecast metrics monthly"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while generating the report"
          }
        },
        "summary": "Get Forecast Metrics Monthly",
        "tags": [
          "Reports"
        ]
      }
    },
    "/api/report/forecastSummary": {
      "post": {
        "description": "Retrieve the forecast summary report",
        "operationId": "getForecastSummary",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForecastSummaryInput_ReportView"
              }
            }
          },
          "description": "The forecast summary input",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ForecastSummaryOutput_ReportView"
                  }
                }
              }
            },
            "description": "Returns the forecast summary report"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while generating the report"
          }
        },
        "summary": "Get Forecast Summary Report",
        "tags": [
          "Reports"
        ]
      }
    },
    "/api/report/fundingSourceShipmentReport": {
      "post": {
        "description": "Retrieve funding source shipment report",
        "operationId": "getFundingSourceShipmentReport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FundingSourceShipmentReportInput_ReportView"
              }
            }
          },
          "description": "The funding source shipment input",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FundingSourceShipmentReportOutput_ReportView"
                  }
                }
              }
            },
            "description": "Returns the list of funding source shipment report"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while generating the report"
          }
        },
        "summary": "Get Funding Source Shipment Report",
        "tags": [
          "Reports"
        ]
      }
    },
    "/api/report/globalConsumption": {
      "post": {
        "description": "Retrieve the global consumption report",
        "operationId": "getGlobalConsumption",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GlobalConsumptionInput_ReportView"
              }
            }
          },
          "description": "The global consumption input",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GlobalConsumptionOutput_ReportView"
                  }
                }
              }
            },
            "description": "Returns the global consumption"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while generating the report"
          }
        },
        "summary": "Get Global Consumption",
        "tags": [
          "Reports"
        ]
      }
    },
    "/api/report/inventoryTurns": {
      "post": {
        "description": "Retrieve the inventory turns report",
        "operationId": "getInventoryTurns",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InventoryTurnsInput_ReportView"
              }
            }
          },
          "description": "The inventory turns input",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InventoryTurnsOutput_ReportView"
                  }
                }
              }
            },
            "description": "Returns the inventory turns report"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while generating the report"
          }
        },
        "summary": "Get Inventory Turns Report",
        "tags": [
          "Reports"
        ]
      }
    },
    "/api/report/manualJson": {
      "post": {
        "description": "API used to get the report for Manual Json push",
        "operationId": "getManualJsonReport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManualJsonPushReportInput_ReportView"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ManualIntegration_ReportView"
                  }
                }
              }
            },
            "description": "Returns the report"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error that prevented the retreival of Integration Program"
          }
        },
        "summary": "API used to get the report for Manual Json push",
        "tags": [
          "Reports"
        ]
      }
    },
    "/api/report/monthlyForecast": {
      "post": {
        "description": "Retrieve the monthly forecast report",
        "operationId": "getMonthlyForecast",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MonthlyForecastInput_ReportView"
              }
            }
          },
          "description": "The monthly forecast input",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MonthlyForecastOutput_ReportView"
                  }
                }
              }
            },
            "description": "Returns the monthly forecast report"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while generating the report"
          }
        },
        "summary": "Get Monthly Forecast Report",
        "tags": [
          "Reports"
        ]
      }
    },
    "/api/report/procurementAgentShipmentReport": {
      "post": {
        "description": "Retrieve procurement agent shipment report",
        "operationId": "getProcurementAgentShipmentReport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcurementAgentShipmentReportInput_ReportView"
              }
            }
          },
          "description": "The procurement agent shipment input",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProcurementAgentShipmentReportOutput_ReportView"
                  }
                }
              }
            },
            "description": "Returns the procurement agent shipment report"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while generating the report"
          }
        },
        "summary": "Get Procurement Agent Shipment Report",
        "tags": [
          "Reports"
        ]
      }
    },
    "/api/report/programLeadTimes": {
      "post": {
        "description": "Retrieve the program lead times report",
        "operationId": "getProgramLeadTimes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProgramLeadTimesInput_ReportView"
              }
            }
          },
          "description": "The program lead times input",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProgramLeadTimesOutput_ReportView"
                  }
                }
              }
            },
            "description": "Returns the program lead times report"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while generating the report"
          }
        },
        "summary": "Get Program Lead Times Report",
        "tags": [
          "Reports"
        ]
      }
    },
    "/api/report/programProductCatalog": {
      "post": {
        "description": "Retrieve a list of program product catalog",
        "operationId": "getProgramProductCatalog",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProgramProductCatalogInput_ReportView"
              }
            }
          },
          "description": "The program product catalog input",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProgramProductCatalogOutput_ReportView"
                  }
                }
              }
            },
            "description": "Returns the list of program product catalog"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while generating the report"
          }
        },
        "summary": "Get Program Product Catalog",
        "tags": [
          "Reports"
        ]
      }
    },
    "/api/report/shipmentDetails": {
      "post": {
        "description": "Retrieve the shipment details report",
        "operationId": "getShipmentDetails",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShipmentDetailsInput_ReportView"
              }
            }
          },
          "description": "The shipment details input",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShipmentDetailsOutput_ReportView"
                  }
                }
              }
            },
            "description": "Returns the shipment details report"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while generating the report"
          }
        },
        "summary": "Get Shipment Details Report",
        "tags": [
          "Reports"
        ]
      }
    },
    "/api/report/shipmentGlobalDemand": {
      "post": {
        "description": "Retrieve the shipment global demand report",
        "operationId": "getShipmentGlobalDemand",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShipmentGlobalDemandInput_ReportView"
              }
            }
          },
          "description": "The shipment global demand input",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShipmentGlobalDemandOutput_ReportView"
                  }
                }
              }
            },
            "description": "Returns the shipment global demand report"
          },
          "500": {
            "content": {
              "text/json": {

              }
            },
            "description": "Internal error while generating the report"
          }
        },
        "summary": "Get Shipment Global Demand Report",
        "tags": [
          "Reports"
        ]
      }
    },
    "/api/report/shipmentOverview": {
      "post": {
        "description": "Retrieve the shipment overview report",
        "operationId": "getShipmentOverview",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShipmentOverviewInput_ReportView"
              }
            }
          },
          "description": "The shipment overview input",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShipmentOverviewOutput_ReportView"
                  }
                }
              }
            },
            "description": "Returns the shipment overview report"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while generating the report"
          }
        },
        "summary": "Get Shipment Overview Report",
        "tags": [
          "Reports"
        ]
      }
    },
    "/api/report/stockAdjustmentReport": {
      "post": {
        "description": "Retrieve the stock adjustment report",
        "operationId": "getStockAdjustmentReport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StockAdjustmentReportInput_ReportView"
              }
            }
          },
          "description": "The stock adjustment input",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StockAdjustmentReportOutput_ReportView"
                  }
                }
              }
            },
            "description": "Returns the stock adjustment report"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while generating the report"
          }
        },
        "summary": "Get Stock Adjustment Report",
        "tags": [
          "Reports"
        ]
      }
    },
    "/api/report/stockStatusAcrossProducts": {
      "post": {
        "description": "Retrieve the stock status across products report",
        "operationId": "getStockStatusAcrossProducts",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StockStatusAcrossProductsInput_ReportView"
              }
            }
          },
          "description": "The stock status across products input",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StockStatusAcrossProductsOutput_ReportView"
                  }
                }
              }
            },
            "description": "Returns the stock status across products report"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while generating the report"
          }
        },
        "summary": "Get Stock Status Across Products Report",
        "tags": [
          "Reports"
        ]
      }
    },
    "/api/report/stockStatusForProgram": {
      "post": {
        "description": "Retrieve the stock status for program report",
        "operationId": "getStockStatusForProgram",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StockStatusForProgramInput_ReportView"
              }
            }
          },
          "description": "The stock status for program input",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StockStatusForProgramOutput_ReportView"
                  }
                }
              }
            },
            "description": "Returns the stock status for program report"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while generating the report"
          }
        },
        "summary": "Get Stock Status For Program Report",
        "tags": [
          "Reports"
        ]
      }
    },
    "/api/report/stockStatusMatrix": {
      "post": {
        "description": "Retrieve the stock status matrix report",
        "operationId": "getStockStatusMatrix",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StockStatusMatrixInput_ReportView"
              }
            }
          },
          "description": "The stock status matrix input",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StockStatusMatrixOutput_ReportView"
                  }
                }
              }
            },
            "description": "Returns the stock status matrix report"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while generating the report"
          }
        },
        "summary": "Get Stock Status Matrix Report",
        "tags": [
          "Reports"
        ]
      }
    },
    "/api/report/stockStatusOverTime": {
      "post": {
        "description": "Retrieve a stock status over time report",
        "operationId": "getStockStatusOverTime",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StockStatusOverTimeInput_ReportView"
              }
            }
          },
          "description": "The stock status over time input",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StockStatusOverTimeOutput_ReportView"
                  }
                }
              }
            },
            "description": "Returns the stock status over time report"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while generating the report"
          }
        },
        "summary": "Get Stock Status Over Time Report",
        "tags": [
          "Reports"
        ]
      }
    },
    "/api/report/stockStatusVertical": {
      "post": {
        "description": "Retrieve the stock status vertical report",
        "operationId": "getStockStatusVertical",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StockStatusVerticalInput_ReportView"
              }
            }
          },
          "description": "The stock status vertical input",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StockStatusVerticalOutput_ReportView"
                  }
                }
              }
            },
            "description": "Returns the stock status vertical report"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while generating the report"
          }
        },
        "summary": "Get Stock Status Vertical Report",
        "tags": [
          "Reports"
        ]
      }
    },
    "/api/report/stockStatusVertical/dropdowns": {
      "post": {
        "description": "Retrieve a list of dropdowns for stock status vertical report",
        "operationId": "getDropdownsForStockStatusVertical",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StockStatusVerticalDropdownInput_ReportView"
              }
            }
          },
          "description": "The stock status vertical dropdown input",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DropdownsForStockStatusVerticalOutput_ReportView"
                  }
                }
              }
            },
            "description": "Returns the list of dropdowns for stock status vertical report"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while generating the report"
          }
        },
        "summary": "Get Dropdowns for Stock Status Vertical Report",
        "tags": [
          "Reports"
        ]
      }
    },
    "/api/report/updateProgramInfo/programTypeId/{programTypeId}/realmCountryId/{realmCountryId}/active/{active}": {
      "get": {
        "description": "API used to get the list of Programs that feeds the UpdateProgramInfo page",
        "operationId": "getUpdateProgramInfoList",
        "parameters": [
          {
            "in": "path",
            "name": "programTypeId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "realmCountryId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "active",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UpdateProgramInfoOutput_ReportView"
                  }
                }
              }
            },
            "description": "Returns the report"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error that prevented the retreival of Program list"
          }
        },
        "summary": "API used to get the list of Programs that feeds the UpdateProgramInfo page",
        "tags": [
          "Reports"
        ]
      }
    },
    "/api/report/warehouseByCountry": {
      "post": {
        "description": "Retrieve the warehouse by country report",
        "operationId": "getWarehouseByCountry",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WarehouseByCountryInput_ReportView"
              }
            }
          },
          "description": "The warehouse by country input",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WarehouseByCountryOutput_ReportView"
                  }
                }
              }
            },
            "description": "Returns the warehouse by country report"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "User does not have rights to access the report"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Report not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while generating the report"
          }
        },
        "summary": "Get Warehouse By Country Report",
        "tags": [
          "Reports"
        ]
      }
    },
    "/api/report/warehouseCapacityReport": {
      "post": {
        "description": "Retrieve the warehouse capacity report",
        "operationId": "getWarehouseCapacityReport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WarehouseCapacityInput_ReportView"
              }
            }
          },
          "description": "The warehouse capacity input",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WarehouseCapacityOutput_ReportView"
                  }
                }
              }
            },
            "description": "Returns the list of warehouse capacity report"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while generating the report"
          }
        },
        "summary": "Get Warehouse Capacity Report",
        "tags": [
          "Reports"
        ]
      }
    },
    "/api/role": {
      "get": {
        "description": "Get role list",
        "operationId": "getRoleList",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role_ReportView"
                  }
                }
              }
            },
            "description": "Returns the role list"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while getting the role list"
          }
        },
        "summary": "Get Roles",
        "tags": [
          "User"
        ]
      },
      "post": {
        "description": "Add new role",
        "operationId": "addNewRole",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code if the operation was successful"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Role already exists"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while adding the role"
          }
        },
        "summary": "Add Role",
        "tags": [
          "User"
        ]
      },
      "put": {
        "description": "Update role",
        "operationId": "editRole",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            }
          },
          "description": "The role to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code if the operation was successful"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Role already exists"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while updating the role"
          }
        },
        "summary": "Update Role",
        "tags": [
          "User"
        ]
      }
    },
    "/api/role/{roleId}": {
      "get": {
        "description": "Get role by ID",
        "operationId": "getRoleById",
        "parameters": [
          {
            "in": "path",
            "name": "roleId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role_ReportView"
                }
              }
            },
            "description": "Returns the role"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_ReportView"
                }
              }
            },
            "description": "Internal error while getting the role"
          }
        },
        "summary": "Get Role",
        "tags": [
          "User"
        ]
      }
    },
    "/api/saveDatabaseLabels": {
      "put": {
        "description": "Update the database labels.",
        "operationId": "putDatabaseLabels",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "The list of database labels to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code if the operation was successful"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the update of Database Label list"
          }
        },
        "summary": "Save Database Labels",
        "tags": [
          "Label"
        ]
      }
    },
    "/api/saveStaticLabels": {
      "put": {
        "description": "Update the static labels.",
        "operationId": "putStaticLabels",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "The list of static labels to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code if the operation was successful"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the update of Static Label list"
          }
        },
        "summary": "Save Static Labels",
        "tags": [
          "Label"
        ]
      }
    },
    "/api/supplier": {
      "get": {
        "description": "Retrieve a list of all suppliers",
        "operationId": "getSupplier",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Supplier"
                  }
                }
              }
            },
            "description": "Returns the list of suppliers"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while retrieving the supplier list"
          }
        },
        "summary": "Get all Suppliers",
        "tags": [
          "Supplier"
        ]
      },
      "post": {
        "description": "Add a new supplier to the system",
        "operationId": "postSupplier",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Supplier"
              }
            }
          },
          "description": "The supplier to add",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Access denied"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while adding the supplier"
          }
        },
        "summary": "Add Supplier",
        "tags": [
          "Supplier"
        ]
      },
      "put": {
        "description": "Update an existing supplier in the system",
        "operationId": "putSupplier",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Supplier"
              }
            }
          },
          "description": "The supplier to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Access denied"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while updating the supplier"
          }
        },
        "summary": "Update Supplier",
        "tags": [
          "Supplier"
        ]
      }
    },
    "/api/supplier/realmId/{realmId}": {
      "get": {
        "description": "Retrieve a list of suppliers for a specific realm",
        "operationId": "getSupplierForRealm",
        "parameters": [
          {
            "description": "The ID of the realm to retrieve suppliers for",
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Supplier"
                  }
                }
              }
            },
            "description": "Returns the list of suppliers for the specified realm"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have access to this realm"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "No suppliers found for the specified realm"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while retrieving the supplier list"
          }
        },
        "summary": "Get Suppliers for Realm",
        "tags": [
          "Supplier"
        ]
      }
    },
    "/api/supplier/{supplierId}": {
      "get": {
        "description": "Retrieve a supplier by their ID",
        "operationId": "getSupplier_1",
        "parameters": [
          {
            "description": "The ID of the supplier to retrieve",
            "in": "path",
            "name": "supplierId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Supplier"
                }
              }
            },
            "description": "Returns the supplier with the specified ID"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have access to this supplier"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Supplier not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while retrieving the supplier"
          }
        },
        "summary": "Get Supplier",
        "tags": [
          "Supplier"
        ]
      }
    },
    "/api/sync/allMasters/forPrograms/{lastSyncDate}": {
      "post": {
        "description": "Get all the data that needs to be synced with the offline machine",
        "operationId": "allMastersForSyncWithProgramIds",
        "parameters": [
          {
            "description": "The last synchronization date",
            "in": "path",
            "name": "lastSyncDate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "description": "The program IDs to get masters for",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MastersSync"
                }
              }
            },
            "description": "Returns the master data"
          },
          "412": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Invalid lastSyncDate"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while retrieving the master data"
          }
        },
        "summary": "Get all Master Data",
        "tags": [
          "Sync"
        ]
      }
    },
    "/api/sync/language/{lastSyncDate}": {
      "get": {
        "description": "Get language list for synchronization",
        "operationId": "getLanguageListForSync",
        "parameters": [
          {
            "description": "The last synchronization date",
            "in": "path",
            "name": "lastSyncDate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Language"
                  }
                }
              }
            },
            "description": "Returns the language list"
          },
          "412": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Invalid lastSyncDate"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while retrieving the language list"
          }
        },
        "summary": "Get Languages",
        "tags": [
          "Sync"
        ]
      }
    },
    "/api/sync/treeAnchor": {
      "post": {
        "description": "Get the list of tree anchor nodes for a specified dataset and list of trees for synchronization",
        "operationId": "getSyncListForTreeAnchor",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TreeAnchorInput"
              }
            }
          },
          "description": "The tree anchor input",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TreeAnchorOutput"
                  }
                }
              }
            },
            "description": "Returns the tree anchor list"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while retrieving the tree anchor list"
          }
        },
        "summary": "Get Tree Anchors",
        "tags": [
          "Sync"
        ]
      }
    },
    "/api/test/aclTest": {
      "post": {
        "description": "Check access to programs",
        "operationId": "postCheckAccessToProgram",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "description": "The program IDs to check access for",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Returns the access check results"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Access denied"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while checking access"
          }
        },
        "summary": "Check access to programs",
        "tags": [
          "Test"
        ]
      }
    },
    "/api/test/aclTestQuery": {
      "post": {
        "description": "Check access to programs via query",
        "operationId": "postCheckAccessViaQuery",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "description": "The program IDs to check access for",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Returns the access check results"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Access denied"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while checking access"
          }
        },
        "summary": "Check access to programs via query",
        "tags": [
          "Test"
        ]
      }
    },
    "/api/test/buildSecurity": {
      "get": {
        "description": "Build security",
        "operationId": "buildSecurity",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Returns the build security result"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while building security"
          }
        },
        "summary": "Build security",
        "tags": [
          "Test"
        ]
      }
    },
    "/api/test/canEdit/{userId}": {
      "get": {
        "description": "Check if a user can edit another user",
        "operationId": "canEdit",
        "parameters": [
          {
            "description": "The ID of the user to check if the current user can edit",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Returns the edit check result"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while checking the edit"
          }
        },
        "summary": "Check user edit permissions",
        "tags": [
          "Test"
        ]
      }
    },
    "/api/test/retrieveData": {
      "get": {
        "description": "Retrieve data",
        "operationId": "retrieveData",
        "parameters": [
          {
            "description": "The variable to retrieve data for",
            "in": "query",
            "name": "var",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {

              }
            },
            "description": "Returns the data retrieved"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while retrieving the data"
          }
        },
        "summary": "Retrieve data",
        "tags": [
          "Test"
        ]
      }
    },
    "/api/test/sendTestEmail/{emailerId}": {
      "get": {
        "description": "Send a test email",
        "operationId": "sendTestEmail",
        "parameters": [
          {
            "description": "The ID of the emailer to send the test email for",
            "in": "path",
            "name": "emailerId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {

              }
            },
            "description": "Returns success code"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while sending the email"
          }
        },
        "summary": "Send a test email",
        "tags": [
          "Test"
        ]
      }
    },
    "/api/ticket/addIssue": {
      "post": {
        "description": "Create a new Jira Service Desk ticket.",
        "operationId": "addIssue",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "The JSON data for the new issue",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {

              }
            },
            "description": "Returns a success code"
          },
          "500": {
            "content": {
              "text/json": {

              }
            },
            "description": "Internal error while creating issue"
          }
        },
        "summary": "Add Issue",
        "tags": [
          "Jira Service Desk"
        ]
      }
    },
    "/api/ticket/addIssueAttachment/{issueId}": {
      "post": {
        "description": "Add a file attachment to an existing Jira Service Desk ticket.",
        "operationId": "addIssueAttachment",
        "parameters": [
          {
            "description": "The ID of the issue to attach the file to",
            "in": "path",
            "name": "issueId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The file to upload",
            "in": "query",
            "name": "file"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "The file to upload"
                  }
                },
                "required": [
                  "file"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {

              }
            },
            "description": "Returns a success code"
          },
          "500": {
            "content": {
              "text/json": {

              }
            },
            "description": "Internal error while adding issue attachment"
          }
        },
        "summary": "Add Issue Attachment",
        "tags": [
          "Jira Service Desk"
        ]
      }
    },
    "/api/ticket/openIssues": {
      "get": {
        "description": "Retrieve a summary of open Jira Service Desk tickets for the current user.",
        "operationId": "getOpenIssue",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JiraServiceDeskIssuesDTO"
                  }
                }
              }
            },
            "description": "Returns the list of open issues"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting open issues"
          }
        },
        "summary": "Get Open Issues",
        "tags": [
          "Jira Service Desk"
        ]
      }
    },
    "/api/tracerCategory": {
      "get": {
        "description": "Get all tracer categories",
        "operationId": "getTracerCategory",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TracerCategory"
                  }
                }
              }
            },
            "description": "Returns the list of tracer categories"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting the tracer category list"
          }
        },
        "summary": "Get Tracer Categories",
        "tags": [
          "Tracer category"
        ]
      },
      "post": {
        "description": "Add a new tracer category",
        "operationId": "postTracerCategory",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TracerCategory"
              }
            }
          },
          "description": "The tracer category to add",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Access denied"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while adding the tracer category"
          }
        },
        "summary": "Add Tracer Category",
        "tags": [
          "Tracer category"
        ]
      },
      "put": {
        "description": "Update an existing tracer category",
        "operationId": "putTracerCategory",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TracerCategory"
              }
            }
          },
          "description": "The tracer category to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Access denied"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while updating the tracer category"
          }
        },
        "summary": "Update Tracer Category",
        "tags": [
          "Tracer category"
        ]
      }
    },
    "/api/tracerCategory/realmId/{realmId}": {
      "get": {
        "description": "Get tracer categories for a specific realm",
        "operationId": "getTracerCategoryForRealm",
        "parameters": [
          {
            "description": "The ID of the realm to get tracer categories for",
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TracerCategory"
                  }
                }
              }
            },
            "description": "Returns the list of tracer categories for the specified realm"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have access to the realm"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Tracer categories not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting the tracer category list"
          }
        },
        "summary": "Get tracer categories",
        "tags": [
          "Tracer category"
        ]
      }
    },
    "/api/tracerCategory/realmId/{realmId}/programId/{programId}": {
      "get": {
        "description": "Get list of Tracer Categories for all the Planning Units mapped to a Supply Plan Program",
        "operationId": "getTracerCategoryForRealmProgram",
        "parameters": [
          {
            "description": "The ID of the realm to get tracer categories for",
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "The ID of the program to get tracer categories for",
            "in": "path",
            "name": "programId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TracerCategory"
                  }
                }
              }
            },
            "description": "Returns the list of tracer categories for the specified realm and program"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have access to the realm or program"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Tracer categories not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting the tracer category list"
          }
        },
        "summary": "Get Tracer Categories",
        "tags": [
          "Tracer category"
        ]
      }
    },
    "/api/tracerCategory/realmId/{realmId}/programIds": {
      "post": {
        "description": "Get list of Tracer Categories for all the Planning Units mapped to a list of Supply Plan Programs",
        "operationId": "getTracerCategoryForRealmPrograms",
        "parameters": [
          {
            "description": "The ID of the realm to get tracer categories for",
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "description": "The list of program IDs to get tracer categories for",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TracerCategory"
                  }
                }
              }
            },
            "description": "Returns the list of tracer categories for the specified realm and programs"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have access to the realm or programs"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Tracer categories not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting the tracer category list"
          }
        },
        "summary": "Get Tracer Categories",
        "tags": [
          "Tracer category"
        ]
      }
    },
    "/api/tracerCategory/simple": {
      "get": {
        "description": "Get all tracer categories in a simplified format",
        "operationId": "getTracerCategorySimple",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TracerCategory_InternalView"
                  }
                }
              }
            },
            "description": "Returns the list of tracer categories in a simplified format"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_InternalView"
                }
              }
            },
            "description": "Internal error while getting the tracer category list"
          }
        },
        "summary": "Get Tracer Categories (simplified)",
        "tags": [
          "Tracer category"
        ]
      }
    },
    "/api/tracerCategory/{tracerCategoryId}": {
      "get": {
        "description": "Get a specific Tracer Category by ID",
        "operationId": "getTracerCategory_1",
        "parameters": [
          {
            "description": "The ID of the tracer category to get",
            "in": "path",
            "name": "tracerCategoryId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TracerCategory"
                }
              }
            },
            "description": "Returns the tracer category"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Access denied"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Tracer category not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting the tracer category"
          }
        },
        "summary": "Get Tracer Category",
        "tags": [
          "Tracer category"
        ]
      }
    },
    "/api/treeTemplate": {
      "get": {
        "description": "API used to get the complete TreeTemplate list. Will only return those TreeTemplates that are marked Active.",
        "operationId": "getTreeTemplate",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TreeTemplate"
                  }
                }
              }
            },
            "description": "Returns the TreeTemplate list"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retreival of TreeTemplate list"
          }
        },
        "summary": "Get active TreeTemplate list",
        "tags": [
          "Tree template"
        ]
      },
      "post": {
        "description": "API used to add a new TreeTemplate.",
        "operationId": "addTreeTemplate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TreeTemplate"
              }
            }
          },
          "description": "The TreeTemplate to add",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TreeTemplate"
                }
              }
            },
            "description": "Returns the added TreeTemplate"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Access denied"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while adding the TreeTemplate"
          }
        },
        "summary": "Add a new TreeTemplate",
        "tags": [
          "Tree template"
        ]
      },
      "put": {
        "description": "API used to update an existing TreeTemplate.",
        "operationId": "updateTreeTemplate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TreeTemplate"
              }
            }
          },
          "description": "The TreeTemplate to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TreeTemplate"
                }
              }
            },
            "description": "Returns the updated TreeTemplate"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Access denied"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while updating the TreeTemplate"
          }
        },
        "summary": "Update an existing TreeTemplate",
        "tags": [
          "Tree template"
        ]
      }
    },
    "/api/treeTemplate/{treeTemplateId}": {
      "get": {
        "description": "API used to get a specific TreeTemplate based on the Id.",
        "operationId": "getTreeTemplate_1",
        "parameters": [
          {
            "description": "The ID of the tree template to get",
            "in": "path",
            "name": "treeTemplateId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TreeTemplate"
                }
              }
            },
            "description": "Returns the TreeTemplate for the Id"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retreival of TreeTemplate"
          }
        },
        "summary": "Get TreeTemplate based on the Id",
        "tags": [
          "Tree template"
        ]
      }
    },
    "/api/unit": {
      "get": {
        "description": "Get all Units",
        "operationId": "getUnit",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Unit"
                  }
                }
              }
            },
            "description": "Returns the list of units"
          },
          "500": {
            "content": {
              "text/json": {

              }
            },
            "description": "Internal error while getting the unit list"
          }
        },
        "summary": "Get Units",
        "tags": [
          "Unit"
        ]
      },
      "post": {
        "description": "Add a new unit",
        "operationId": "postUnit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Unit"
              }
            }
          },
          "description": "The unit to add",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Unit already exists"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while adding the unit"
          }
        },
        "summary": "Add Unit",
        "tags": [
          "Unit"
        ]
      },
      "put": {
        "description": "Update an existing Unit",
        "operationId": "putUnit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Unit"
              }
            }
          },
          "description": "The unit to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while updating the unit"
          }
        },
        "summary": "Update Unit",
        "tags": [
          "Unit"
        ]
      }
    },
    "/api/unit/dimension/{dimensionId}": {
      "get": {
        "description": "Get Units by Dimension ID",
        "operationId": "getUnitByDimension",
        "parameters": [
          {
            "description": "The dimension ID",
            "in": "path",
            "name": "dimensionId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Unit"
                  }
                }
              }
            },
            "description": "Returns the list of units"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting the unit list"
          }
        },
        "summary": "Get Units by Dimension",
        "tags": [
          "Unit"
        ]
      }
    },
    "/api/unit/{unitId}": {
      "get": {
        "description": "Get a Unit by ID",
        "operationId": "getUnit_1",
        "parameters": [
          {
            "description": "The unit ID",
            "in": "path",
            "name": "unitId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              }
            },
            "description": "Returns the unit"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Unit not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting the unit"
          }
        },
        "summary": "Get Unit",
        "tags": [
          "Unit"
        ]
      }
    },
    "/api/usagePeriod": {
      "get": {
        "description": "Get active UsagePeriod list",
        "operationId": "getUsagePeriodList",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UsagePeriod"
                  }
                }
              }
            },
            "description": "Returns the UsagePeriod list"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retreival of UsagePeriod list"
          }
        },
        "summary": "Get Usage Periods",
        "tags": [
          "Usage period"
        ]
      },
      "post": {
        "description": "Create or update UsagePeriod",
        "operationId": "addAndUpadteUsagePeriod",
        "parameters": [
          {
            "description": "The list of UsagePeriod objects that you want to add or update. If usagePeriodId is null or 0 then it is added if usagePeriodId is not null and non 0 it is updated",
            "in": "query",
            "name": "usagePeriod"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UsagePeriod"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a Success code if the operation was successful"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a HttpStatus.FORBIDDEN if you do not have rights to add/update this object"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a HttpStatus.NOT_ACCEPTABLE if the data supplied is not acceptable"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a HttpStatus.INTERNAL_SERVER_ERROR if there was some other error that did not allow the operation to complete"
          }
        },
        "summary": "Save UsagePeriod",
        "tags": [
          "Usage period"
        ]
      }
    },
    "/api/usagePeriod/all": {
      "get": {
        "description": "Get complete UsagePeriod list",
        "operationId": "getUsagePeriodListAll",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UsagePeriod"
                  }
                }
              }
            },
            "description": "Returns the UsagePeriod list"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retreival of UsagePeriod list"
          }
        },
        "summary": "Get Usage Periods",
        "tags": [
          "Usage period"
        ]
      }
    },
    "/api/usageTemplate": {
      "get": {
        "description": "API used to get the complete UsageTemplate list. Will only return those UsageTemplates that are marked Active.",
        "operationId": "getUsageTemplateList",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UsageTemplate"
                  }
                }
              }
            },
            "description": "Returns the UsageTemplate list"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retreival of UsageTemplate list"
          }
        },
        "summary": "Get active UsageTemplate list",
        "tags": [
          "Usage template"
        ]
      },
      "post": {
        "description": "API used to add or update UsageTemplate",
        "operationId": "addAndUpadteUsageTemplate",
        "parameters": [
          {
            "description": "The list of UsageTemplate objects that you want to add or update. If usageTemplateId is null or 0 then it is added if usageTemplateId is not null and non 0 it is updated",
            "in": "query",
            "name": "usageTemplate"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UsageTemplate"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a Success code if the operation was successful"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a HttpStatus.FORBIDDEN if you do not have rights to add/update this object"
          },
          "406": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a HttpStatus.NOT_ACCEPTABLE if the data supplied is not acceptable"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a HttpStatus.INTERNAL_SERVER_ERROR if there was some other error that did not allow the operation to complete"
          }
        },
        "summary": "Add or Update UsageTemplate",
        "tags": [
          "Usage template"
        ]
      }
    },
    "/api/usageTemplate/all": {
      "get": {
        "description": "API used to get the complete UsageTemplate list.",
        "operationId": "getUsageTemplateListAll",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UsageTemplate"
                  }
                }
              }
            },
            "description": "Returns the UsageTemplate list"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retreival of UsageTemplate list"
          }
        },
        "summary": "Get complete UsageTemplate list",
        "tags": [
          "Usage template"
        ]
      }
    },
    "/api/usageTemplate/tracerCategory/{tracerCategoryId}": {
      "get": {
        "description": "API used to get the complete UsageTemplate list. Will only return those UsageTemplates that are marked Active.",
        "operationId": "getUsageTemplateListWihtFilters",
        "parameters": [
          {
            "description": "The TracerCategory that you want to filter the UsageTemplate",
            "in": "path",
            "name": "tracerCategoryId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UsageTemplate"
                  }
                }
              }
            },
            "description": "Returns the UsageTemplate list"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error that prevented the retreival of UsageTemplate list"
          }
        },
        "summary": "Get active UsageTemplate list",
        "tags": [
          "Usage template"
        ]
      }
    },
    "/api/user": {
      "get": {
        "description": "Get user list",
        "operationId": "getUserList",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User_UserListView"
                  }
                }
              }
            },
            "description": "Returns the user list"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_UserListView"
                }
              }
            },
            "description": "Internal error while getting the user list"
          }
        },
        "summary": "Get User List",
        "tags": [
          "User"
        ]
      },
      "post": {
        "description": "Add user",
        "operationId": "addUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "description": "The user to add",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code if the operation was successful"
          },
          "412": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User or username already exists"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while adding the user"
          }
        },
        "summary": "Add User",
        "tags": [
          "User"
        ]
      },
      "put": {
        "description": "Update user",
        "operationId": "editUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "description": "The user to edit",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code if the operation was successful"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while editing the user"
          }
        },
        "summary": "Update User",
        "tags": [
          "User"
        ]
      }
    },
    "/api/user/accessControls": {
      "get": {
        "operationId": "accessControl_1",
        "responses": {
          "200": {
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "User"
        ]
      },
      "put": {
        "description": "Update user access controls",
        "operationId": "accessControl",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "description": "The user to update access controls",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code if the operation was successful"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while updating the access controls"
          }
        },
        "summary": "Update access controls",
        "tags": [
          "User"
        ]
      }
    },
    "/api/user/agreement": {
      "post": {
        "description": "Accept user agreement",
        "operationId": "acceptUserAgreement",
        "responses": {
          "200": {
            "content": {
              "text/json": {

              }
            },
            "description": "Returns an empty response if the operation was successful"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while updating the agreement"
          }
        },
        "summary": "Accept user agreement",
        "tags": [
          "User"
        ]
      }
    },
    "/api/user/changePassword": {
      "post": {
        "description": "Change password",
        "operationId": "changePassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Password"
              }
            }
          },
          "description": "The password to change",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code if the operation was successful"
          },
          "412": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "New password is same as old password"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while changing the password"
          }
        },
        "summary": "Change password",
        "tags": [
          "User"
        ]
      }
    },
    "/api/user/confirmForgotPasswordToken": {
      "post": {
        "description": "Confirm forgot password token",
        "operationId": "confirmForgotPasswordToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailUser"
              }
            }
          },
          "description": "The email id and token to confirm",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code if the operation was successful"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while confirming the forgot password token"
          }
        },
        "summary": "Confirm forgot password token",
        "tags": [
          "User"
        ]
      }
    },
    "/api/user/decimalPreference/{showDecimals}": {
      "post": {
        "description": "Update user decimal preference",
        "operationId": "updateUserDecimalPreference",
        "parameters": [
          {
            "in": "path",
            "name": "showDecimals",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {

              }
            },
            "description": "Returns an empty response if the operation was successful"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while updating the decimal preference"
          }
        },
        "summary": "Update user decimal preference",
        "tags": [
          "User"
        ]
      }
    },
    "/api/user/details": {
      "get": {
        "description": "Get user details including ACL",
        "operationId": "getUserDetails",
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "Returns the user details"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting the user details"
          }
        },
        "summary": "Get user details",
        "tags": [
          "User"
        ]
      }
    },
    "/api/user/forgotPassword": {
      "post": {
        "description": "Generates a forgot password token and sends it via email",
        "operationId": "forgotPassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailUser"
              }
            }
          },
          "description": "The email id to forgot password",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code if the operation was successful"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User is disabled"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while generating the forgot password token"
          }
        },
        "summary": "Get forgot password token",
        "tags": [
          "User"
        ]
      }
    },
    "/api/user/language": {
      "post": {
        "description": "Update user default language",
        "operationId": "updateUserLanguage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LanguageUser"
              }
            }
          },
          "description": "The language to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {

              }
            },
            "description": "Returns an empty response if the operation was successful"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while updating the preferred language"
          }
        },
        "summary": "Update user language",
        "tags": [
          "User"
        ]
      }
    },
    "/api/user/module/{moduleId}": {
      "post": {
        "description": "Update user default module",
        "operationId": "updateUserModule",
        "parameters": [
          {
            "in": "path",
            "name": "moduleId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {

              }
            },
            "description": "Returns an empty response if the operation was successful"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while updating the default module"
          }
        },
        "summary": "Update user module",
        "tags": [
          "User"
        ]
      }
    },
    "/api/user/programId/{programId}": {
      "get": {
        "description": "Get list of Users that have access to a Program",
        "operationId": "getUserListForProgram",
        "parameters": [
          {
            "description": "The program ID",
            "in": "path",
            "name": "programId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            },
            "description": "Returns the user list for program"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have access to this program"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User list not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting the user list"
          }
        },
        "summary": "Get Users for Program",
        "tags": [
          "User"
        ]
      }
    },
    "/api/user/realmId/{realmId}": {
      "get": {
        "description": "Get user list for realm",
        "operationId": "getUserList_1",
        "parameters": [
          {
            "description": "The realm ID",
            "in": "path",
            "name": "realmId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User_UserListView"
                  }
                }
              }
            },
            "description": "Returns the user list for realm"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_UserListView"
                }
              }
            },
            "description": "User does not have access to this realm"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_UserListView"
                }
              }
            },
            "description": "User list not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode_UserListView"
                }
              }
            },
            "description": "Internal error while getting the user list"
          }
        },
        "summary": "Get User List for Realm",
        "tags": [
          "User"
        ]
      }
    },
    "/api/user/theme/{themeId}": {
      "post": {
        "description": "Update user default theme",
        "operationId": "updateUserTheme",
        "parameters": [
          {
            "in": "path",
            "name": "themeId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {

              }
            },
            "description": "Returns an empty response if the operation was successful"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while updating the default theme"
          }
        },
        "summary": "Update user theme",
        "tags": [
          "User"
        ]
      }
    },
    "/api/user/updateExpiredPassword": {
      "post": {
        "description": "Update expired password",
        "operationId": "updateExpiredPassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Password"
              }
            }
          },
          "description": "The password to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code if the operation was successful"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Incorrect old password"
          },
          "412": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "New password is same as old password"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while updating the password"
          }
        },
        "summary": "Update expired password",
        "tags": [
          "User"
        ]
      }
    },
    "/api/user/updatePassword": {
      "post": {
        "description": "Update password from forgot password",
        "operationId": "updatePassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailUser"
              }
            }
          },
          "description": "The email id and token to update password",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Returns a success code if the operation was successful"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Invalid token"
          },
          "412": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "New password is same as current password"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while updating the password"
          }
        },
        "summary": "Update password",
        "tags": [
          "User"
        ]
      }
    },
    "/api/user/{userId}": {
      "get": {
        "description": "Get user by ID",
        "operationId": "getUserByUserId",
        "parameters": [
          {
            "description": "The user ID",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "Returns the user by user ID"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User does not have access to this user"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "User not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while getting the user"
          }
        },
        "summary": "Get User",
        "tags": [
          "User"
        ]
      }
    },
    "/api/userManual/uploadUserManual": {
      "post": {
        "description": "Upload user manual",
        "operationId": "uploadUserManual",
        "parameters": [
          {
            "description": "The file to upload",
            "in": "query",
            "name": "file",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "The file to upload"
                  }
                },
                "required": [
                  "file"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Return a success code if the operation was successful"
          },
          "403": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "The user does not have permission to upload the user manual"
          },
          "404": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "The user manual was not found"
          },
          "500": {
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCode"
                }
              }
            },
            "description": "Internal error while uploading the user manual"
          }
        },
        "summary": "Upload user manual",
        "tags": [
          "User manual"
        ]
      }
    },
    "/authenticate": {
      "post": {
        "description": "Get JWT token for authentication",
        "operationId": "createAuthenticationToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JwtTokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Successfully authenticated"
          },
          "401": {
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid credentials"
          },
          "406": {
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Password expired"
          },
          "500": {
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "Authenticate user",
        "tags": [
          "JWT Authentication"
        ]
      }
    },
    "/exportManualJson": {
      "get": {
        "description": "Export manual json",
        "operationId": "exportManualJson",
        "responses": {
          "200": {
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Export manual json",
        "tags": [
          "Export Supply Plan"
        ]
      }
    },
    "/exportOrderData": {
      "delete": {
        "description": "Export order data",
        "operationId": "exportOrderData_12",
        "responses": {
          "200": {
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Export order data",
        "tags": [
          "Export Order IDs"
        ]
      },
      "get": {
        "description": "Export order data",
        "operationId": "exportOrderData_7",
        "responses": {
          "200": {
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Export order data",
        "tags": [
          "Export Order IDs"
        ]
      },
      "head": {
        "description": "Export order data",
        "operationId": "exportOrderData_8",
        "responses": {
          "200": {
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Export order data",
        "tags": [
          "Export Order IDs"
        ]
      },
      "options": {
        "description": "Export order data",
        "operationId": "exportOrderData_13",
        "responses": {
          "200": {
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Export order data",
        "tags": [
          "Export Order IDs"
        ]
      },
      "patch": {
        "description": "Export order data",
        "operationId": "exportOrderData_11",
        "responses": {
          "200": {
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Export order data",
        "tags": [
          "Export Order IDs"
        ]
      },
      "post": {
        "description": "Export order data",
        "operationId": "exportOrderData_9",
        "responses": {
          "200": {
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Export order data",
        "tags": [
          "Export Order IDs"
        ]
      },
      "put": {
        "description": "Export order data",
        "operationId": "exportOrderData_10",
        "responses": {
          "200": {
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Export order data",
        "tags": [
          "Export Order IDs"
        ]
      }
    },
    "/exportProgramData": {
      "delete": {
        "description": "Export program data",
        "operationId": "exportProgramCsv_5",
        "responses": {
          "200": {
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Export program data",
        "tags": [
          "Export Programs"
        ]
      },
      "get": {
        "description": "Export program data",
        "operationId": "exportProgramCsv",
        "responses": {
          "200": {
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Export program data",
        "tags": [
          "Export Programs"
        ]
      },
      "head": {
        "description": "Export program data",
        "operationId": "exportProgramCsv_1",
        "responses": {
          "200": {
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Export program data",
        "tags": [
          "Export Programs"
        ]
      },
      "options": {
        "description": "Export program data",
        "operationId": "exportProgramCsv_6",
        "responses": {
          "200": {
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Export program data",
        "tags": [
          "Export Programs"
        ]
      },
      "patch": {
        "description": "Export program data",
        "operationId": "exportProgramCsv_4",
        "responses": {
          "200": {
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Export program data",
        "tags": [
          "Export Programs"
        ]
      },
      "post": {
        "description": "Export program data",
        "operationId": "exportProgramCsv_2",
        "responses": {
          "200": {
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Export program data",
        "tags": [
          "Export Programs"
        ]
      },
      "put": {
        "description": "Export program data",
        "operationId": "exportProgramCsv_3",
        "responses": {
          "200": {
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Export program data",
        "tags": [
          "Export Programs"
        ]
      }
    },
    "/exportShipmentLinkingData": {
      "delete": {
        "description": "Export shipment linking data",
        "operationId": "exportOrderData_5",
        "responses": {
          "200": {
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Export shipment linking data",
        "tags": [
          "Export Shipment Linking"
        ]
      },
      "get": {
        "description": "Export shipment linking data",
        "operationId": "exportOrderData",
        "responses": {
          "200": {
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Export shipment linking data",
        "tags": [
          "Export Shipment Linking"
        ]
      },
      "head": {
        "description": "Export shipment linking data",
        "operationId": "exportOrderData_1",
        "responses": {
          "200": {
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Export shipment linking data",
        "tags": [
          "Export Shipment Linking"
        ]
      },
      "options": {
        "description": "Export shipment linking data",
        "operationId": "exportOrderData_6",
        "responses": {
          "200": {
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Export shipment linking data",
        "tags": [
          "Export Shipment Linking"
        ]
      },
      "patch": {
        "description": "Export shipment linking data",
        "operationId": "exportOrderData_4",
        "responses": {
          "200": {
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Export shipment linking data",
        "tags": [
          "Export Shipment Linking"
        ]
      },
      "post": {
        "description": "Export shipment linking data",
        "operationId": "exportOrderData_2",
        "responses": {
          "200": {
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Export shipment linking data",
        "tags": [
          "Export Shipment Linking"
        ]
      },
      "put": {
        "description": "Export shipment linking data",
        "operationId": "exportOrderData_3",
        "responses": {
          "200": {
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Export shipment linking data",
        "tags": [
          "Export Shipment Linking"
        ]
      }
    },
    "/exportSupplyPlan": {
      "get": {
        "description": "Export supply plan",
        "operationId": "exportSupplyPlan",
        "responses": {
          "200": {
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Export supply plan",
        "tags": [
          "Export Supply Plan"
        ]
      }
    },
    "/file/{fileName}": {
      "get": {
        "description": "Retrieve a file based on the provided file name",
        "operationId": "getFile",
        "parameters": [
          {
            "description": "The name of the file to retrieve. Options: qatUserGuide, pipelineConvertorLinux, pipelineConvertorWindows,consumptionDataEntryTemplate, inventoryDataEntryTemplate, adjustmentsDataEntryTemplate,shipmentDataEntryTemplate",
            "in": "path",
            "name": "fileName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {

              }
            },
            "description": "Returns the requested file"
          },
          "500": {
            "content": {
              "application/octet-stream": {

              }
            },
            "description": "Internal error that prevented the retrieval of the requested file"
          }
        },
        "summary": "Get File",
        "tags": [
          "File"
        ]
      }
    },
    "/importProductCatalog": {
      "delete": {
        "operationId": "importProductcatalogue_5",
        "responses": {
          "200": {
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Import Product Catalogue"
        ]
      },
      "get": {
        "operationId": "importProductcatalogue",
        "responses": {
          "200": {
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Import Product Catalogue"
        ]
      },
      "head": {
        "operationId": "importProductcatalogue_1",
        "responses": {
          "200": {
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Import Product Catalogue"
        ]
      },
      "options": {
        "operationId": "importProductcatalogue_6",
        "responses": {
          "200": {
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Import Product Catalogue"
        ]
      },
      "patch": {
        "operationId": "importProductcatalogue_4",
        "responses": {
          "200": {
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Import Product Catalogue"
        ]
      },
      "post": {
        "operationId": "importProductcatalogue_2",
        "responses": {
          "200": {
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Import Product Catalogue"
        ]
      },
      "put": {
        "operationId": "importProductcatalogue_3",
        "responses": {
          "200": {
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Import Product Catalogue"
        ]
      }
    },
    "/importProductCatalogLegacy": {
      "delete": {
        "operationId": "importProductcatalogueLegacy_5",
        "responses": {
          "200": {
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Import Product Catalogue"
        ]
      },
      "get": {
        "operationId": "importProductcatalogueLegacy",
        "responses": {
          "200": {
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Import Product Catalogue"
        ]
      },
      "head": {
        "operationId": "importProductcatalogueLegacy_1",
        "responses": {
          "200": {
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Import Product Catalogue"
        ]
      },
      "options": {
        "operationId": "importProductcatalogueLegacy_6",
        "responses": {
          "200": {
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Import Product Catalogue"
        ]
      },
      "patch": {
        "operationId": "importProductcatalogueLegacy_4",
        "responses": {
          "200": {
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Import Product Catalogue"
        ]
      },
      "post": {
        "operationId": "importProductcatalogueLegacy_2",
        "responses": {
          "200": {
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Import Product Catalogue"
        ]
      },
      "put": {
        "operationId": "importProductcatalogueLegacy_3",
        "responses": {
          "200": {
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "Import Product Catalogue"
        ]
      }
    },
    "/importShipmentData": {
      "get": {
        "operationId": "importArtemisData",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Import Shipment Data"
        ]
      }
    },
    "/refresh": {
      "get": {
        "description": "Refresh JWT token",
        "operationId": "refreshAndGetAuthenticationToken",
        "responses": {
          "200": {
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Successfully refreshed"
          },
          "401": {
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid token"
          }
        },
        "summary": "Refresh JWT token",
        "tags": [
          "JWT Authentication"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ActualConsumptionDataInput_ReportView": {
        "type": "object",
        "properties": {
          "programDataList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActualConsumptionData_ReportView"
            }
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "stopDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ActualConsumptionData_ReportView": {
        "type": "object",
        "properties": {
          "planningUnitIdString": {
            "type": "string"
          },
          "planningUnitIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "programId": {
            "type": "integer",
            "format": "int32"
          },
          "regionIdString": {
            "type": "string"
          },
          "regionIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "versionId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AnnualShipmentCostInput_ReportView": {
        "type": "object",
        "properties": {
          "fundingSourceIdString": {
            "type": "string"
          },
          "fundingSourceIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "planningUnitIdString": {
            "type": "string"
          },
          "planningUnitIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "procurementAgentIdString": {
            "type": "string"
          },
          "procurementAgentIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "programId": {
            "type": "integer",
            "format": "int32"
          },
          "reportBasedOn": {
            "type": "integer",
            "format": "int32"
          },
          "shipmentStatusIdString": {
            "type": "string"
          },
          "shipmentStatusIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "stopDate": {
            "type": "string",
            "format": "date-time"
          },
          "versionId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AnnualShipmentCostOutput_ReportView": {
        "type": "object",
        "properties": {
          "fundingSource": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          },
          "planningUnit": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "procurementAgent": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          },
          "shipmentAmt": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            }
          }
        }
      },
      "AnnualTargetCalculator": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "actualOrTargetValueList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "firstMonthOfTarget": {
            "type": "string"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "nodeDataAnnualTargetCalculatorId": {
            "type": "integer",
            "format": "int32"
          },
          "yearsOfTarget": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AnnualTargetCalculator_InternalView": {
        "type": "object",
        "properties": {
          "actualOrTargetValueList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel_InternalView"
          },
          "firstMonthOfTarget": {
            "type": "string"
          },
          "nodeDataAnnualTargetCalculatorId": {
            "type": "integer",
            "format": "int32"
          },
          "yearsOfTarget": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ArimaInputDTO": {
        "type": "object",
        "properties": {
          "d": {
            "type": "number",
            "format": "double"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            }
          },
          "frequency": {
            "type": "integer",
            "format": "int32"
          },
          "level": {
            "type": "number",
            "format": "double"
          },
          "n": {
            "type": "integer",
            "format": "int32"
          },
          "optimize": {
            "type": "boolean"
          },
          "p": {
            "type": "number",
            "format": "double"
          },
          "q": {
            "type": "number",
            "format": "double"
          },
          "seasonality": {
            "type": "boolean"
          },
          "start": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AutoCompleteInput_DropDownView": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string"
          },
          "searchText": {
            "type": "string"
          }
        }
      },
      "BaseModel": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "BaseModel_DropDown2View": {
        "type": "object",
        "properties": {
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel_DropDown2View"
          }
        }
      },
      "BaseModel_DropDownView": {
        "type": "object",
        "properties": {
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel_DropDownView"
          }
        }
      },
      "BaseModel_InternalView": {
        "type": "object",
        "properties": {
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel_InternalView"
          }
        }
      },
      "BaseModel_ReportView": {
        "type": "object",
        "properties": {
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel_ReportView"
          }
        }
      },
      "BaseModel_UserListView": {
        "type": "object",
        "properties": {
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel_UserListView"
          }
        }
      },
      "BasicUser": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "BasicUser_DropDownView": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "BasicUser_InternalView": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "BasicUser_ReportView": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "BasicUser_UserListView": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "Batch": {
        "type": "object",
        "properties": {
          "autoGenerated": {
            "type": "boolean"
          },
          "batchId": {
            "type": "integer",
            "format": "int32"
          },
          "batchNo": {
            "type": "string"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "expiryDate": {
            "type": "string",
            "format": "date-time"
          },
          "planningUnitId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "BatchInventory_InternalView": {
        "type": "object",
        "properties": {
          "batchInventoryId": {
            "type": "integer",
            "format": "int32"
          },
          "batchList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BatchQty_InternalView"
            }
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser_InternalView"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "inventoryDate": {
            "type": "string"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser_InternalView"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "planningUnit": {
            "$ref": "#/components/schemas/SimpleObject_InternalView"
          },
          "versionId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "BatchQty_InternalView": {
        "type": "object",
        "properties": {
          "batch": {
            "$ref": "#/components/schemas/Batch_InternalView"
          },
          "batchInventoryTransId": {
            "type": "integer",
            "format": "int32"
          },
          "qty": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "Batch_InternalView": {
        "type": "object",
        "properties": {
          "autoGenerated": {
            "type": "boolean"
          },
          "batchId": {
            "type": "integer",
            "format": "int32"
          },
          "batchNo": {
            "type": "string"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "expiryDate": {
            "type": "string",
            "format": "date-time"
          },
          "planningUnitId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Batch_ReportView": {
        "type": "object",
        "properties": {
          "autoGenerated": {
            "type": "boolean"
          },
          "batchId": {
            "type": "integer",
            "format": "int32"
          },
          "batchNo": {
            "type": "string"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "expiryDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Budget": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "budgetAmt": {
            "type": "number",
            "format": "double"
          },
          "budgetCode": {
            "type": "string"
          },
          "budgetId": {
            "type": "integer",
            "format": "int32"
          },
          "budgetUsable": {
            "type": "boolean"
          },
          "budgetUsdAmt": {
            "type": "number",
            "format": "double"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "fundingSource": {
            "$ref": "#/components/schemas/FundingSource"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "notes": {
            "type": "string"
          },
          "programs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleCodeObject"
            }
          },
          "programsWithAccess": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleCodeObject"
            }
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "stopDate": {
            "type": "string",
            "format": "date-time"
          },
          "usedUsdAmt": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "BudgetReportInput_ReportView": {
        "type": "object",
        "properties": {
          "fundingSourceIdString": {
            "type": "string"
          },
          "fundingSourceIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "programId": {
            "type": "array",
            "writeOnly": true,
            "items": {
              "type": "string"
            }
          },
          "programIdString": {
            "type": "string"
          },
          "programIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "stopDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "BudgetReportOutput_ReportView": {
        "type": "object",
        "properties": {
          "budget": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          },
          "budgetAmt": {
            "type": "number",
            "format": "double"
          },
          "currency": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          },
          "fundingSource": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          },
          "fundingSourceType": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          },
          "orderedBudgetAmt": {
            "type": "number",
            "format": "double"
          },
          "plannedBudgetAmt": {
            "type": "number",
            "format": "double"
          },
          "program": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          },
          "remainingBudgetAmtUsd": {
            "type": "number",
            "format": "double"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "stopDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Budget_ReportView": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel_ReportView"
          },
          "budgetAmt": {
            "type": "number",
            "format": "double"
          },
          "budgetCode": {
            "type": "string"
          },
          "budgetId": {
            "type": "integer",
            "format": "int32"
          },
          "budgetUsable": {
            "type": "boolean"
          },
          "budgetUsdAmt": {
            "type": "number",
            "format": "double"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency_ReportView"
          },
          "fundingSource": {
            "$ref": "#/components/schemas/FundingSource_ReportView"
          },
          "label": {
            "$ref": "#/components/schemas/Label_ReportView"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser_ReportView"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "notes": {
            "type": "string"
          },
          "programs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
            }
          },
          "programsWithAccess": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
            }
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "stopDate": {
            "type": "string",
            "format": "date-time"
          },
          "usedUsdAmt": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "BusinessFunction": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "businessFunctionId": {
            "type": "string"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "BusinessFunction_ReportView": {
        "type": "object",
        "properties": {
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel_ReportView"
          },
          "businessFunctionId": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label_ReportView"
          }
        }
      },
      "CanCreateRole": {
        "type": "object",
        "properties": {
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "roleId": {
            "type": "string"
          }
        }
      },
      "CanCreateRole_ReportView": {
        "type": "object",
        "properties": {
          "label": {
            "$ref": "#/components/schemas/Label_ReportView"
          },
          "roleId": {
            "type": "string"
          }
        }
      },
      "CommitRequest": {
        "type": "object",
        "properties": {
          "commitRequestId": {
            "type": "integer",
            "format": "int32"
          },
          "committedVersionId": {
            "type": "integer",
            "format": "int32"
          },
          "completedDate": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "failedReason": {
            "type": "string"
          },
          "json": {
            "type": "string"
          },
          "notes": {
            "type": "string"
          },
          "program": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          },
          "programTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "saveData": {
            "type": "boolean"
          },
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "versionType": {
            "$ref": "#/components/schemas/SimpleObject"
          }
        }
      },
      "CommitRequestInput": {
        "type": "object",
        "properties": {
          "programIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "programIdsString": {
            "type": "string"
          },
          "startDate": {
            "type": "string"
          },
          "stopDate": {
            "type": "string"
          }
        }
      },
      "ConsumptionBatchInfo_InternalView": {
        "type": "object",
        "properties": {
          "batch": {
            "$ref": "#/components/schemas/Batch_InternalView"
          },
          "consumptionQty": {
            "type": "number",
            "format": "double"
          },
          "consumptionTransBatchInfoId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ConsumptionForecastVsActualInput_ReportView": {
        "type": "object",
        "properties": {
          "planningUnitId": {
            "type": "integer",
            "format": "int32"
          },
          "programId": {
            "type": "integer",
            "format": "int32"
          },
          "reportView": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "stopDate": {
            "type": "string",
            "format": "date-time"
          },
          "versionId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ConsumptionForecastVsActualOutput_ReportView": {
        "type": "object",
        "properties": {
          "actualConsumption": {
            "type": "number",
            "format": "double"
          },
          "forecastedConsumption": {
            "type": "number",
            "format": "double"
          },
          "transDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ConsumptionInfo_ReportView": {
        "type": "object",
        "properties": {
          "actualFlag": {
            "type": "boolean"
          },
          "consumptionDate": {
            "type": "string",
            "format": "date-time"
          },
          "consumptionId": {
            "type": "integer",
            "format": "int32"
          },
          "dataSource": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "notes": {
            "type": "string"
          },
          "region": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          }
        }
      },
      "Consumption_InternalView": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "actualFlag": {
            "type": "boolean"
          },
          "batchInfoList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConsumptionBatchInfo_InternalView"
            }
          },
          "consumptionDate": {
            "type": "string"
          },
          "consumptionId": {
            "type": "integer",
            "format": "int32"
          },
          "consumptionQty": {
            "type": "number",
            "format": "double"
          },
          "consumptionRcpuQty": {
            "type": "number",
            "format": "double"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser_InternalView"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "dataSource": {
            "$ref": "#/components/schemas/SimpleObject_InternalView"
          },
          "dayOfStockOut": {
            "type": "integer",
            "format": "int32"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser_InternalView"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "multiplier": {
            "type": "number",
            "format": "double"
          },
          "notes": {
            "type": "string"
          },
          "planningUnit": {
            "$ref": "#/components/schemas/SimplePlanningUnitProductCategoryObject_InternalView"
          },
          "realmCountryPlanningUnit": {
            "$ref": "#/components/schemas/SimpleObject_InternalView"
          },
          "region": {
            "$ref": "#/components/schemas/SimpleObject_InternalView"
          },
          "versionId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CostOfInventoryInput_ReportView": {
        "type": "object",
        "properties": {
          "dt": {
            "type": "string",
            "format": "date-time"
          },
          "includePlannedShipments": {
            "type": "boolean"
          },
          "programId": {
            "type": "integer",
            "format": "int32"
          },
          "versionId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CostOfInventoryOutput_ReportView": {
        "type": "object",
        "properties": {
          "calculated": {
            "type": "boolean"
          },
          "catalogPrice": {
            "type": "number",
            "format": "double"
          },
          "cost": {
            "type": "number",
            "format": "double"
          },
          "planningUnit": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "stock": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "Country": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "countryCode": {
            "type": "string"
          },
          "countryCode2": {
            "type": "string"
          },
          "countryId": {
            "type": "integer",
            "format": "int32"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "currency": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CountryConsumptionData_ReportView": {
        "type": "object",
        "properties": {
          "actualConsumption": {
            "type": "number",
            "format": "double"
          },
          "country": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          },
          "forecastedConsumption": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "Country_InternalView": {
        "type": "object",
        "properties": {
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel_InternalView"
          },
          "countryCode": {
            "type": "string"
          },
          "countryCode2": {
            "type": "string"
          },
          "countryId": {
            "type": "integer",
            "format": "int32"
          },
          "currency": {
            "$ref": "#/components/schemas/SimpleObject_InternalView"
          },
          "label": {
            "$ref": "#/components/schemas/Label_InternalView"
          }
        }
      },
      "Criticality": {
        "type": "object",
        "properties": {
          "colorHtmlCode": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Criticality_InternalView": {
        "type": "object",
        "properties": {
          "colorHtmlCode": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label_InternalView"
          }
        }
      },
      "Currency": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "conversionRateToUsd": {
            "type": "number",
            "format": "double"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "currencyCode": {
            "type": "string"
          },
          "currencyId": {
            "type": "integer",
            "format": "int32"
          },
          "isSync": {
            "type": "boolean"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Currency_InternalView": {
        "type": "object",
        "properties": {
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel_InternalView"
          },
          "conversionRateToUsd": {
            "type": "number",
            "format": "double"
          },
          "currencyCode": {
            "type": "string"
          },
          "currencyId": {
            "type": "integer",
            "format": "int32"
          },
          "isSync": {
            "type": "boolean"
          },
          "label": {
            "$ref": "#/components/schemas/Label_InternalView"
          }
        }
      },
      "Currency_ReportView": {
        "type": "object",
        "properties": {
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel_ReportView"
          },
          "conversionRateToUsd": {
            "type": "number",
            "format": "double"
          },
          "currencyCode": {
            "type": "string"
          },
          "currencyId": {
            "type": "integer",
            "format": "int32"
          },
          "label": {
            "$ref": "#/components/schemas/Label_ReportView"
          }
        }
      },
      "DashboardActualConsumptionDetails_InternalView": {
        "type": "object",
        "properties": {
          "actualCount": {
            "type": "integer",
            "format": "int32"
          },
          "consumptionDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "DashboardActualConsumptionDetails_ReportView": {
        "type": "object",
        "properties": {
          "actualCount": {
            "type": "integer",
            "format": "int32"
          },
          "consumptionDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "DashboardBottomData_InternalView": {
        "type": "object",
        "properties": {
          "actualConsumptionDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DashboardActualConsumptionDetails_InternalView"
            }
          },
          "countOfTbdFundingSource": {
            "type": "integer",
            "format": "int32"
          },
          "expiriesList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DashboardExpiredPu_InternalView"
            }
          },
          "forecastConsumptionQplPassed": {
            "type": "boolean"
          },
          "forecastError": {
            "type": "number",
            "format": "double"
          },
          "inventoryQplPassed": {
            "type": "boolean"
          },
          "shipmentDetailsByFundingSource": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DashboardShipmentDetailsReportBy_InternalView"
            }
          },
          "shipmentDetailsByProcurementAgent": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DashboardShipmentDetailsReportBy_InternalView"
            }
          },
          "shipmentDetailsByShipmentStatus": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DashboardShipmentDetailsReportBy_InternalView"
            }
          },
          "shipmentQplPassed": {
            "type": "boolean"
          },
          "stockStatus": {
            "$ref": "#/components/schemas/DashboardStockStatus_InternalView"
          }
        }
      },
      "DashboardBottomData_ReportView": {
        "type": "object",
        "properties": {
          "actualConsumptionDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DashboardActualConsumptionDetails_ReportView"
            }
          },
          "actualConsumptionQplPassed": {
            "type": "boolean"
          },
          "countOfTbdFundingSource": {
            "type": "integer",
            "format": "int32"
          },
          "expiriesList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DashboardExpiredPu_ReportView"
            }
          },
          "forecastConsumptionQplPassed": {
            "type": "boolean"
          },
          "forecastError": {
            "type": "number",
            "format": "double"
          },
          "inventoryQplPassed": {
            "type": "boolean"
          },
          "shipmentDetailsByFundingSource": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DashboardShipmentDetailsReportBy_ReportView"
            }
          },
          "shipmentDetailsByProcurementAgent": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DashboardShipmentDetailsReportBy_ReportView"
            }
          },
          "shipmentDetailsByShipmentStatus": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DashboardShipmentDetailsReportBy_ReportView"
            }
          },
          "shipmentQplPassed": {
            "type": "boolean"
          },
          "stockStatus": {
            "$ref": "#/components/schemas/DashboardStockStatus_ReportView"
          }
        }
      },
      "DashboardBottom_ReportView": {
        "type": "object",
        "properties": {
          "actualConsumptionQpl": {
            "$ref": "#/components/schemas/DashboardQpl_ReportView"
          },
          "expiriesList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DashboardExpiredPu_ReportView"
            }
          },
          "expiryTotal": {
            "type": "number",
            "format": "double"
          },
          "forecastConsumptionQpl": {
            "$ref": "#/components/schemas/DashboardQpl_ReportView"
          },
          "forecastErrorList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DashboardForecastError_ReportView"
            }
          },
          "inventoryQpl": {
            "$ref": "#/components/schemas/DashboardQpl_ReportView"
          },
          "program": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          },
          "shipmentDetailsList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DashboardShipmentDetailsReportBy_ReportView"
            }
          },
          "shipmentQpl": {
            "$ref": "#/components/schemas/DashboardQpl_ReportView"
          },
          "shipmentTotal": {
            "type": "number",
            "format": "double"
          },
          "shipmentWithFundingSourceTbd": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DashboardPuWithCount_ReportView"
            }
          },
          "stockStatus": {
            "$ref": "#/components/schemas/DashboardStockStatus_ReportView"
          }
        }
      },
      "DashboardExpiredPu_InternalView": {
        "type": "object",
        "properties": {
          "autoGenerated": {
            "type": "boolean"
          },
          "batchId": {
            "type": "integer",
            "format": "int32"
          },
          "batchNo": {
            "type": "string"
          },
          "expDate": {
            "type": "string",
            "format": "date-time"
          },
          "expiringQty": {
            "type": "number",
            "format": "double"
          },
          "expiryAmt": {
            "type": "number",
            "format": "double"
          },
          "planningUnit": {
            "$ref": "#/components/schemas/SimpleObject_InternalView"
          },
          "price": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "DashboardExpiredPu_ReportView": {
        "type": "object",
        "properties": {
          "autoGenerated": {
            "type": "boolean"
          },
          "batchId": {
            "type": "integer",
            "format": "int32"
          },
          "batchNo": {
            "type": "string"
          },
          "expDate": {
            "type": "string",
            "format": "date-time"
          },
          "expiringQty": {
            "type": "number",
            "format": "double"
          },
          "expiryAmt": {
            "type": "number",
            "format": "double"
          },
          "planningUnit": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "price": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "DashboardForLoadProgram_InternalView": {
        "type": "object",
        "properties": {
          "bottomPuData": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/DashboardBottomData_InternalView"
            }
          },
          "curDate": {
            "type": "string",
            "format": "date-time"
          },
          "program": {
            "$ref": "#/components/schemas/SimpleCodeObject_InternalView"
          },
          "startDateBottom": {
            "type": "string",
            "format": "date-time"
          },
          "startDateTop": {
            "type": "string",
            "format": "date-time"
          },
          "stopDateBottom": {
            "type": "string",
            "format": "date-time"
          },
          "stopDateTop": {
            "type": "string",
            "format": "date-time"
          },
          "topPuData": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/DashboardTopData_InternalView"
            }
          }
        }
      },
      "DashboardForLoadProgram_ReportView": {
        "type": "object",
        "properties": {
          "bottomPuData": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/DashboardBottomData_ReportView"
            }
          },
          "curDate": {
            "type": "string",
            "format": "date-time"
          },
          "program": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          },
          "startDateBottom": {
            "type": "string",
            "format": "date-time"
          },
          "startDateTop": {
            "type": "string",
            "format": "date-time"
          },
          "stopDateBottom": {
            "type": "string",
            "format": "date-time"
          },
          "stopDateTop": {
            "type": "string",
            "format": "date-time"
          },
          "topPuData": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/DashboardTopData_ReportView"
            }
          }
        }
      },
      "DashboardForecastError_ReportView": {
        "type": "object",
        "properties": {
          "aboveForecastThreshold": {
            "type": "boolean"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "errorPerc": {
            "type": "number",
            "format": "double"
          },
          "forecastErrorThreshold": {
            "type": "number",
            "format": "double"
          },
          "planningUnit": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          }
        }
      },
      "DashboardInput_ReportView": {
        "type": "object",
        "properties": {
          "displayShipmentsBy": {
            "type": "integer",
            "format": "int32"
          },
          "programId": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string"
          },
          "stopDate": {
            "type": "string"
          }
        }
      },
      "DashboardPuWithCount_InternalView": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "planningUnit": {
            "$ref": "#/components/schemas/SimpleObject_InternalView"
          }
        }
      },
      "DashboardPuWithCount_ReportView": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "planningUnit": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          }
        }
      },
      "DashboardQpl_ReportView": {
        "type": "object",
        "properties": {
          "correctCount": {
            "type": "integer",
            "format": "int32"
          },
          "puCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "DashboardShipmentDetailsReportBy_InternalView": {
        "type": "object",
        "properties": {
          "colorHtmlCode": {
            "type": "string"
          },
          "colorHtmlDarkCode": {
            "type": "string"
          },
          "cost": {
            "type": "number",
            "format": "double"
          },
          "orderCount": {
            "type": "integer",
            "format": "int32"
          },
          "quantity": {
            "type": "number",
            "format": "double"
          },
          "reportBy": {
            "$ref": "#/components/schemas/SimpleCodeObject_InternalView"
          }
        }
      },
      "DashboardShipmentDetailsReportBy_ReportView": {
        "type": "object",
        "properties": {
          "colorHtmlCode": {
            "type": "string"
          },
          "colorHtmlDarkCode": {
            "type": "string"
          },
          "cost": {
            "type": "number",
            "format": "double"
          },
          "orderCount": {
            "type": "integer",
            "format": "int32"
          },
          "quantity": {
            "type": "number",
            "format": "double"
          },
          "reportBy": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          }
        }
      },
      "DashboardStockStatus_InternalView": {
        "type": "object",
        "properties": {
          "adequate": {
            "type": "integer",
            "format": "int32"
          },
          "adequatePerc": {
            "type": "number",
            "format": "double"
          },
          "na": {
            "type": "integer",
            "format": "int32"
          },
          "naPerc": {
            "type": "number",
            "format": "double"
          },
          "overStock": {
            "type": "integer",
            "format": "int32"
          },
          "overStockPerc": {
            "type": "number",
            "format": "double"
          },
          "puStockOutList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DashboardPuWithCount_InternalView"
            }
          },
          "stockOut": {
            "type": "integer",
            "format": "int32"
          },
          "stockOutPerc": {
            "type": "number",
            "format": "double"
          },
          "underStock": {
            "type": "integer",
            "format": "int32"
          },
          "underStockPerc": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "DashboardStockStatus_ReportView": {
        "type": "object",
        "properties": {
          "adequate": {
            "type": "integer",
            "format": "int32"
          },
          "adequatePerc": {
            "type": "number",
            "format": "double"
          },
          "na": {
            "type": "integer",
            "format": "int32"
          },
          "naPerc": {
            "type": "number",
            "format": "double"
          },
          "overStock": {
            "type": "integer",
            "format": "int32"
          },
          "overStockPerc": {
            "type": "number",
            "format": "double"
          },
          "puStockOutList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DashboardPuWithCount_ReportView"
            }
          },
          "stockOut": {
            "type": "integer",
            "format": "int32"
          },
          "stockOutPerc": {
            "type": "number",
            "format": "double"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "underStock": {
            "type": "integer",
            "format": "int32"
          },
          "underStockPerc": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "DashboardTopData_InternalView": {
        "type": "object",
        "properties": {
          "stockOut": {
            "type": "boolean"
          },
          "valueOfExpiredStock": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "DashboardTopData_ReportView": {
        "type": "object",
        "properties": {
          "stockOut": {
            "type": "boolean"
          },
          "valueOfExpiredStock": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "DashboardTop_ReportView": {
        "type": "object",
        "properties": {
          "activePlanningUnits": {
            "type": "integer",
            "format": "int32"
          },
          "commitDate": {
            "type": "string",
            "format": "date-time"
          },
          "countOfOpenProblem": {
            "type": "integer",
            "format": "int32"
          },
          "countOfStockOutPU": {
            "type": "integer",
            "format": "int32"
          },
          "disabledPlanningUnits": {
            "type": "integer",
            "format": "int32"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "latestFinalVersionLastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "latestFinalVersionStatus": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "program": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          },
          "valueOfExpiredPU": {
            "type": "number",
            "format": "double"
          },
          "version": {
            "type": "integer",
            "format": "int32",
            "writeOnly": true
          },
          "versionId": {
            "type": "integer",
            "format": "int32"
          },
          "versionStatus": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "versionType": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          }
        }
      },
      "DashboardUser": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          }
        }
      },
      "DataSource": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "dataSourceId": {
            "type": "integer",
            "format": "int32"
          },
          "dataSourceType": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "program": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          },
          "realm": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          }
        }
      },
      "DataSourceType": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "dataSourceTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "realm": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          }
        }
      },
      "DatabaseTranslationsDTO_InternalView": {
        "type": "object",
        "properties": {
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel_InternalView"
          },
          "labelFor": {
            "type": "string"
          },
          "labelId": {
            "type": "integer",
            "format": "int32"
          },
          "label_en": {
            "type": "string"
          },
          "label_fr": {
            "type": "string"
          },
          "label_pr": {
            "type": "string"
          },
          "label_sp": {
            "type": "string"
          },
          "relatedTo": {
            "$ref": "#/components/schemas/Label_InternalView"
          }
        }
      },
      "DatasetData_InternalView": {
        "type": "object",
        "properties": {
          "actualConsumptionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ForecastActualConsumption_InternalView"
            }
          },
          "consumptionExtrapolation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ForecastConsumptionExtrapolation_InternalView"
            }
          },
          "currentVersion": {
            "$ref": "#/components/schemas/Version_InternalView"
          },
          "healthAreaList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleCodeObject_InternalView"
            }
          },
          "label": {
            "$ref": "#/components/schemas/Label_InternalView"
          },
          "organisation": {
            "$ref": "#/components/schemas/SimpleCodeObject_InternalView"
          },
          "planningUnitList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatasetPlanningUnit_InternalView"
            }
          },
          "programCode": {
            "type": "string"
          },
          "programId": {
            "type": "integer",
            "format": "int32"
          },
          "programManager": {
            "$ref": "#/components/schemas/BasicUser_InternalView"
          },
          "programNotes": {
            "type": "string"
          },
          "realmCountry": {
            "$ref": "#/components/schemas/RealmCountry_InternalView"
          },
          "regionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Region_InternalView"
            }
          },
          "treeList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatasetTree_InternalView"
            }
          },
          "versionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Version_InternalView"
            }
          }
        }
      },
      "DatasetPlanningUnit": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "consumptionDataType": {
            "type": "integer",
            "format": "int32"
          },
          "consumptionNotes": {
            "type": "string"
          },
          "consuptionForecast": {
            "type": "boolean"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "existingShipments": {
            "type": "integer",
            "format": "int32"
          },
          "higherThenConsumptionThreshold": {
            "type": "number",
            "format": "double"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "lowerThenConsumptionThreshold": {
            "type": "number",
            "format": "double"
          },
          "monthsOfStock": {
            "type": "integer",
            "format": "int32"
          },
          "otherUnit": {
            "$ref": "#/components/schemas/SimpleObjectWithMultiplier"
          },
          "planningUnit": {
            "$ref": "#/components/schemas/SimplePlanningUnitObject"
          },
          "planningUnitNotes": {
            "type": "string"
          },
          "price": {
            "type": "number",
            "format": "double"
          },
          "procurementAgent": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          },
          "programPlanningUnitId": {
            "type": "integer",
            "format": "int32"
          },
          "selectedForecastMap": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/SelectedForecast"
            }
          },
          "stock": {
            "type": "integer",
            "format": "int32"
          },
          "treeForecast": {
            "type": "boolean"
          }
        }
      },
      "DatasetPlanningUnit_InternalView": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel_InternalView"
          },
          "consumptionDataType": {
            "type": "integer",
            "format": "int32"
          },
          "consumptionNotes": {
            "type": "string"
          },
          "consuptionForecast": {
            "type": "boolean"
          },
          "existingShipments": {
            "type": "integer",
            "format": "int32"
          },
          "higherThenConsumptionThreshold": {
            "type": "number",
            "format": "double"
          },
          "lowerThenConsumptionThreshold": {
            "type": "number",
            "format": "double"
          },
          "monthsOfStock": {
            "type": "integer",
            "format": "int32"
          },
          "otherUnit": {
            "$ref": "#/components/schemas/SimpleObjectWithMultiplier_InternalView"
          },
          "planningUnit": {
            "$ref": "#/components/schemas/SimplePlanningUnitObject_InternalView"
          },
          "planningUnitNotes": {
            "type": "string"
          },
          "price": {
            "type": "number",
            "format": "double"
          },
          "procurementAgent": {
            "$ref": "#/components/schemas/SimpleCodeObject_InternalView"
          },
          "programPlanningUnitId": {
            "type": "integer",
            "format": "int32"
          },
          "selectedForecastMap": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/SelectedForecast_InternalView"
            }
          },
          "stock": {
            "type": "integer",
            "format": "int32"
          },
          "treeForecast": {
            "type": "boolean"
          }
        }
      },
      "DatasetTree_InternalView": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel_InternalView"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser_InternalView"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "forecastMethod": {
            "$ref": "#/components/schemas/SimpleObjectWithType_InternalView"
          },
          "label": {
            "$ref": "#/components/schemas/Label_InternalView"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser_InternalView"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "levelList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TreeLevel_InternalView"
            }
          },
          "notes": {
            "type": "string"
          },
          "regionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleObject_InternalView"
            }
          },
          "scenarioList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TreeScenario_InternalView"
            }
          },
          "tree": {
            "$ref": "#/components/schemas/ForecastTreeTreeNode_InternalView"
          },
          "treeAnchorId": {
            "type": "integer",
            "format": "int32"
          },
          "treeId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "DatasetVersionListInput_ReportView": {
        "type": "object"
      },
      "Dimension": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "dimensionId": {
            "type": "integer",
            "format": "int32"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "DownwardAggregation": {
        "type": "object",
        "properties": {
          "nodeId": {
            "type": "integer",
            "format": "int32"
          },
          "scenarioId": {
            "type": "integer",
            "format": "int32"
          },
          "treeId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "DownwardAggregation_InternalView": {
        "type": "object",
        "properties": {
          "nodeId": {
            "type": "integer",
            "format": "int32"
          },
          "scenarioId": {
            "type": "integer",
            "format": "int32"
          },
          "treeId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "DropdownsForStockStatusVerticalOutput_ReportView": {
        "type": "object",
        "properties": {
          "equivalencyUnitList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleEquivalencyUnit_ReportView"
            }
          },
          "planningUnitList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleObjectWithFu_ReportView"
            }
          },
          "realmCountryPlanningUnitList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleObjectWithFu_ReportView"
            }
          }
        }
      },
      "EmailUser": {
        "type": "object",
        "properties": {
          "emailId": {
            "type": "string"
          },
          "hashPassword": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "EquivalencyUnit": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "equivalencyUnitId": {
            "type": "integer",
            "format": "int32"
          },
          "healthAreaList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleCodeObject"
            }
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "notes": {
            "type": "string"
          },
          "program": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          },
          "realm": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          }
        }
      },
      "EquivalencyUnitMapping": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "convertToEu": {
            "type": "number",
            "format": "double"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "equivalencyUnit": {
            "$ref": "#/components/schemas/EquivalencyUnit"
          },
          "equivalencyUnitMappingId": {
            "type": "integer",
            "format": "int32"
          },
          "forecastingUnit": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "notes": {
            "type": "string"
          },
          "program": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          },
          "tracerCategory": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "unit": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          }
        }
      },
      "ExpiredStockInput_ReportView": {
        "type": "object",
        "properties": {
          "includePlannedShipments": {
            "type": "boolean"
          },
          "programId": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "stopDate": {
            "type": "string",
            "format": "date-time"
          },
          "versionId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ExpiredStockOutput_ReportView": {
        "type": "object",
        "properties": {
          "batchHistory": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleBatchQuantityWithTransHistory_ReportView"
            }
          },
          "batchInfo": {
            "$ref": "#/components/schemas/Batch_ReportView"
          },
          "cost": {
            "type": "number",
            "format": "double"
          },
          "expiredQty": {
            "type": "number",
            "format": "double"
          },
          "planningUnit": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "program": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          }
        }
      },
      "ExtendedProductCategory": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "expanded": {
            "type": "boolean"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "productCategoryId": {
            "type": "integer",
            "format": "int32"
          },
          "realm": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          },
          "sortOrder": {
            "type": "string"
          }
        }
      },
      "ExtrapolationData": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "double"
          },
          "ci": {
            "type": "number",
            "format": "double"
          },
          "month": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ExtrapolationDataReportingRate": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "double"
          },
          "ci": {
            "type": "number",
            "format": "double"
          },
          "manualChange": {
            "type": "number",
            "format": "double"
          },
          "month": {
            "type": "string",
            "format": "date-time"
          },
          "reportingRate": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ExtrapolationDataReportingRate_InternalView": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "double"
          },
          "ci": {
            "type": "number",
            "format": "double"
          },
          "manualChange": {
            "type": "number",
            "format": "double"
          },
          "month": {
            "type": "string",
            "format": "date-time"
          },
          "reportingRate": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ExtrapolationData_InternalView": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "double"
          },
          "ci": {
            "type": "number",
            "format": "double"
          },
          "month": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ExtrapolationMethod": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "sortOrder": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ForecastActualConsumption_InternalView": {
        "type": "object",
        "properties": {
          "actualConsumptionId": {
            "type": "integer",
            "format": "int32"
          },
          "adjustedAmount": {
            "type": "number",
            "format": "double"
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser_InternalView"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "daysOfStockOut": {
            "type": "integer",
            "format": "int32"
          },
          "month": {
            "type": "string",
            "format": "date-time"
          },
          "planningUnit": {
            "$ref": "#/components/schemas/SimplePlanningUnitProductCategoryObject_InternalView"
          },
          "puAmount": {
            "type": "number",
            "format": "double"
          },
          "puMultiplier": {
            "type": "number",
            "format": "double"
          },
          "region": {
            "$ref": "#/components/schemas/SimpleObject_InternalView"
          },
          "reportingRate": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ForecastConsumptionExtrapolation_InternalView": {
        "type": "object",
        "properties": {
          "consumptionExtrapolationId": {
            "type": "integer",
            "format": "int32"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser_InternalView"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "extrapolationDataList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtrapolationData_InternalView"
            }
          },
          "extrapolationMethod": {
            "$ref": "#/components/schemas/SimpleObject_InternalView"
          },
          "jsonProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "jsonPropertiesString": {
            "type": "string"
          },
          "notes": {
            "type": "string"
          },
          "planningUnit": {
            "$ref": "#/components/schemas/SimpleObject_InternalView"
          },
          "region": {
            "$ref": "#/components/schemas/SimpleObject_InternalView"
          }
        }
      },
      "ForecastErrorInputNew_ReportView": {
        "type": "object",
        "properties": {
          "daysOfStockOut": {
            "type": "boolean"
          },
          "equivalencyUnitId": {
            "type": "integer",
            "format": "int32"
          },
          "previousMonths": {
            "type": "integer",
            "format": "int32"
          },
          "programId": {
            "type": "integer",
            "format": "int32"
          },
          "regionIdString": {
            "type": "string"
          },
          "regionIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "stopDate": {
            "type": "string",
            "format": "date-time"
          },
          "unitIdString": {
            "type": "string"
          },
          "unitIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "versionId": {
            "type": "integer",
            "format": "int32"
          },
          "viewBy": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ForecastErrorOutput_ReportView": {
        "type": "object",
        "properties": {
          "actualQty": {
            "type": "number",
            "format": "double"
          },
          "errorPerc": {
            "type": "number",
            "format": "double"
          },
          "forecastQty": {
            "type": "number",
            "format": "double"
          },
          "month": {
            "type": "string",
            "format": "date-time"
          },
          "regionData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RegionForecastErrorOutput_ReportView"
            }
          },
          "sumOfAbsDiff": {
            "type": "number",
            "format": "double"
          },
          "sumOfActual": {
            "type": "number",
            "format": "double"
          },
          "sumOfForecast": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ForecastMethod": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "forecastMethodId": {
            "type": "integer",
            "format": "int32"
          },
          "forecastMethodTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ForecastMetricsComparisionInput_ReportView": {
        "type": "object",
        "properties": {
          "planningUnitIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "previousMonths": {
            "type": "integer",
            "format": "int32"
          },
          "programIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "realmCountryIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "realmId": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "tracerCategoryIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "useApprovedSupplyPlanOnly": {
            "type": "boolean"
          }
        }
      },
      "ForecastMetricsComparisionOutput_ReportView": {
        "type": "object",
        "properties": {
          "actual": {
            "type": "boolean"
          },
          "actualConsumption": {
            "type": "number",
            "format": "double"
          },
          "actualConsumptionTotal": {
            "type": "number",
            "format": "double"
          },
          "diffConsumptionTotal": {
            "type": "number",
            "format": "double"
          },
          "forecastError": {
            "type": "number",
            "format": "double"
          },
          "forecastErrorThreshold": {
            "type": "number",
            "format": "double"
          },
          "forecastedConsumption": {
            "type": "number",
            "format": "double"
          },
          "message": {
            "type": "string"
          },
          "monthCount": {
            "type": "integer",
            "format": "int32"
          },
          "planningUnit": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "program": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          }
        }
      },
      "ForecastMetricsMonthlyInput_ReportView": {
        "type": "object",
        "properties": {
          "planningUnitId": {
            "type": "integer",
            "format": "int32"
          },
          "previousMonths": {
            "type": "integer",
            "format": "int32"
          },
          "programId": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "stopDate": {
            "type": "string",
            "format": "date-time"
          },
          "versionId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ForecastMetricsMonthlyOutput_ReportView": {
        "type": "object",
        "properties": {
          "actual": {
            "type": "boolean"
          },
          "actualConsumption": {
            "type": "number",
            "format": "double"
          },
          "actualConsumptionHistory": {
            "type": "number",
            "format": "double"
          },
          "diffConsumptionHistory": {
            "type": "number",
            "format": "double"
          },
          "forecastError": {
            "type": "number",
            "format": "double"
          },
          "forecastedConsumption": {
            "type": "number",
            "format": "double"
          },
          "message": {
            "type": "string"
          },
          "month": {
            "type": "string",
            "format": "date-time"
          },
          "monthCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ForecastNodeTreeNode": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "level": {
            "type": "integer",
            "format": "int32"
          },
          "parent": {
            "type": "integer",
            "format": "int32"
          },
          "payload": {
            "$ref": "#/components/schemas/TreeNode"
          },
          "payloadId": {
            "type": "integer",
            "format": "int32"
          },
          "sortOrder": {
            "type": "string"
          }
        }
      },
      "ForecastNodeTreeNode_DropDownView": {
        "type": "object"
      },
      "ForecastNodeTreeNode_InternalView": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "level": {
            "type": "integer",
            "format": "int32"
          },
          "parent": {
            "type": "integer",
            "format": "int32"
          },
          "payload": {
            "$ref": "#/components/schemas/TreeNode_InternalView"
          },
          "payloadId": {
            "type": "integer",
            "format": "int32"
          },
          "sortOrder": {
            "type": "string"
          }
        }
      },
      "ForecastSummaryInput_ReportView": {
        "type": "object",
        "properties": {
          "programId": {
            "type": "integer",
            "format": "int32"
          },
          "reportView": {
            "type": "integer",
            "format": "int32"
          },
          "versionId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ForecastSummaryOutput_ReportView": {
        "type": "object",
        "properties": {
          "existingShipments": {
            "type": "integer",
            "format": "int32"
          },
          "freightPerc": {
            "type": "number",
            "format": "double"
          },
          "monthsOfStock": {
            "type": "integer",
            "format": "int32"
          },
          "notes": {
            "$ref": "#/components/schemas/Label_ReportView"
          },
          "planningUnit": {
            "$ref": "#/components/schemas/SimpleObjectWithMultiplierAndActive_ReportView"
          },
          "price": {
            "type": "number",
            "format": "double"
          },
          "procurementAgent": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          },
          "region": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "selectedForecast": {
            "$ref": "#/components/schemas/Label_ReportView"
          },
          "stock": {
            "type": "integer",
            "format": "int32"
          },
          "totalForecast": {
            "type": "number",
            "format": "double"
          },
          "tracerCategory": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          }
        }
      },
      "ForecastTreeTreeNode_InternalView": {
        "type": "object",
        "properties": {
          "flatList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ForecastNodeTreeNode_InternalView"
            }
          }
        }
      },
      "ForecastingUnit": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "forecastingUnit": {
            "$ref": "#/components/schemas/ForecastingUnit"
          },
          "forecastingUnitId": {
            "type": "integer",
            "format": "int32"
          },
          "genericLabel": {
            "$ref": "#/components/schemas/Label"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "productCategory": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "realm": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          },
          "tracerCategory": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "unit": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          }
        }
      },
      "ForecastingUnitWithCount_ReportView": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel_ReportView"
          },
          "countOfFcPrograms": {
            "type": "integer",
            "format": "int32"
          },
          "countOfSpPrograms": {
            "type": "integer",
            "format": "int32"
          },
          "forecastingUnit": {
            "$ref": "#/components/schemas/ForecastingUnit_ReportView"
          },
          "forecastingUnitId": {
            "type": "integer",
            "format": "int32"
          },
          "genericLabel": {
            "$ref": "#/components/schemas/Label_ReportView"
          },
          "label": {
            "$ref": "#/components/schemas/Label_ReportView"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser_ReportView"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "productCategory": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "realm": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          },
          "tracerCategory": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "unit": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          }
        }
      },
      "ForecastingUnit_ReportView": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel_ReportView"
          },
          "forecastingUnit": {
            "$ref": "#/components/schemas/ForecastingUnit_ReportView"
          },
          "forecastingUnitId": {
            "type": "integer",
            "format": "int32"
          },
          "genericLabel": {
            "$ref": "#/components/schemas/Label_ReportView"
          },
          "label": {
            "$ref": "#/components/schemas/Label_ReportView"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser_ReportView"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "productCategory": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "realm": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          },
          "tracerCategory": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "unit": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          }
        }
      },
      "FundingSource": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "allowedInBudget": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "fundingSourceCode": {
            "type": "string"
          },
          "fundingSourceId": {
            "type": "integer",
            "format": "int32"
          },
          "fundingSourceType": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "programList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleObject"
            }
          },
          "realm": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          }
        }
      },
      "FundingSourceShipmentReportInput_ReportView": {
        "type": "object",
        "properties": {
          "fundingSourceIdString": {
            "type": "string"
          },
          "fundingSourceIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "includePlannedShipments": {
            "type": "boolean"
          },
          "planningUnitIdString": {
            "type": "string"
          },
          "planningUnitIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "programId": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "stopDate": {
            "type": "string",
            "format": "date-time"
          },
          "versionId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "FundingSourceShipmentReportOutput_ReportView": {
        "type": "object",
        "properties": {
          "freightCost": {
            "type": "number",
            "format": "double"
          },
          "freightPerc": {
            "type": "number",
            "format": "double"
          },
          "fundingSource": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          },
          "fundingSourceType": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          },
          "planningUnit": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "productCost": {
            "type": "number",
            "format": "double"
          },
          "qty": {
            "type": "number",
            "format": "double"
          },
          "totalCost": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "FundingSourceType": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "fundingSourceTypeCode": {
            "type": "string"
          },
          "fundingSourceTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "realm": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          }
        }
      },
      "FundingSource_ReportView": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "allowedInBudget": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel_ReportView"
          },
          "fundingSourceCode": {
            "type": "string"
          },
          "fundingSourceId": {
            "type": "integer",
            "format": "int32"
          },
          "fundingSourceType": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          },
          "label": {
            "$ref": "#/components/schemas/Label_ReportView"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser_ReportView"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "programList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleObject_ReportView"
            }
          },
          "realm": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          }
        }
      },
      "GlobalConsumptionInput_ReportView": {
        "type": "object",
        "properties": {
          "planningUnitIdString": {
            "type": "string"
          },
          "planningUnitIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "programIdString": {
            "type": "string"
          },
          "programIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "realmCountryIdString": {
            "type": "string"
          },
          "realmCountryIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "realmId": {
            "type": "integer",
            "format": "int32"
          },
          "reportView": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "stopDate": {
            "type": "string",
            "format": "date-time"
          },
          "useApprovedSupplyPlanOnly": {
            "type": "boolean"
          }
        }
      },
      "GlobalConsumptionOutput_ReportView": {
        "type": "object",
        "properties": {
          "countryConsumption": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/CountryConsumptionData_ReportView"
            }
          },
          "totalActualConsumption": {
            "type": "number",
            "format": "double"
          },
          "totalConsumption": {
            "type": "number",
            "format": "double"
          },
          "totalForecastedConsumption": {
            "type": "number",
            "format": "double"
          },
          "transDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "HealthArea": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "healthAreaCode": {
            "type": "string"
          },
          "healthAreaId": {
            "type": "integer",
            "format": "int32"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "realm": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          },
          "realmCountryArray": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "HealthAreaAndRealmCountryDTO_DropDownView": {
        "type": "object",
        "properties": {
          "healthAreaId": {
            "type": "integer",
            "format": "int32"
          },
          "realmCountryId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Integration": {
        "type": "object",
        "properties": {
          "fileName": {
            "type": "string"
          },
          "folderLocation": {
            "type": "string"
          },
          "integrationId": {
            "type": "integer",
            "format": "int32"
          },
          "integrationName": {
            "type": "string"
          },
          "integrationView": {
            "$ref": "#/components/schemas/IntegrationView"
          },
          "realm": {
            "$ref": "#/components/schemas/SimpleObject"
          }
        }
      },
      "IntegrationProgram": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "integration": {
            "$ref": "#/components/schemas/Integration"
          },
          "integrationProgramId": {
            "type": "integer",
            "format": "int32"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "program": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "versionStatus": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "versionType": {
            "$ref": "#/components/schemas/SimpleObject"
          }
        }
      },
      "IntegrationView": {
        "type": "object",
        "properties": {
          "integrationViewDesc": {
            "type": "string"
          },
          "integrationViewId": {
            "type": "integer",
            "format": "int32"
          },
          "integrationViewName": {
            "type": "string"
          }
        }
      },
      "InventoryBatchInfo_InternalView": {
        "type": "object",
        "properties": {
          "actualQty": {
            "type": "number",
            "format": "double"
          },
          "adjustmentQty": {
            "type": "number",
            "format": "double"
          },
          "batch": {
            "$ref": "#/components/schemas/Batch_InternalView"
          },
          "inventoryTransBatchInfoId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "InventoryInfo_ReportView": {
        "type": "object",
        "properties": {
          "dataSource": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "inventoryDate": {
            "type": "string",
            "format": "date-time"
          },
          "inventoryId": {
            "type": "integer",
            "format": "int32"
          },
          "notes": {
            "type": "string"
          },
          "planningUnit": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "program": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          },
          "region": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          }
        }
      },
      "InventoryTurnsInput_ReportView": {
        "type": "object",
        "properties": {
          "dt": {
            "type": "string",
            "format": "date-time"
          },
          "includePlannedShipments": {
            "type": "boolean"
          },
          "productCategoryIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "programIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "useApprovedSupplyPlanOnly": {
            "type": "boolean"
          },
          "viewBy": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "InventoryTurnsOutput_ReportView": {
        "type": "object",
        "properties": {
          "absDelta": {
            "type": "number",
            "format": "double"
          },
          "avergeStock": {
            "type": "number",
            "format": "double"
          },
          "delta": {
            "type": "number",
            "format": "double"
          },
          "inventoryTurns": {
            "type": "number",
            "format": "double"
          },
          "mape": {
            "type": "number",
            "format": "double"
          },
          "minMonthsOfStock": {
            "type": "integer",
            "format": "int32"
          },
          "mse": {
            "type": "number",
            "format": "double"
          },
          "noOfMonths": {
            "type": "integer",
            "format": "int32"
          },
          "plannedInventoryTurns": {
            "type": "number",
            "format": "double"
          },
          "planningUnit": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "productCategory": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "program": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          },
          "realmCountry": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "reorderFrequencyInMonths": {
            "type": "integer",
            "format": "int32"
          },
          "totalConsumption": {
            "type": "number",
            "format": "double"
          },
          "totalMonthsOfPlannedConsumption": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Inventory_InternalView": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "actualQty": {
            "type": "number",
            "format": "double"
          },
          "adjustmentQty": {
            "type": "number",
            "format": "double"
          },
          "batchInfoList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryBatchInfo_InternalView"
            }
          },
          "conversionFactor": {
            "type": "number",
            "format": "double"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser_InternalView"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "dataSource": {
            "$ref": "#/components/schemas/SimpleObject_InternalView"
          },
          "expectedBal": {
            "type": "number",
            "format": "double"
          },
          "inventoryDate": {
            "type": "string"
          },
          "inventoryId": {
            "type": "integer",
            "format": "int32"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser_InternalView"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "multiplier": {
            "type": "number",
            "format": "double"
          },
          "notes": {
            "type": "string"
          },
          "planningUnit": {
            "$ref": "#/components/schemas/SimplePlanningUnitProductCategoryObject_InternalView"
          },
          "realmCountryPlanningUnit": {
            "$ref": "#/components/schemas/SimpleObject_InternalView"
          },
          "region": {
            "$ref": "#/components/schemas/SimpleObject_InternalView"
          },
          "versionId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "JiraServiceDeskIssuesDTO": {
        "type": "object",
        "properties": {
          "addressedIssues": {
            "type": "integer",
            "format": "int32"
          },
          "openIssues": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "JwtTokenRequest": {
        "type": "object",
        "properties": {
          "languageChanged": {
            "type": "boolean"
          },
          "languageCode": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "Label": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "labelId": {
            "type": "integer",
            "format": "int32"
          },
          "label_en": {
            "type": "string"
          },
          "label_fr": {
            "type": "string"
          },
          "label_pr": {
            "type": "string"
          },
          "label_sp": {
            "type": "string"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Label_DropDown2View": {
        "type": "object",
        "properties": {
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel_DropDown2View"
          },
          "labelId": {
            "type": "integer",
            "format": "int32"
          },
          "label_en": {
            "type": "string"
          },
          "label_fr": {
            "type": "string"
          },
          "label_pr": {
            "type": "string"
          },
          "label_sp": {
            "type": "string"
          }
        }
      },
      "Label_DropDownView": {
        "type": "object",
        "properties": {
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel_DropDownView"
          },
          "labelId": {
            "type": "integer",
            "format": "int32"
          },
          "label_en": {
            "type": "string"
          },
          "label_fr": {
            "type": "string"
          },
          "label_pr": {
            "type": "string"
          },
          "label_sp": {
            "type": "string"
          }
        }
      },
      "Label_InternalView": {
        "type": "object",
        "properties": {
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel_InternalView"
          },
          "labelId": {
            "type": "integer",
            "format": "int32"
          },
          "label_en": {
            "type": "string"
          },
          "label_fr": {
            "type": "string"
          },
          "label_pr": {
            "type": "string"
          },
          "label_sp": {
            "type": "string"
          }
        }
      },
      "Label_ReportView": {
        "type": "object",
        "properties": {
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel_ReportView"
          },
          "label_en": {
            "type": "string"
          },
          "label_fr": {
            "type": "string"
          },
          "label_pr": {
            "type": "string"
          },
          "label_sp": {
            "type": "string"
          }
        }
      },
      "Label_UserListView": {
        "type": "object",
        "properties": {
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel_UserListView"
          },
          "labelId": {
            "type": "integer",
            "format": "int32"
          },
          "label_en": {
            "type": "string"
          },
          "label_fr": {
            "type": "string"
          },
          "label_pr": {
            "type": "string"
          },
          "label_sp": {
            "type": "string"
          }
        }
      },
      "Language": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "countryCode": {
            "type": "string"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "languageCode": {
            "type": "string"
          },
          "languageId": {
            "type": "integer",
            "format": "int32"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "LanguageUser": {
        "type": "object",
        "properties": {
          "languageCode": {
            "type": "string"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Language_UserListView": {
        "type": "object",
        "properties": {
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel_UserListView"
          },
          "countryCode": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label_UserListView"
          },
          "languageCode": {
            "type": "string"
          },
          "languageId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "LoadProgram": {
        "type": "object",
        "properties": {
          "currentPage": {
            "type": "integer",
            "format": "int32"
          },
          "healthArea": {
            "type": "array",
            "writeOnly": true,
            "items": {
              "$ref": "#/components/schemas/SimpleCodeObject"
            }
          },
          "healthAreaIdList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "healthAreaList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleCodeObject"
            }
          },
          "maxPages": {
            "type": "integer",
            "format": "int32"
          },
          "organisation": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          },
          "program": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          },
          "realmCountry": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          },
          "versionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LoadVersion"
            }
          }
        }
      },
      "LoadProgramInput_InternalView": {
        "type": "object",
        "properties": {
          "cutOffDate": {
            "type": "string"
          },
          "programId": {
            "type": "integer",
            "format": "int32"
          },
          "versionId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "LoadProgram_InternalView": {
        "type": "object",
        "properties": {
          "currentPage": {
            "type": "integer",
            "format": "int32"
          },
          "healthArea": {
            "type": "array",
            "writeOnly": true,
            "items": {
              "$ref": "#/components/schemas/SimpleCodeObject_InternalView"
            }
          },
          "healthAreaIdList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "healthAreaList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleCodeObject_InternalView"
            }
          },
          "maxPages": {
            "type": "integer",
            "format": "int32"
          },
          "organisation": {
            "$ref": "#/components/schemas/SimpleCodeObject_InternalView"
          },
          "program": {
            "$ref": "#/components/schemas/SimpleCodeObject_InternalView"
          },
          "realmCountry": {
            "$ref": "#/components/schemas/SimpleCodeObject_InternalView"
          },
          "versionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LoadVersion_InternalView"
            }
          }
        }
      },
      "LoadVersion": {
        "type": "object",
        "properties": {
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "forecastStartDate": {
            "type": "string",
            "format": "date-time"
          },
          "forecastStopDate": {
            "type": "string",
            "format": "date-time"
          },
          "notes": {
            "type": "string"
          },
          "versionId": {
            "type": "string"
          },
          "versionStatus": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "versionType": {
            "$ref": "#/components/schemas/SimpleObject"
          }
        }
      },
      "LoadVersion_InternalView": {
        "type": "object",
        "properties": {
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser_InternalView"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "forecastStartDate": {
            "type": "string",
            "format": "date-time"
          },
          "forecastStopDate": {
            "type": "string",
            "format": "date-time"
          },
          "notes": {
            "type": "string"
          },
          "versionId": {
            "type": "string"
          },
          "versionStatus": {
            "$ref": "#/components/schemas/SimpleObject_InternalView"
          },
          "versionType": {
            "$ref": "#/components/schemas/SimpleObject_InternalView"
          }
        }
      },
      "ManualIntegration": {
        "type": "object",
        "properties": {
          "completedDate": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "fileName": {
            "type": "string"
          },
          "folderName": {
            "type": "string"
          },
          "integrationId": {
            "type": "integer",
            "format": "int32"
          },
          "integrationName": {
            "type": "string"
          },
          "integrationViewId": {
            "type": "integer",
            "format": "int32"
          },
          "integrationViewName": {
            "type": "string"
          },
          "manualIntegrationId": {
            "type": "integer",
            "format": "int32"
          },
          "program": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          },
          "versionId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ManualIntegration_ReportView": {
        "type": "object",
        "properties": {
          "completedDate": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser_ReportView"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "integrationId": {
            "type": "integer",
            "format": "int32"
          },
          "integrationName": {
            "type": "string"
          },
          "manualIntegrationId": {
            "type": "integer",
            "format": "int32"
          },
          "program": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          },
          "versionId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ManualJsonPushReportInput_ReportView": {
        "type": "object",
        "properties": {
          "programIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "programIdsString": {
            "type": "string"
          },
          "realmCountryIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "realmCountryIdsString": {
            "type": "string"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "startDateString": {
            "type": "string"
          },
          "stopDate": {
            "type": "string",
            "format": "date-time"
          },
          "stopDateString": {
            "type": "string"
          }
        }
      },
      "ManualProblem": {
        "type": "object",
        "properties": {
          "data5": {
            "type": "string"
          },
          "dt": {
            "type": "string"
          },
          "notes": {
            "type": "string"
          },
          "planningUnit": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "problemStatus": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "program": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          },
          "realmProblem": {
            "$ref": "#/components/schemas/RealmProblem"
          },
          "region": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "reviewed": {
            "type": "boolean"
          },
          "reviewedNotes": {
            "type": "string"
          },
          "shipmentId": {
            "type": "integer",
            "format": "int32"
          },
          "versionId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "MastersSync": {
        "type": "object",
        "properties": {
          "budgetList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Budget"
            }
          },
          "countryList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Country"
            }
          },
          "currencyList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Currency"
            }
          },
          "dataSourceList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataSource"
            }
          },
          "dataSourceTypeList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataSourceType"
            }
          },
          "dimensionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Dimension"
            }
          },
          "equivalencyUnitMappingList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EquivalencyUnitMapping"
            }
          },
          "extrapolationMethodList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtrapolationMethod"
            }
          },
          "forecastMethodList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ForecastMethod"
            }
          },
          "forecastMethodTypeList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleBaseModel"
            }
          },
          "forecastingUnitList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ForecastingUnit"
            }
          },
          "fundingSourceList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FundingSource"
            }
          },
          "fundingSourceType": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FundingSourceType"
            }
          },
          "healthAreaList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HealthArea"
            }
          },
          "languageList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Language"
            }
          },
          "modelingTypeList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModelingType"
            }
          },
          "nodeTypeList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodeTypeSync"
            }
          },
          "organisationList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Organisation"
            }
          },
          "organisationTypeList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganisationType"
            }
          },
          "planningUnitList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlanningUnit"
            }
          },
          "problemCategoryList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleObject"
            }
          },
          "problemCriticalityList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleObject"
            }
          },
          "problemStatusList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProblemStatus"
            }
          },
          "procurementAgentForecastingUnitList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProcurementAgentForecastingUnit"
            }
          },
          "procurementAgentList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProcurementAgent"
            }
          },
          "procurementAgentPlanningUnitList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProcurementAgentPlanningUnit"
            }
          },
          "procurementAgentProcurementUnitList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProcurementAgentProcurementUnit"
            }
          },
          "procurementAgentyType": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProcurementAgentType"
            }
          },
          "procurementUnitList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProcurementUnit"
            }
          },
          "productCategoryList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodeExtendedProductCategory"
            }
          },
          "programList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Program"
            }
          },
          "programPlanningUnitList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProgramPlanningUnit"
            }
          },
          "realmCountryList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RealmCountry"
            }
          },
          "realmCountryPlanningUnitList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RealmCountryPlanningUnit"
            }
          },
          "realmList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Realm"
            }
          },
          "realmProblemList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RealmProblem"
            }
          },
          "regionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Region"
            }
          },
          "shipmentStatusList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShipmentStatus"
            }
          },
          "tracerCategoryList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TracerCategory"
            }
          },
          "treeTemplateList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TreeTemplate"
            }
          },
          "unitList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Unit"
            }
          },
          "usagePeriodList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UsagePeriod"
            }
          },
          "usageTemplateList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UsageTemplate"
            }
          },
          "usageTypeList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleBaseModel"
            }
          },
          "versionStatusList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleObject"
            }
          },
          "versionTypeList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleObject"
            }
          }
        }
      },
      "ModelingType": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "modelingTypeId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "MonthlyForecastData_ReportView": {
        "type": "object",
        "properties": {
          "consumptionQty": {
            "type": "number",
            "format": "double"
          },
          "month": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "MonthlyForecastInput_ReportView": {
        "type": "object",
        "properties": {
          "aggregateByYear": {
            "type": "boolean"
          },
          "programId": {
            "type": "integer",
            "format": "int32"
          },
          "reportView": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "stopDate": {
            "type": "string",
            "format": "date-time"
          },
          "unitIdString": {
            "type": "string"
          },
          "unitIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "versionId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "MonthlyForecastOutput_ReportView": {
        "type": "object",
        "properties": {
          "forecastingUnit": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "monthlyForecastData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MonthlyForecastData_ReportView"
            }
          },
          "planningUnit": {
            "$ref": "#/components/schemas/SimpleObjectWithMultiplier_ReportView"
          },
          "region": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "selectedForecast": {
            "$ref": "#/components/schemas/Label_ReportView"
          }
        }
      },
      "MultipleProgramAndTracerCategoryDTO_DropDownView": {
        "type": "object",
        "properties": {
          "programIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "programIdsString": {
            "type": "string"
          },
          "tracerCategoryIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tracerCategoryIdsString": {
            "type": "string"
          }
        }
      },
      "Node": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "level": {
            "type": "integer",
            "format": "int32"
          },
          "parentId": {
            "type": "integer",
            "format": "int32"
          },
          "payload": {
            "type": "object"
          },
          "payloadId": {
            "type": "integer",
            "format": "int32"
          },
          "sortOrder": {
            "type": "string"
          }
        }
      },
      "NodeDataExtrapolation": {
        "type": "object",
        "properties": {
          "extrapolationDataList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtrapolationDataReportingRate"
            }
          },
          "extrapolationMethod": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "nodeDataExtapolationId": {
            "type": "integer",
            "format": "int32"
          },
          "notes": {
            "type": "string"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "stopDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "NodeDataExtrapolationOption": {
        "type": "object",
        "properties": {
          "extrapolationMethod": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "extrapolationOptionDataList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtrapolationData"
            }
          },
          "jsonProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "jsonPropertiesString": {
            "type": "string"
          },
          "nodeDataExtapolationOptionId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "NodeDataExtrapolationOption_InternalView": {
        "type": "object",
        "properties": {
          "extrapolationMethod": {
            "$ref": "#/components/schemas/SimpleObject_InternalView"
          },
          "extrapolationOptionDataList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtrapolationData_InternalView"
            }
          },
          "jsonProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "jsonPropertiesString": {
            "type": "string"
          },
          "nodeDataExtapolationOptionId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "NodeDataExtrapolation_InternalView": {
        "type": "object",
        "properties": {
          "extrapolationDataList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtrapolationDataReportingRate_InternalView"
            }
          },
          "extrapolationMethod": {
            "$ref": "#/components/schemas/SimpleObject_InternalView"
          },
          "nodeDataExtapolationId": {
            "type": "integer",
            "format": "int32"
          },
          "notes": {
            "type": "string"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "stopDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "NodeDataModeling": {
        "type": "object",
        "properties": {
          "dataValue": {
            "type": "number",
            "format": "double"
          },
          "increaseDecrease": {
            "type": "integer",
            "format": "int32"
          },
          "modelingSource": {
            "type": "integer",
            "format": "int32"
          },
          "modelingType": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "nodeDataModelingId": {
            "type": "integer",
            "format": "int32"
          },
          "notes": {
            "type": "string"
          },
          "startDate": {
            "type": "string"
          },
          "startDateNo": {
            "type": "integer",
            "format": "int32"
          },
          "stopDate": {
            "type": "string"
          },
          "stopDateNo": {
            "type": "integer",
            "format": "int32"
          },
          "transferNodeDataId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "NodeDataModeling_InternalView": {
        "type": "object",
        "properties": {
          "dataValue": {
            "type": "number",
            "format": "double"
          },
          "increaseDecrease": {
            "type": "integer",
            "format": "int32"
          },
          "modelingSource": {
            "type": "integer",
            "format": "int32"
          },
          "modelingType": {
            "$ref": "#/components/schemas/SimpleObject_InternalView"
          },
          "nodeDataModelingId": {
            "type": "integer",
            "format": "int32"
          },
          "notes": {
            "type": "string"
          },
          "startDate": {
            "type": "string"
          },
          "startDateNo": {
            "type": "integer",
            "format": "int32"
          },
          "stopDate": {
            "type": "string"
          },
          "stopDateNo": {
            "type": "integer",
            "format": "int32"
          },
          "transferNodeDataId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "NodeDataMom": {
        "type": "object",
        "properties": {
          "calculatedMmdValue": {
            "type": "number",
            "format": "double"
          },
          "calculatedValue": {
            "type": "number",
            "format": "double"
          },
          "difference": {
            "type": "number",
            "format": "double"
          },
          "endValue": {
            "type": "number",
            "format": "double"
          },
          "manualChange": {
            "type": "number",
            "format": "double"
          },
          "month": {
            "type": "string"
          },
          "nodeDataMomId": {
            "type": "integer",
            "format": "int32"
          },
          "seasonalityPerc": {
            "type": "number",
            "format": "double"
          },
          "startValue": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "NodeDataMom_InternalView": {
        "type": "object",
        "properties": {
          "calculatedMmdValue": {
            "type": "number",
            "format": "double"
          },
          "calculatedValue": {
            "type": "number",
            "format": "double"
          },
          "difference": {
            "type": "number",
            "format": "double"
          },
          "endValue": {
            "type": "number",
            "format": "double"
          },
          "manualChange": {
            "type": "number",
            "format": "double"
          },
          "month": {
            "type": "string"
          },
          "nodeDataMomId": {
            "type": "integer",
            "format": "int32"
          },
          "seasonalityPerc": {
            "type": "number",
            "format": "double"
          },
          "startValue": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "NodeDataOverride": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "manualChange": {
            "type": "number",
            "format": "double"
          },
          "month": {
            "type": "string",
            "format": "date-time"
          },
          "monthNo": {
            "type": "integer",
            "format": "int32"
          },
          "nodeDataOverrideId": {
            "type": "integer",
            "format": "int32"
          },
          "seasonalityPerc": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "NodeDataOverride_InternalView": {
        "type": "object",
        "properties": {
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel_InternalView"
          },
          "manualChange": {
            "type": "number",
            "format": "double"
          },
          "month": {
            "type": "string",
            "format": "date-time"
          },
          "monthNo": {
            "type": "integer",
            "format": "int32"
          },
          "nodeDataOverrideId": {
            "type": "integer",
            "format": "int32"
          },
          "seasonalityPerc": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "NodeExtendedProductCategory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "level": {
            "type": "integer",
            "format": "int32"
          },
          "parentId": {
            "type": "integer",
            "format": "int32"
          },
          "payload": {
            "$ref": "#/components/schemas/ExtendedProductCategory"
          },
          "payloadId": {
            "type": "integer",
            "format": "int32"
          },
          "sortOrder": {
            "type": "string"
          }
        }
      },
      "NodeType": {
        "type": "object",
        "properties": {
          "extrapolationAllowed": {
            "type": "boolean"
          },
          "forecastTreeAllowed": {
            "type": "boolean"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "modelingAllowed": {
            "type": "boolean"
          },
          "treeTemplateAllowed": {
            "type": "boolean"
          }
        }
      },
      "NodeTypeSync": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "allowedChildList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "extrapolationAllowed": {
            "type": "boolean"
          },
          "forecastTreeAllowed": {
            "type": "boolean"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "modelingAllowed": {
            "type": "boolean"
          },
          "treeTemplateAllowed": {
            "type": "boolean"
          }
        }
      },
      "NodeType_InternalView": {
        "type": "object",
        "properties": {
          "extrapolationAllowed": {
            "type": "boolean"
          },
          "forecastTreeAllowed": {
            "type": "boolean"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "label": {
            "$ref": "#/components/schemas/Label_InternalView"
          },
          "modelingAllowed": {
            "type": "boolean"
          },
          "treeTemplateAllowed": {
            "type": "boolean"
          }
        }
      },
      "Organisation": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "organisationCode": {
            "type": "string"
          },
          "organisationId": {
            "type": "integer",
            "format": "int32"
          },
          "organisationType": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "realm": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          },
          "realmCountryArray": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "OrganisationType": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "organisationTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "realm": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          }
        }
      },
      "Password": {
        "type": "object",
        "properties": {
          "emailId": {
            "type": "string"
          },
          "newPassword": {
            "type": "string"
          },
          "oldPassword": {
            "type": "string"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Pipeline": {
        "type": "object",
        "properties": {
          "commodityprice": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PplCommodityprice"
            }
          },
          "consumption": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PplConsumption"
            }
          },
          "datasource": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PplDatasource"
            }
          },
          "fundingsource": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PplFundingsource"
            }
          },
          "inventory": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PplInventory"
            }
          },
          "method": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PplMethod"
            }
          },
          "monthlystockarchive": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PplMonthlystockarchive"
            }
          },
          "paste_errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PplPasterrors"
            }
          },
          "product": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PplProduct"
            }
          },
          "productfreightcost": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PplProductfreightcost"
            }
          },
          "productsuppliercasesize": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PplProductsuppliercasesize"
            }
          },
          "programinfo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PplPrograminfo"
            }
          },
          "shipment": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PplShipment"
            }
          },
          "source": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PplSource"
            }
          },
          "tblbe_version": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PplTblbe_version"
            }
          },
          "tblimportproducts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PplTblimportproducts"
            }
          },
          "tblimportrecords": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PplTblimportrecords"
            }
          }
        }
      },
      "PlanningUnit": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "forecastingUnit": {
            "$ref": "#/components/schemas/ForecastingUnit"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "multiplier": {
            "type": "number",
            "format": "double"
          },
          "planningUnitId": {
            "type": "integer",
            "format": "int32"
          },
          "unit": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          }
        }
      },
      "PlanningUnitCapacity": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "capacity": {
            "type": "number",
            "format": "double"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "planningUnit": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "planningUnitCapacityId": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string"
          },
          "stopDate": {
            "type": "string"
          },
          "supplier": {
            "$ref": "#/components/schemas/SimpleObject"
          }
        }
      },
      "PlanningUnitWithCount_ReportView": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel_ReportView"
          },
          "countOfFcPrograms": {
            "type": "integer",
            "format": "int32"
          },
          "countOfSpPrograms": {
            "type": "integer",
            "format": "int32"
          },
          "forecastingUnit": {
            "$ref": "#/components/schemas/ForecastingUnit_ReportView"
          },
          "label": {
            "$ref": "#/components/schemas/Label_ReportView"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser_ReportView"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "multiplier": {
            "type": "number",
            "format": "double"
          },
          "planningUnitId": {
            "type": "integer",
            "format": "int32"
          },
          "unit": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          }
        }
      },
      "PlanningUnitWithPrices_ReportView": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel_ReportView"
          },
          "forecastingUnit": {
            "$ref": "#/components/schemas/ForecastingUnit_ReportView"
          },
          "label": {
            "$ref": "#/components/schemas/Label_ReportView"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser_ReportView"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "multiplier": {
            "type": "number",
            "format": "double"
          },
          "planningUnitId": {
            "type": "integer",
            "format": "int32"
          },
          "procurementAgentPriceList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleObjectPrice_ReportView"
            }
          },
          "unit": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          }
        }
      },
      "PlanningUnit_ReportView": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel_ReportView"
          },
          "forecastingUnit": {
            "$ref": "#/components/schemas/ForecastingUnit_ReportView"
          },
          "label": {
            "$ref": "#/components/schemas/Label_ReportView"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser_ReportView"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "multiplier": {
            "type": "number",
            "format": "double"
          },
          "planningUnitId": {
            "type": "integer",
            "format": "int32"
          },
          "unit": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          }
        }
      },
      "PplCommodityprice": {
        "type": "object",
        "properties": {
          "dtmchanged": {
            "type": "string",
            "format": "date-time"
          },
          "dtmeffective": {
            "type": "string",
            "format": "date-time"
          },
          "fuserdefined": {
            "type": "boolean"
          },
          "note": {
            "type": "string"
          },
          "pipelineId": {
            "type": "integer",
            "format": "int32"
          },
          "productid": {
            "type": "string"
          },
          "supplierid": {
            "type": "string"
          },
          "unitprice": {
            "type": "number",
            "format": "double"
          },
          "user": {
            "type": "string"
          }
        }
      },
      "PplConsumption": {
        "type": "object",
        "properties": {
          "conDate": {
            "type": "string"
          },
          "consactualflag": {
            "type": "boolean"
          },
          "consamount": {
            "type": "number",
            "format": "double"
          },
          "consdatasourceid": {
            "type": "string"
          },
          "consdatechanged": {
            "type": "string",
            "format": "date-time"
          },
          "consdisplaynote": {
            "type": "boolean"
          },
          "consid": {
            "type": "integer",
            "format": "int32"
          },
          "consiflator": {
            "type": "number",
            "format": "double"
          },
          "consnote": {
            "type": "string"
          },
          "consnummonths": {
            "type": "integer",
            "format": "int32"
          },
          "consstartmonth": {
            "type": "integer",
            "format": "int32"
          },
          "consstartyear": {
            "type": "integer",
            "format": "int32"
          },
          "old_consumption": {
            "type": "number",
            "format": "double"
          },
          "pipelineId": {
            "type": "integer",
            "format": "int32"
          },
          "productid": {
            "type": "string"
          }
        }
      },
      "PplDatasource": {
        "type": "object",
        "properties": {
          "datasourceid": {
            "type": "string"
          },
          "datasourcename": {
            "type": "string"
          },
          "datasourcetypeid": {
            "type": "string"
          },
          "pipelineId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "PplFundingsource": {
        "type": "object",
        "properties": {
          "fundingnote": {
            "type": "string"
          },
          "fundingsourceid": {
            "type": "string"
          },
          "fundingsourcename": {
            "type": "string"
          },
          "pipelineId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "PplInventory": {
        "type": "object",
        "properties": {
          "ctrindex": {
            "type": "integer",
            "format": "int32"
          },
          "fimported": {
            "type": "boolean"
          },
          "invamount": {
            "type": "number",
            "format": "double"
          },
          "invdatasourceid": {
            "type": "string"
          },
          "invdatechanged": {
            "type": "string",
            "format": "date-time"
          },
          "invdisplaynote": {
            "type": "boolean"
          },
          "inventoryDate": {
            "type": "string"
          },
          "invnote": {
            "type": "string"
          },
          "invtransferflag": {
            "type": "boolean"
          },
          "old_inventory": {
            "type": "number",
            "format": "double"
          },
          "period": {
            "type": "string",
            "format": "date-time"
          },
          "pipelineId": {
            "type": "integer",
            "format": "int32"
          },
          "productid": {
            "type": "string"
          }
        }
      },
      "PplMethod": {
        "type": "object",
        "properties": {
          "categoryid": {
            "type": "integer",
            "format": "int32"
          },
          "cypfactor": {
            "type": "number",
            "format": "double"
          },
          "frollup": {
            "type": "boolean"
          },
          "methodid": {
            "type": "string"
          },
          "methodname": {
            "type": "string"
          },
          "methodnote": {
            "type": "string"
          },
          "parentid": {
            "type": "integer",
            "format": "int32"
          },
          "pipelineId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "PplMonthlystockarchive": {
        "type": "object",
        "properties": {
          "eoybalance": {
            "type": "number",
            "format": "double"
          },
          "pipelineId": {
            "type": "integer",
            "format": "int32"
          },
          "productid": {
            "type": "string"
          },
          "stockmonth": {
            "type": "integer",
            "format": "int32"
          },
          "stockyear": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "PplPasterrors": {
        "type": "object",
        "properties": {
          "f1": {
            "type": "string"
          },
          "f2": {
            "type": "string"
          },
          "f3": {
            "type": "number",
            "format": "double"
          },
          "pipelineId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "PplProduct": {
        "type": "object",
        "properties": {
          "buconversion": {
            "type": "integer",
            "format": "int32"
          },
          "dbllowestunitqty": {
            "type": "number",
            "format": "double"
          },
          "defaultcasesize": {
            "type": "integer",
            "format": "int32"
          },
          "famcchanged": {
            "type": "boolean"
          },
          "favailabilitystatus": {
            "type": "boolean"
          },
          "fpermittedincountry": {
            "type": "boolean"
          },
          "fuserdefined": {
            "type": "boolean"
          },
          "lngamcmonths": {
            "type": "integer",
            "format": "int32"
          },
          "lngamcstart": {
            "type": "integer",
            "format": "int32"
          },
          "lngbatch": {
            "type": "integer",
            "format": "int32"
          },
          "memavailabilitynotes": {
            "type": "string"
          },
          "methodid": {
            "type": "string"
          },
          "oldmethodid": {
            "type": "string"
          },
          "oldproductid": {
            "type": "string"
          },
          "oldproductname": {
            "type": "string"
          },
          "pipelineId": {
            "type": "integer",
            "format": "int32"
          },
          "prodcmax": {
            "type": "integer",
            "format": "int32"
          },
          "prodcmin": {
            "type": "integer",
            "format": "int32"
          },
          "proddesstock": {
            "type": "integer",
            "format": "int32"
          },
          "productactivedate": {
            "type": "string",
            "format": "date-time"
          },
          "productactiveflag": {
            "type": "boolean"
          },
          "productid": {
            "type": "string"
          },
          "productmaxmonths": {
            "type": "integer",
            "format": "int32"
          },
          "productminmonths": {
            "type": "integer",
            "format": "int32"
          },
          "productname": {
            "type": "string"
          },
          "productnote": {
            "type": "string"
          },
          "strimportsource": {
            "type": "string"
          },
          "strtype": {
            "type": "string"
          },
          "supplierid": {
            "type": "string"
          },
          "txtinnovatordrugname": {
            "type": "string"
          },
          "txtlowestunitmeasure": {
            "type": "string"
          },
          "txtmigrationstatus": {
            "type": "integer",
            "format": "int32"
          },
          "txtmigrationstatusdate": {
            "type": "string",
            "format": "date-time"
          },
          "txtpreferencenotes": {
            "type": "string"
          },
          "txtsubstitutionlist": {
            "type": "string"
          }
        }
      },
      "PplProductfreightcost": {
        "type": "object",
        "properties": {
          "dtmchanged": {
            "type": "string",
            "format": "date-time"
          },
          "freightcost": {
            "type": "number",
            "format": "double"
          },
          "pipelineId": {
            "type": "integer",
            "format": "int32"
          },
          "productid": {
            "type": "string"
          },
          "supplierid": {
            "type": "string"
          }
        }
      },
      "PplProductsuppliercasesize": {
        "type": "object",
        "properties": {
          "dtmchanged": {
            "type": "string",
            "format": "date-time"
          },
          "dtmeffective": {
            "type": "string",
            "format": "date-time"
          },
          "intcasesize": {
            "type": "integer",
            "format": "int32"
          },
          "note": {
            "type": "string"
          },
          "pipelineId": {
            "type": "integer",
            "format": "int32"
          },
          "productid": {
            "type": "string"
          },
          "supplierid": {
            "type": "string"
          },
          "user": {
            "type": "string"
          }
        }
      },
      "PplPrograminfo": {
        "type": "object",
        "properties": {
          "archivedate": {
            "type": "string",
            "format": "date-time"
          },
          "archiveinclude": {
            "type": "boolean"
          },
          "archiveyear": {
            "type": "integer",
            "format": "int32"
          },
          "countrycode": {
            "type": "string"
          },
          "countryname": {
            "type": "string"
          },
          "datadirectory": {
            "type": "string"
          },
          "defaultleadtimeorder": {
            "type": "number",
            "format": "double"
          },
          "defaultleadtimeplan": {
            "type": "number",
            "format": "double"
          },
          "defaultleadtimeship": {
            "type": "number",
            "format": "double"
          },
          "defaultshipcost": {
            "type": "number",
            "format": "double"
          },
          "email": {
            "type": "string"
          },
          "fax": {
            "type": "string"
          },
          "isactive": {
            "type": "boolean"
          },
          "iscurrent": {
            "type": "boolean"
          },
          "isdefault": {
            "type": "boolean"
          },
          "language": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "pipelineId": {
            "type": "integer",
            "format": "int32"
          },
          "programcode": {
            "type": "string"
          },
          "programcontact": {
            "type": "string"
          },
          "programname": {
            "type": "string"
          },
          "startsize": {
            "type": "string"
          },
          "telephone": {
            "type": "string"
          }
        }
      },
      "PplShipment": {
        "type": "object",
        "properties": {
          "old_shipment": {
            "type": "number",
            "format": "double"
          },
          "pipelineId": {
            "type": "integer",
            "format": "int32"
          },
          "productid": {
            "type": "string"
          },
          "shipamount": {
            "type": "number",
            "format": "double"
          },
          "shipcaselot": {
            "type": "integer",
            "format": "int32"
          },
          "shipdatasourceid": {
            "type": "string"
          },
          "shipdatechanged": {
            "type": "string",
            "format": "date-time"
          },
          "shipdisplaynote": {
            "type": "boolean"
          },
          "shipfreightcost": {
            "type": "number",
            "format": "double"
          },
          "shipfundingsourceid": {
            "type": "string"
          },
          "shipmentid": {
            "type": "string"
          },
          "shipnote": {
            "type": "string"
          },
          "shipordereddate": {
            "type": "string",
            "format": "date-time"
          },
          "shipplanneddate": {
            "type": "string",
            "format": "date-time"
          },
          "shippo": {
            "type": "string"
          },
          "shipreceiveddate": {
            "type": "string",
            "format": "date-time"
          },
          "shipshippeddate": {
            "type": "string",
            "format": "date-time"
          },
          "shipstatuscode": {
            "type": "string"
          },
          "shipvalue": {
            "type": "number",
            "format": "double"
          },
          "supplierid": {
            "type": "string"
          }
        }
      },
      "PplSource": {
        "type": "object",
        "properties": {
          "defaultsupplier": {
            "type": "boolean"
          },
          "freight": {
            "type": "number",
            "format": "double"
          },
          "pipelineId": {
            "type": "integer",
            "format": "int32"
          },
          "supplierid": {
            "type": "string"
          },
          "supplierleadtimeorder": {
            "type": "number",
            "format": "double"
          },
          "supplierleadtimeplan": {
            "type": "number",
            "format": "double"
          },
          "supplierleadtimeship": {
            "type": "number",
            "format": "double"
          },
          "suppliername": {
            "type": "string"
          },
          "suppliernote": {
            "type": "string"
          }
        }
      },
      "PplTblbe_version": {
        "type": "object",
        "properties": {
          "dtmupdated": {
            "type": "string",
            "format": "date-time"
          },
          "pipelineId": {
            "type": "integer",
            "format": "int32"
          },
          "sbe_version": {
            "type": "string"
          }
        }
      },
      "PplTblimportproducts": {
        "type": "object",
        "properties": {
          "dtmexport": {
            "type": "string",
            "format": "date-time"
          },
          "fprocessed": {
            "type": "boolean"
          },
          "lngcyp": {
            "type": "number",
            "format": "double"
          },
          "lngid": {
            "type": "integer",
            "format": "int32"
          },
          "pipelineId": {
            "type": "integer",
            "format": "int32"
          },
          "strdose": {
            "type": "string"
          },
          "strmapping": {
            "type": "string"
          },
          "strname": {
            "type": "string"
          },
          "strproductid": {
            "type": "string"
          },
          "strsource": {
            "type": "string"
          }
        }
      },
      "PplTblimportrecords": {
        "type": "object",
        "properties": {
          "dbldatainterval": {
            "type": "number",
            "format": "double"
          },
          "dtmperiod": {
            "type": "string",
            "format": "date-time"
          },
          "lngadjustment": {
            "type": "integer",
            "format": "int32"
          },
          "lngconsumption": {
            "type": "integer",
            "format": "int32"
          },
          "lngparentid": {
            "type": "integer",
            "format": "int32"
          },
          "pipelineId": {
            "type": "integer",
            "format": "int32"
          },
          "strproductid": {
            "type": "string"
          }
        }
      },
      "Problem": {
        "type": "object",
        "properties": {
          "actionLabel": {
            "$ref": "#/components/schemas/Label"
          },
          "actionUrl": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "actualConsumptionTrigger": {
            "type": "boolean"
          },
          "adjustmentTrigger": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "forecastedConsumptionTrigger": {
            "type": "boolean"
          },
          "inventoryTrigger": {
            "type": "boolean"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "problemCategory": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "problemId": {
            "type": "integer",
            "format": "int32"
          },
          "shipmentTrigger": {
            "type": "boolean"
          }
        }
      },
      "ProblemReport": {
        "type": "object",
        "properties": {
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "data5": {
            "type": "string"
          },
          "dt": {
            "type": "string"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "planningUnit": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "problemCategory": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "problemReportId": {
            "type": "integer",
            "format": "int32"
          },
          "problemStatus": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "problemTransList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProblemReportTrans"
            }
          },
          "problemType": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "program": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          },
          "realmProblem": {
            "$ref": "#/components/schemas/RealmProblem"
          },
          "region": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "reviewNotes": {
            "type": "string"
          },
          "reviewed": {
            "type": "boolean"
          },
          "reviewedDate": {
            "type": "string",
            "format": "date-time"
          },
          "shipmentId": {
            "type": "integer",
            "format": "int32"
          },
          "versionId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ProblemReportTrans": {
        "type": "object",
        "properties": {
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "notes": {
            "type": "string"
          },
          "problemReportTransId": {
            "type": "integer",
            "format": "int32"
          },
          "problemStatus": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "reviewed": {
            "type": "boolean"
          }
        }
      },
      "ProblemReportTrans_InternalView": {
        "type": "object",
        "properties": {
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser_InternalView"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "notes": {
            "type": "string"
          },
          "problemReportTransId": {
            "type": "integer",
            "format": "int32"
          },
          "problemStatus": {
            "$ref": "#/components/schemas/SimpleObject_InternalView"
          },
          "reviewed": {
            "type": "boolean"
          }
        }
      },
      "ProblemReport_InternalView": {
        "type": "object",
        "properties": {
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser_InternalView"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "data5": {
            "type": "string"
          },
          "dt": {
            "type": "string"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser_InternalView"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "planningUnit": {
            "$ref": "#/components/schemas/SimpleObject_InternalView"
          },
          "problemCategory": {
            "$ref": "#/components/schemas/SimpleObject_InternalView"
          },
          "problemReportId": {
            "type": "integer",
            "format": "int32"
          },
          "problemStatus": {
            "$ref": "#/components/schemas/SimpleObject_InternalView"
          },
          "problemTransList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProblemReportTrans_InternalView"
            }
          },
          "problemType": {
            "$ref": "#/components/schemas/SimpleObject_InternalView"
          },
          "program": {
            "$ref": "#/components/schemas/SimpleCodeObject_InternalView"
          },
          "realmProblem": {
            "$ref": "#/components/schemas/RealmProblem_InternalView"
          },
          "region": {
            "$ref": "#/components/schemas/SimpleObject_InternalView"
          },
          "reviewNotes": {
            "type": "string"
          },
          "reviewed": {
            "type": "boolean"
          },
          "reviewedDate": {
            "type": "string",
            "format": "date-time"
          },
          "shipmentId": {
            "type": "integer",
            "format": "int32"
          },
          "versionId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ProblemStatus": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "name": {
            "type": "string"
          },
          "userManaged": {
            "type": "boolean"
          }
        }
      },
      "Problem_InternalView": {
        "type": "object",
        "properties": {
          "actionLabel": {
            "$ref": "#/components/schemas/Label_InternalView"
          },
          "actionUrl": {
            "type": "string"
          },
          "actualConsumptionTrigger": {
            "type": "boolean"
          },
          "adjustmentTrigger": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel_InternalView"
          },
          "forecastedConsumptionTrigger": {
            "type": "boolean"
          },
          "inventoryTrigger": {
            "type": "boolean"
          },
          "label": {
            "$ref": "#/components/schemas/Label_InternalView"
          },
          "problemCategory": {
            "$ref": "#/components/schemas/SimpleObject_InternalView"
          },
          "problemId": {
            "type": "integer",
            "format": "int32"
          },
          "shipmentTrigger": {
            "type": "boolean"
          }
        }
      },
      "ProcurementAgent": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "approvedToShippedLeadTime": {
            "type": "number",
            "format": "double"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "colorHtmlCode": {
            "type": "string"
          },
          "colorHtmlDarkCode": {
            "type": "string"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "procurementAgentCode": {
            "type": "string"
          },
          "procurementAgentId": {
            "type": "integer",
            "format": "int32"
          },
          "procurementAgentType": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          },
          "programList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleObject"
            }
          },
          "realm": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          },
          "submittedToApprovedLeadTime": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ProcurementAgentForecastingUnit": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "forecastingUnit": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "procurementAgent": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          },
          "procurementAgentForecastingUnitId": {
            "type": "integer",
            "format": "int32"
          },
          "skuCode": {
            "type": "string"
          }
        }
      },
      "ProcurementAgentPlanningUnit": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "catalogPrice": {
            "type": "number",
            "format": "double"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "moq": {
            "type": "integer",
            "format": "int32"
          },
          "planningUnit": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "procurementAgent": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          },
          "procurementAgentPlanningUnitId": {
            "type": "integer",
            "format": "int32"
          },
          "skuCode": {
            "type": "string"
          },
          "unitsPerContainer": {
            "type": "integer",
            "format": "int32"
          },
          "unitsPerPalletEuro1": {
            "type": "integer",
            "format": "int32"
          },
          "unitsPerPalletEuro2": {
            "type": "integer",
            "format": "int32"
          },
          "volume": {
            "type": "number",
            "format": "double"
          },
          "weight": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ProcurementAgentProcurementUnit": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "approvedToShippedLeadTime": {
            "type": "number",
            "format": "double"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "gtin": {
            "type": "string"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "procurementAgent": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "procurementAgentProcurementUnitId": {
            "type": "integer",
            "format": "int32"
          },
          "procurementUnit": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "skuCode": {
            "type": "string"
          },
          "vendorPrice": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ProcurementAgentShipmentReportInput_ReportView": {
        "type": "object",
        "properties": {
          "includePlannedShipments": {
            "type": "boolean"
          },
          "planningUnitIdString": {
            "type": "string"
          },
          "planningUnitIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "procurementAgentIdString": {
            "type": "string"
          },
          "procurementAgentIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "programId": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "stopDate": {
            "type": "string",
            "format": "date-time"
          },
          "versionId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ProcurementAgentShipmentReportOutput_ReportView": {
        "type": "object",
        "properties": {
          "freightCost": {
            "type": "number",
            "format": "double"
          },
          "freightPerc": {
            "type": "number",
            "format": "double"
          },
          "planningUnit": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "procurementAgent": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          },
          "productCost": {
            "type": "number",
            "format": "double"
          },
          "qty": {
            "type": "number",
            "format": "double"
          },
          "totalCost": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ProcurementAgentType": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "procurementAgentTypeCode": {
            "type": "string"
          },
          "procurementAgentTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "realm": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          }
        }
      },
      "ProcurementAgent_ReportView": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "approvedToShippedLeadTime": {
            "type": "number",
            "format": "double"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel_ReportView"
          },
          "colorHtmlCode": {
            "type": "string"
          },
          "colorHtmlDarkCode": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label_ReportView"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser_ReportView"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "procurementAgentCode": {
            "type": "string"
          },
          "procurementAgentId": {
            "type": "integer",
            "format": "int32"
          },
          "procurementAgentType": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          },
          "programList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleObject_ReportView"
            }
          },
          "realm": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          },
          "submittedToApprovedLeadTime": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ProcurementUnit": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "heightQty": {
            "type": "number",
            "format": "double"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "labeling": {
            "type": "string"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "lengthQty": {
            "type": "number",
            "format": "double"
          },
          "lengthUnit": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "multiplier": {
            "type": "number",
            "format": "double"
          },
          "planningUnit": {
            "$ref": "#/components/schemas/PlanningUnit"
          },
          "procurementUnitId": {
            "type": "integer",
            "format": "int32"
          },
          "supplier": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "unit": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "unitsPerCase": {
            "type": "number",
            "format": "double"
          },
          "unitsPerContainer": {
            "type": "number",
            "format": "double"
          },
          "unitsPerPalletEuro1": {
            "type": "number",
            "format": "double"
          },
          "unitsPerPalletEuro2": {
            "type": "number",
            "format": "double"
          },
          "volumeQty": {
            "type": "number",
            "format": "double"
          },
          "volumeUnit": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "weightQty": {
            "type": "number",
            "format": "double"
          },
          "weightUnit": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "widthQty": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ProductCategory": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "productCategoryId": {
            "type": "integer",
            "format": "int32"
          },
          "realm": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          },
          "sortOrder": {
            "type": "string"
          }
        }
      },
      "ProductCategoryAndTracerCategoryDTO_DropDownView": {
        "type": "object",
        "properties": {
          "productCategorySortOrder": {
            "type": "string"
          },
          "tracerCategoryId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ProductCategoryAndTracerCategoryDTO_ReportView": {
        "type": "object",
        "properties": {
          "productCategorySortOrder": {
            "type": "string"
          },
          "tracerCategoryId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ProductCategoryTracerCategoryAndForecastingUnitDTO_ReportView": {
        "type": "object",
        "properties": {
          "forecastingUnitId": {
            "type": "integer",
            "format": "int32"
          },
          "productCategorySortOrder": {
            "type": "string"
          },
          "tracerCategoryId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Program": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "airFreightPerc": {
            "type": "number",
            "format": "double"
          },
          "approvedToShippedLeadTime": {
            "type": "number",
            "format": "double"
          },
          "arrivedToDeliveredLeadTime": {
            "type": "number",
            "format": "double"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "currentVersion": {
            "$ref": "#/components/schemas/Version"
          },
          "healthAreaArray": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "healthAreaIdList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "healthAreaList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleCodeObject"
            }
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "noOfMonthsInFutureForBottomDashboard": {
            "type": "integer",
            "format": "int32"
          },
          "noOfMonthsInPastForBottomDashboard": {
            "type": "integer",
            "format": "int32"
          },
          "organisation": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          },
          "plannedToSubmittedLeadTime": {
            "type": "number",
            "format": "double"
          },
          "programCode": {
            "type": "string"
          },
          "programId": {
            "type": "integer",
            "format": "int32"
          },
          "programManager": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "programNotes": {
            "type": "string"
          },
          "programTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "realmCountry": {
            "$ref": "#/components/schemas/RealmCountry"
          },
          "regionArray": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "regionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Region"
            }
          },
          "roadFreightPerc": {
            "type": "number",
            "format": "double"
          },
          "seaFreightPerc": {
            "type": "number",
            "format": "double"
          },
          "shippedToArrivedByAirLeadTime": {
            "type": "number",
            "format": "double"
          },
          "shippedToArrivedByRoadLeadTime": {
            "type": "number",
            "format": "double"
          },
          "shippedToArrivedBySeaLeadTime": {
            "type": "number",
            "format": "double"
          },
          "submittedToApprovedLeadTime": {
            "type": "number",
            "format": "double"
          },
          "versionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Version"
            }
          }
        }
      },
      "ProgramAndVersionDTO_DropDownView": {
        "type": "object"
      },
      "ProgramData_InternalView": {
        "type": "object",
        "properties": {
          "airFreightPerc": {
            "type": "number",
            "format": "double"
          },
          "approvedToShippedLeadTime": {
            "type": "number",
            "format": "double"
          },
          "arrivedToDeliveredLeadTime": {
            "type": "number",
            "format": "double"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel_InternalView"
          },
          "batchInfoList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Batch_InternalView"
            }
          },
          "batchInventoryList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BatchInventory_InternalView"
            }
          },
          "consumptionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Consumption_InternalView"
            }
          },
          "currentVersion": {
            "$ref": "#/components/schemas/Version_InternalView"
          },
          "currentVersionTrans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProgramVersionTrans_InternalView"
            }
          },
          "cutOffDate": {
            "type": "string"
          },
          "dashboardData": {
            "$ref": "#/components/schemas/DashboardForLoadProgram_InternalView"
          },
          "healthAreaList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleCodeObject_InternalView"
            }
          },
          "inventoryList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Inventory_InternalView"
            }
          },
          "label": {
            "$ref": "#/components/schemas/Label_InternalView"
          },
          "notes": {
            "type": "string"
          },
          "organisation": {
            "$ref": "#/components/schemas/SimpleCodeObject_InternalView"
          },
          "plannedToSubmittedLeadTime": {
            "type": "number",
            "format": "double"
          },
          "planningUnitList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplePlanningUnitForSupplyPlanObject_InternalView"
            }
          },
          "problemReportList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProblemReport_InternalView"
            }
          },
          "procurementAgentList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleCodeObject_InternalView"
            }
          },
          "programCode": {
            "type": "string"
          },
          "programId": {
            "type": "integer",
            "format": "int32"
          },
          "programManager": {
            "$ref": "#/components/schemas/BasicUser_InternalView"
          },
          "programNotes": {
            "type": "string"
          },
          "realmCountry": {
            "$ref": "#/components/schemas/RealmCountry_InternalView"
          },
          "regionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Region_InternalView"
            }
          },
          "requestedProgramVersion": {
            "type": "integer",
            "format": "int32"
          },
          "roadFreightPerc": {
            "type": "number",
            "format": "double"
          },
          "seaFreightPerc": {
            "type": "number",
            "format": "double"
          },
          "shipmentBudgetList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShipmentBudgetAmt_InternalView"
            }
          },
          "shipmentBudgetSummary": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            }
          },
          "shipmentLinkingList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShipmentLinking_InternalView"
            }
          },
          "shipmentList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Shipment_InternalView"
            }
          },
          "shippedToArrivedByAirLeadTime": {
            "type": "number",
            "format": "double"
          },
          "shippedToArrivedByRoadLeadTime": {
            "type": "number",
            "format": "double"
          },
          "shippedToArrivedBySeaLeadTime": {
            "type": "number",
            "format": "double"
          },
          "submittedToApprovedLeadTime": {
            "type": "number",
            "format": "double"
          },
          "supplyPlan": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimplifiedSupplyPlan_InternalView"
            }
          },
          "versionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Version_InternalView"
            }
          },
          "versionStatus": {
            "$ref": "#/components/schemas/SimpleObject_InternalView"
          },
          "versionType": {
            "$ref": "#/components/schemas/SimpleObject_InternalView"
          }
        }
      },
      "ProgramIdAndVersionId": {
        "type": "object",
        "properties": {
          "programId": {
            "type": "integer",
            "format": "int32"
          },
          "versionId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ProgramInitialize": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "airFreightPerc": {
            "type": "number",
            "format": "double"
          },
          "approvedToShippedLeadTime": {
            "type": "number",
            "format": "double"
          },
          "arrivedToDeliveredLeadTime": {
            "type": "number",
            "format": "double"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "currentVersion": {
            "$ref": "#/components/schemas/Version"
          },
          "fundingSources": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "healthAreaArray": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "healthAreaIdList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "healthAreaList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleCodeObject"
            }
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "noOfMonthsInFutureForBottomDashboard": {
            "type": "integer",
            "format": "int32"
          },
          "noOfMonthsInPastForBottomDashboard": {
            "type": "integer",
            "format": "int32"
          },
          "organisation": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          },
          "plannedToSubmittedLeadTime": {
            "type": "number",
            "format": "double"
          },
          "procurementAgents": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "programCode": {
            "type": "string"
          },
          "programId": {
            "type": "integer",
            "format": "int32"
          },
          "programManager": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "programNotes": {
            "type": "string"
          },
          "programPlanningUnits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProgramPlanningUnit"
            }
          },
          "programTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "realmCountry": {
            "$ref": "#/components/schemas/RealmCountry"
          },
          "regionArray": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "regionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Region"
            }
          },
          "roadFreightPerc": {
            "type": "number",
            "format": "double"
          },
          "seaFreightPerc": {
            "type": "number",
            "format": "double"
          },
          "shippedToArrivedByAirLeadTime": {
            "type": "number",
            "format": "double"
          },
          "shippedToArrivedByRoadLeadTime": {
            "type": "number",
            "format": "double"
          },
          "shippedToArrivedBySeaLeadTime": {
            "type": "number",
            "format": "double"
          },
          "submittedToApprovedLeadTime": {
            "type": "number",
            "format": "double"
          },
          "versionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Version"
            }
          }
        }
      },
      "ProgramLeadTimesInput_ReportView": {
        "type": "object",
        "properties": {
          "planningUnitIdString": {
            "type": "string"
          },
          "planningUnitIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "procurementAgentIdString": {
            "type": "string"
          },
          "procurementAgentIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "programId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ProgramLeadTimesOutput_ReportView": {
        "type": "object",
        "properties": {
          "approvedToShippedLeadTime": {
            "type": "number",
            "format": "double"
          },
          "arrivedToDeliveredLeadTime": {
            "type": "number",
            "format": "double"
          },
          "country": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          },
          "localProcurementAgentLeadTime": {
            "type": "number",
            "format": "double"
          },
          "plannedToSubmittedLeadTime": {
            "type": "number",
            "format": "double"
          },
          "planningUnit": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "procurementAgent": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          },
          "program": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          },
          "shippedToArrivedByAirLeadTime": {
            "type": "number",
            "format": "double"
          },
          "shippedToArrivedByRoadLeadTime": {
            "type": "number",
            "format": "double"
          },
          "shippedToArrivedBySeaLeadTime": {
            "type": "number",
            "format": "double"
          },
          "submittedToApprovedLeadTime": {
            "type": "number",
            "format": "double"
          },
          "totalAirLeadTime": {
            "type": "number",
            "format": "double"
          },
          "totalRoadLeadTime": {
            "type": "number",
            "format": "double"
          },
          "totalSeaLeadTime": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ProgramPlanningUnit": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "catalogPrice": {
            "type": "number",
            "format": "double"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "distributionLeadTime": {
            "type": "number",
            "format": "double"
          },
          "forecastErrorThreshold": {
            "type": "number",
            "format": "double"
          },
          "forecastingUnit": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "localProcurementLeadTime": {
            "type": "number",
            "format": "double"
          },
          "minMonthsOfStock": {
            "type": "integer",
            "format": "int32"
          },
          "minQty": {
            "type": "integer",
            "format": "int32"
          },
          "monthsInFutureForAmc": {
            "type": "integer",
            "format": "int32"
          },
          "monthsInPastForAmc": {
            "type": "integer",
            "format": "int32"
          },
          "multiplier": {
            "type": "number",
            "format": "double"
          },
          "notes": {
            "type": "string"
          },
          "planBasedOn": {
            "type": "integer",
            "format": "int32"
          },
          "planningUnit": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "productCategory": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "program": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "programPlanningUnitId": {
            "type": "integer",
            "format": "int32"
          },
          "programPlanningUnitProcurementAgentPrices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProgramPlanningUnitProcurementAgentPrice"
            }
          },
          "reorderFrequencyInMonths": {
            "type": "integer",
            "format": "int32"
          },
          "shelfLife": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ProgramPlanningUnitProcurementAgentInput": {
        "type": "object",
        "properties": {
          "planningUnitIdList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "programIdList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ProgramPlanningUnitProcurementAgentPrice": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "airFreightPerc": {
            "type": "number",
            "format": "double"
          },
          "approvedToShippedLeadTime": {
            "type": "number",
            "format": "double"
          },
          "arrivedToDeliveredLeadTime": {
            "type": "number",
            "format": "double"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "localProcurementLeadTime": {
            "type": "number",
            "format": "double"
          },
          "plannedToSubmittedLeadTime": {
            "type": "number",
            "format": "double"
          },
          "planningUnit": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "price": {
            "type": "number",
            "format": "double"
          },
          "procurementAgent": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          },
          "program": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "programPlanningUnitProcurementAgentId": {
            "type": "integer",
            "format": "int32"
          },
          "roadFreightPerc": {
            "type": "number",
            "format": "double"
          },
          "seaFreightPerc": {
            "type": "number",
            "format": "double"
          },
          "shippedToArrivedByAirLeadTime": {
            "type": "number",
            "format": "double"
          },
          "shippedToArrivedByRoadLeadTime": {
            "type": "number",
            "format": "double"
          },
          "shippedToArrivedBySeaLeadTime": {
            "type": "number",
            "format": "double"
          },
          "submittedToApprovedLeadTime": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ProgramProductCatalogInput_ReportView": {
        "type": "object",
        "properties": {
          "productCategoryId": {
            "type": "integer",
            "format": "int32"
          },
          "programId": {
            "type": "integer",
            "format": "int32"
          },
          "tracerCategoryId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ProgramProductCatalogOutput_ReportView": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "catalogPrice": {
            "type": "number",
            "format": "double"
          },
          "forecastingUnit": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "forecastingtoPlanningUnitMultiplier": {
            "type": "integer",
            "format": "int32"
          },
          "genericName": {
            "$ref": "#/components/schemas/Label_ReportView"
          },
          "getfUnit": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          },
          "getpUnit": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          },
          "minMonthsOfStock": {
            "type": "integer",
            "format": "int32"
          },
          "planningUnit": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "productCategory": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "program": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          },
          "reorderFrequencyInMonths": {
            "type": "integer",
            "format": "int32"
          },
          "shelfLife": {
            "type": "integer",
            "format": "int32"
          },
          "tracerCategory": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          }
        }
      },
      "ProgramVersion": {
        "type": "object",
        "properties": {
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "daysInMonth": {
            "type": "integer",
            "format": "int32"
          },
          "forecastStartDate": {
            "type": "string",
            "format": "date-time"
          },
          "forecastStopDate": {
            "type": "string",
            "format": "date-time"
          },
          "forecastThresholdHighPerc": {
            "type": "number",
            "format": "double"
          },
          "forecastThresholdLowPerc": {
            "type": "number",
            "format": "double"
          },
          "freightPerc": {
            "type": "number",
            "format": "double"
          },
          "healthAreaList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleCodeObject"
            }
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "notes": {
            "type": "string"
          },
          "organisation": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          },
          "program": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          },
          "programVersionId": {
            "type": "integer",
            "format": "int32"
          },
          "realmCountry": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          },
          "versionId": {
            "type": "integer",
            "format": "int32"
          },
          "versionStatus": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "versionType": {
            "$ref": "#/components/schemas/SimpleObject"
          }
        }
      },
      "ProgramVersionTrans_InternalView": {
        "type": "object",
        "properties": {
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser_InternalView"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "notes": {
            "type": "string"
          },
          "versionId": {
            "type": "integer",
            "format": "int32"
          },
          "versionStatus": {
            "$ref": "#/components/schemas/SimpleObject_InternalView"
          },
          "versionType": {
            "$ref": "#/components/schemas/SimpleObject_InternalView"
          }
        }
      },
      "ProgramVersionTrans_ReportView": {
        "type": "object",
        "properties": {
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser_ReportView"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "notes": {
            "type": "string"
          },
          "versionId": {
            "type": "integer",
            "format": "int32"
          },
          "versionStatus": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "versionType": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          }
        }
      },
      "ProgramVersion_ReportView": {
        "type": "object",
        "properties": {
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser_ReportView"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "daysInMonth": {
            "type": "integer",
            "format": "int32"
          },
          "forecastStartDate": {
            "type": "string",
            "format": "date-time"
          },
          "forecastStopDate": {
            "type": "string",
            "format": "date-time"
          },
          "forecastThresholdHighPerc": {
            "type": "number",
            "format": "double"
          },
          "forecastThresholdLowPerc": {
            "type": "number",
            "format": "double"
          },
          "freightPerc": {
            "type": "number",
            "format": "double"
          },
          "healthAreaList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
            }
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser_ReportView"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "notes": {
            "type": "string"
          },
          "organisation": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          },
          "program": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          },
          "programVersionId": {
            "type": "integer",
            "format": "int32"
          },
          "realmCountry": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          },
          "versionId": {
            "type": "integer",
            "format": "int32"
          },
          "versionStatus": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "versionType": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          }
        }
      },
      "QatTempConsumption": {
        "type": "object",
        "properties": {
          "actualFlag": {
            "type": "boolean"
          },
          "consNumMonth": {
            "type": "integer",
            "format": "int32"
          },
          "consumptionDate": {
            "type": "string"
          },
          "consumptionId": {
            "type": "integer",
            "format": "int32"
          },
          "consumptionQty": {
            "type": "number",
            "format": "double"
          },
          "dataSourceId": {
            "type": "string"
          },
          "dayOfStockOut": {
            "type": "integer",
            "format": "int32"
          },
          "multiplier": {
            "type": "number",
            "format": "double"
          },
          "notes": {
            "type": "string"
          },
          "planningUnitId": {
            "type": "string"
          },
          "realmCountryPlanningUnitId": {
            "type": "integer",
            "format": "int32"
          },
          "regionId": {
            "type": "string"
          }
        }
      },
      "QatTempDataSource": {
        "type": "object",
        "properties": {
          "dataSourceId": {
            "type": "integer",
            "format": "int32"
          },
          "dataSourceTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "pipelineDataSource": {
            "type": "string"
          },
          "pipelineDataSourceId": {
            "type": "string"
          },
          "pipelineDataSourceType": {
            "type": "string"
          }
        }
      },
      "QatTempFundingSource": {
        "type": "object",
        "properties": {
          "fundingSourceId": {
            "type": "integer",
            "format": "int32"
          },
          "pipelineFundingSource": {
            "type": "string"
          },
          "pipelineFundingSourceId": {
            "type": "string"
          }
        }
      },
      "QatTempInventory": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "dataSourceId": {
            "type": "string"
          },
          "inventory": {
            "type": "integer",
            "format": "int64"
          },
          "inventoryDate": {
            "type": "string"
          },
          "manualAdjustment": {
            "type": "integer",
            "format": "int64"
          },
          "multiplier": {
            "type": "number",
            "format": "double"
          },
          "notes": {
            "type": "string"
          },
          "planningUnitId": {
            "type": "string"
          },
          "realmCountryPlanningUnitId": {
            "type": "integer",
            "format": "int32"
          },
          "regionId": {
            "type": "string"
          }
        }
      },
      "QatTempPlanningUnitInventoryCount": {
        "type": "object",
        "properties": {
          "inventory": {
            "type": "number",
            "format": "double"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "planningUnitId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "QatTempProcurementAgent": {
        "type": "object",
        "properties": {
          "pipelineProcurementAgent": {
            "type": "string"
          },
          "pipelineProcurementAgentId": {
            "type": "string"
          },
          "procurementAgentId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "QatTempProgram": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "airFreightPerc": {
            "type": "number",
            "format": "double"
          },
          "approvedToShippedLeadTime": {
            "type": "number",
            "format": "double"
          },
          "arrivedToDeliveredLeadTime": {
            "type": "number",
            "format": "double"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "currentVersion": {
            "$ref": "#/components/schemas/Version"
          },
          "healthAreaArray": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "healthAreaIdList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "healthAreaList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleCodeObject"
            }
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "monthsInFutureForAmc": {
            "type": "integer",
            "format": "int32"
          },
          "monthsInPastForAmc": {
            "type": "integer",
            "format": "int32"
          },
          "organisation": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          },
          "plannedToSubmittedLeadTime": {
            "type": "number",
            "format": "double"
          },
          "programCode": {
            "type": "string"
          },
          "programId": {
            "type": "integer",
            "format": "int32"
          },
          "programManager": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "programNotes": {
            "type": "string"
          },
          "realmCountry": {
            "$ref": "#/components/schemas/RealmCountry"
          },
          "regionArray": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "regionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Region"
            }
          },
          "seaFreightPerc": {
            "type": "number",
            "format": "double"
          },
          "shelfLife": {
            "type": "number",
            "format": "double"
          },
          "shippedToArrivedByAirLeadTime": {
            "type": "number",
            "format": "double"
          },
          "shippedToArrivedBySeaLeadTime": {
            "type": "number",
            "format": "double"
          },
          "submittedToApprovedLeadTime": {
            "type": "number",
            "format": "double"
          },
          "versionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Version"
            }
          }
        }
      },
      "QatTempProgramPlanningUnit": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "catalogPrice": {
            "type": "number",
            "format": "double"
          },
          "localProcurmentLeadTime": {
            "type": "number",
            "format": "double"
          },
          "minMonthsOfStock": {
            "type": "integer",
            "format": "int32"
          },
          "monthsInFutureForAmc": {
            "type": "integer",
            "format": "int32"
          },
          "monthsInPastForAmc": {
            "type": "integer",
            "format": "int32"
          },
          "multiplier": {
            "type": "number",
            "format": "double"
          },
          "pipelineProductCategoryName": {
            "type": "string"
          },
          "pipelineProductName": {
            "type": "string"
          },
          "planningUnitId": {
            "type": "string"
          },
          "productCategoryId": {
            "type": "integer",
            "format": "int32"
          },
          "program": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "programPlanningUnitId": {
            "type": "string"
          },
          "reorderFrequencyInMonths": {
            "type": "integer",
            "format": "int32"
          },
          "shelfLife": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "QatTempShipment": {
        "type": "object",
        "properties": {
          "accountFlag": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "approvedDate": {
            "type": "string",
            "format": "date-time"
          },
          "arrivedDate": {
            "type": "string",
            "format": "date-time"
          },
          "dataSource": {
            "type": "string"
          },
          "erpFlag": {
            "type": "boolean"
          },
          "expectedDeliveryDate": {
            "type": "string",
            "format": "date-time"
          },
          "freightCost": {
            "type": "number",
            "format": "double"
          },
          "fundingSource": {
            "type": "string"
          },
          "notes": {
            "type": "string"
          },
          "plannedDate": {
            "type": "string",
            "format": "date-time"
          },
          "planningUnit": {
            "type": "string"
          },
          "procurementAgent": {
            "type": "string"
          },
          "procurementUnit": {
            "type": "string"
          },
          "productCost": {
            "type": "number",
            "format": "double"
          },
          "quantity": {
            "type": "number",
            "format": "double"
          },
          "rate": {
            "type": "number",
            "format": "double"
          },
          "receivedDate": {
            "type": "string",
            "format": "date-time"
          },
          "shipmentId": {
            "type": "integer",
            "format": "int32"
          },
          "shipmentMode": {
            "type": "string"
          },
          "shipmentStatus": {
            "type": "string"
          },
          "shippedDate": {
            "type": "string",
            "format": "date-time"
          },
          "submittedDate": {
            "type": "string",
            "format": "date-time"
          },
          "suggestedQty": {
            "type": "number",
            "format": "double"
          },
          "supplier": {
            "type": "string"
          },
          "versionId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "QuantimedImportDTO": {
        "type": "object",
        "properties": {
          "dblDataInterval": {
            "type": "string"
          },
          "dtmDataExported": {
            "type": "string"
          },
          "dtmEnd": {
            "type": "string"
          },
          "dtmStart": {
            "type": "string"
          },
          "fileType": {
            "type": "string"
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuantimedImportProductDTO"
            }
          },
          "programId": {
            "type": "string"
          },
          "records": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuantimedImportRecordDTO"
            }
          },
          "sourceName": {
            "type": "string"
          }
        }
      },
      "QuantimedImportProductDTO": {
        "type": "object",
        "properties": {
          "innovatorName": {
            "type": "string"
          },
          "lowestUnitMeasure": {
            "type": "string"
          },
          "lowestUnitQuantity": {
            "type": "string"
          },
          "multiplier": {
            "type": "integer",
            "format": "int32"
          },
          "productGroup": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "productName": {
            "type": "string"
          },
          "programPlanningUnitId": {
            "type": "string"
          },
          "quantificationFactor": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "userDefined": {
            "type": "string"
          }
        }
      },
      "QuantimedImportRecordDTO": {
        "type": "object",
        "properties": {
          "dtmPeriod": {
            "type": "string"
          },
          "ingAdjustments": {
            "type": "integer",
            "format": "int32"
          },
          "ingConsumption": {
            "type": "integer",
            "format": "int32"
          },
          "product": {
            "$ref": "#/components/schemas/QuantimedImportProductDTO"
          },
          "productId": {
            "type": "string"
          }
        }
      },
      "Realm": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "actualConsumptionMonthsInPast": {
            "type": "integer",
            "format": "int32"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "defaultRealm": {
            "type": "boolean"
          },
          "forecastConsumptionMonthsInPast": {
            "type": "integer",
            "format": "int32"
          },
          "inventoryMonthsInPast": {
            "type": "integer",
            "format": "int32"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "maxMosMaxGaurdrail": {
            "type": "integer",
            "format": "int32"
          },
          "maxQplTolerance": {
            "type": "integer",
            "format": "int32"
          },
          "minCountForMode": {
            "type": "integer",
            "format": "int32"
          },
          "minMosMaxGaurdrail": {
            "type": "integer",
            "format": "int32"
          },
          "minMosMinGaurdrail": {
            "type": "integer",
            "format": "int32"
          },
          "minPercForMode": {
            "type": "number",
            "format": "double"
          },
          "minQplTolerance": {
            "type": "integer",
            "format": "int32"
          },
          "minQplToleranceCutOff": {
            "type": "integer",
            "format": "int32"
          },
          "noOfMonthsInFutureForBottomDashboard": {
            "type": "integer",
            "format": "int32"
          },
          "noOfMonthsInFutureForTopDashboard": {
            "type": "integer",
            "format": "int32"
          },
          "noOfMonthsInPastForBottomDashboard": {
            "type": "integer",
            "format": "int32"
          },
          "noOfMonthsInPastForTopDashboard": {
            "type": "integer",
            "format": "int32"
          },
          "realmCode": {
            "type": "string"
          },
          "realmId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "RealmCountry": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "country": {
            "$ref": "#/components/schemas/Country"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "defaultCurrency": {
            "$ref": "#/components/schemas/Currency"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "realm": {
            "$ref": "#/components/schemas/Realm"
          },
          "realmCountryId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "RealmCountryHealthArea": {
        "type": "object",
        "properties": {
          "healthAreaList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleCodeObject"
            }
          },
          "realmCountry": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          }
        }
      },
      "RealmCountryIdsAndHealthAreaIds_DropDownView": {
        "type": "object",
        "properties": {
          "healthAreaIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "realmCountryIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RealmCountryPlanningUnit": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "conversionMethod": {
            "type": "integer",
            "format": "int32"
          },
          "conversionNumber": {
            "type": "number",
            "format": "double"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "multiplier": {
            "type": "number",
            "format": "double"
          },
          "planningUnit": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "realmCountry": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "realmCountryPlanningUnitId": {
            "type": "integer",
            "format": "int32"
          },
          "skuCode": {
            "type": "string"
          },
          "unit": {
            "$ref": "#/components/schemas/Unit"
          }
        }
      },
      "RealmCountry_InternalView": {
        "type": "object",
        "properties": {
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel_InternalView"
          },
          "country": {
            "$ref": "#/components/schemas/Country_InternalView"
          },
          "defaultCurrency": {
            "$ref": "#/components/schemas/Currency_InternalView"
          },
          "realm": {
            "$ref": "#/components/schemas/Realm_InternalView"
          },
          "realmCountryId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "RealmProblem": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "criticality": {
            "$ref": "#/components/schemas/Criticality"
          },
          "data1": {
            "type": "string"
          },
          "data2": {
            "type": "string"
          },
          "data3": {
            "type": "string"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "problem": {
            "$ref": "#/components/schemas/Problem"
          },
          "problemType": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "realm": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          },
          "realmProblemId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "RealmProblem_InternalView": {
        "type": "object",
        "properties": {
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel_InternalView"
          },
          "criticality": {
            "$ref": "#/components/schemas/Criticality_InternalView"
          },
          "data1": {
            "type": "string"
          },
          "data2": {
            "type": "string"
          },
          "data3": {
            "type": "string"
          },
          "problem": {
            "$ref": "#/components/schemas/Problem_InternalView"
          },
          "problemType": {
            "$ref": "#/components/schemas/SimpleObject_InternalView"
          },
          "realm": {
            "$ref": "#/components/schemas/SimpleCodeObject_InternalView"
          },
          "realmProblemId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Realm_InternalView": {
        "type": "object",
        "properties": {
          "actualConsumptionMonthsInPast": {
            "type": "integer",
            "format": "int32"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel_InternalView"
          },
          "defaultRealm": {
            "type": "boolean"
          },
          "forecastConsumptionMonthsInPast": {
            "type": "integer",
            "format": "int32"
          },
          "inventoryMonthsInPast": {
            "type": "integer",
            "format": "int32"
          },
          "label": {
            "$ref": "#/components/schemas/Label_InternalView"
          },
          "maxMosMaxGaurdrail": {
            "type": "integer",
            "format": "int32"
          },
          "maxQplTolerance": {
            "type": "integer",
            "format": "int32"
          },
          "minCountForMode": {
            "type": "integer",
            "format": "int32"
          },
          "minMosMaxGaurdrail": {
            "type": "integer",
            "format": "int32"
          },
          "minMosMinGaurdrail": {
            "type": "integer",
            "format": "int32"
          },
          "minPercForMode": {
            "type": "number",
            "format": "double"
          },
          "minQplTolerance": {
            "type": "integer",
            "format": "int32"
          },
          "minQplToleranceCutOff": {
            "type": "integer",
            "format": "int32"
          },
          "noOfMonthsInFutureForBottomDashboard": {
            "type": "integer",
            "format": "int32"
          },
          "noOfMonthsInFutureForTopDashboard": {
            "type": "integer",
            "format": "int32"
          },
          "noOfMonthsInPastForBottomDashboard": {
            "type": "integer",
            "format": "int32"
          },
          "noOfMonthsInPastForTopDashboard": {
            "type": "integer",
            "format": "int32"
          },
          "realmCode": {
            "type": "string"
          },
          "realmId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Realm_UserListView": {
        "type": "object",
        "properties": {
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel_UserListView"
          },
          "defaultRealm": {
            "type": "boolean"
          },
          "label": {
            "$ref": "#/components/schemas/Label_UserListView"
          },
          "realmCode": {
            "type": "string"
          },
          "realmId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Region": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "capacityCbm": {
            "type": "number",
            "format": "double"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "gln": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "realmCountry": {
            "$ref": "#/components/schemas/RealmCountry"
          },
          "regionId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "RegionForecastErrorOutput_ReportView": {
        "type": "object",
        "properties": {
          "actualQty": {
            "type": "number",
            "format": "double"
          },
          "daysOfStockOut": {
            "type": "integer",
            "format": "int32"
          },
          "errorPerc": {
            "type": "number",
            "format": "double"
          },
          "forecastQty": {
            "type": "number",
            "format": "double"
          },
          "region": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "sumOfAbsDiff": {
            "type": "number",
            "format": "double"
          },
          "sumOfActual": {
            "type": "number",
            "format": "double"
          },
          "sumOfForecast": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "Region_InternalView": {
        "type": "object",
        "properties": {
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel_InternalView"
          },
          "capacityCbm": {
            "type": "number",
            "format": "double"
          },
          "gln": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label_InternalView"
          },
          "realmCountry": {
            "$ref": "#/components/schemas/RealmCountry_InternalView"
          },
          "regionId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ResponseCode": {
        "type": "object",
        "properties": {
          "messageCode": {
            "type": "string"
          }
        }
      },
      "ResponseCode_DropDown2View": {
        "type": "object",
        "properties": {
          "messageCode": {
            "type": "string"
          }
        }
      },
      "ResponseCode_DropDown3View": {
        "type": "object",
        "properties": {
          "messageCode": {
            "type": "string"
          }
        }
      },
      "ResponseCode_DropDownView": {
        "type": "object",
        "properties": {
          "messageCode": {
            "type": "string"
          }
        }
      },
      "ResponseCode_ExportApiView": {
        "type": "object",
        "properties": {
          "messageCode": {
            "type": "string"
          }
        }
      },
      "ResponseCode_InternalView": {
        "type": "object",
        "properties": {
          "messageCode": {
            "type": "string"
          }
        }
      },
      "ResponseCode_ReportView": {
        "type": "object",
        "properties": {
          "messageCode": {
            "type": "string"
          }
        }
      },
      "ResponseCode_UserListView": {
        "type": "object",
        "properties": {
          "messageCode": {
            "type": "string"
          }
        }
      },
      "ReviewedProblem": {
        "type": "object",
        "properties": {
          "data5": {
            "type": "string"
          },
          "dt": {
            "type": "string"
          },
          "notes": {
            "type": "string"
          },
          "planningUnit": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "problemReportId": {
            "type": "integer",
            "format": "int32"
          },
          "problemStatus": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "realmProblem": {
            "$ref": "#/components/schemas/RealmProblem"
          },
          "region": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "reviewed": {
            "type": "boolean"
          },
          "reviewedNotes": {
            "type": "string"
          },
          "shipmentId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Role": {
        "type": "object",
        "properties": {
          "businessFunctionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BusinessFunction"
            }
          },
          "businessFunctions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "canCreateRoleList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CanCreateRole"
            }
          },
          "canCreateRoles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "roleId": {
            "type": "string"
          }
        }
      },
      "Role_ReportView": {
        "type": "object",
        "properties": {
          "businessFunctionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BusinessFunction_ReportView"
            }
          },
          "businessFunctions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "canCreateRoleList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CanCreateRole_ReportView"
            }
          },
          "canCreateRoles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "label": {
            "$ref": "#/components/schemas/Label_ReportView"
          },
          "roleId": {
            "type": "string"
          }
        }
      },
      "Role_UserListView": {
        "type": "object",
        "properties": {
          "label": {
            "$ref": "#/components/schemas/Label_UserListView"
          },
          "roleId": {
            "type": "string"
          }
        }
      },
      "SelectedForecast": {
        "type": "object",
        "properties": {
          "consumptionExtrapolationId": {
            "type": "integer",
            "format": "int32"
          },
          "notes": {
            "type": "string"
          },
          "totalForecast": {
            "type": "number",
            "format": "double"
          },
          "treeAndScenario": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TreeAndScenario"
            }
          }
        }
      },
      "SelectedForecast_InternalView": {
        "type": "object",
        "properties": {
          "consumptionExtrapolationId": {
            "type": "integer",
            "format": "int32"
          },
          "notes": {
            "type": "string"
          },
          "totalForecast": {
            "type": "number",
            "format": "double"
          },
          "treeAndScenario": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TreeAndScenario_InternalView"
            }
          }
        }
      },
      "Shipment": {
        "type": "object",
        "properties": {
          "accountFlag": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "approvedDate": {
            "type": "string"
          },
          "arrivedDate": {
            "type": "string"
          },
          "autoGeneratedFreight": {
            "type": "boolean"
          },
          "batchInfoList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShipmentBatchInfo"
            }
          },
          "budget": {
            "$ref": "#/components/schemas/SimpleBudgetObject"
          },
          "conversionFactor": {
            "type": "number",
            "format": "double"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "dataSource": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "emergencyOrder": {
            "type": "boolean"
          },
          "erpFlag": {
            "type": "boolean"
          },
          "expectedDeliveryDate": {
            "type": "string"
          },
          "freightCost": {
            "type": "number",
            "format": "double"
          },
          "fundingSource": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "localProcurement": {
            "type": "boolean"
          },
          "notes": {
            "type": "string"
          },
          "orderNo": {
            "type": "string"
          },
          "parentLinkedShipmentId": {
            "type": "integer",
            "format": "int32"
          },
          "parentShipmentId": {
            "type": "integer",
            "format": "int32"
          },
          "plannedDate": {
            "type": "string"
          },
          "planningUnit": {
            "$ref": "#/components/schemas/SimplePlanningUnitProductCategoryObject"
          },
          "primeLineNo": {
            "type": "string"
          },
          "procurementAgent": {
            "$ref": "#/components/schemas/SimpleProcurementAgentObject"
          },
          "procurementUnit": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "productCost": {
            "type": "number",
            "format": "double"
          },
          "rate": {
            "type": "number",
            "format": "double"
          },
          "realmCountryPlanningUnit": {
            "$ref": "#/components/schemas/SimpleObjectWithMultiplier"
          },
          "receivedDate": {
            "type": "string"
          },
          "shipmentId": {
            "type": "integer",
            "format": "int32"
          },
          "shipmentMode": {
            "type": "string"
          },
          "shipmentQty": {
            "type": "number",
            "format": "double"
          },
          "shipmentRcpuQty": {
            "type": "integer",
            "format": "int64"
          },
          "shipmentStatus": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "shippedDate": {
            "type": "string"
          },
          "submittedDate": {
            "type": "string"
          },
          "suggestedQty": {
            "type": "integer",
            "format": "int64"
          },
          "supplier": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "tempParentLinkedShipmentId": {
            "type": "integer",
            "format": "int32"
          },
          "tempParentShipmentId": {
            "type": "integer",
            "format": "int32"
          },
          "tempShipmentId": {
            "type": "integer",
            "format": "int32"
          },
          "versionId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ShipmentBatchInfo": {
        "type": "object",
        "properties": {
          "batch": {
            "$ref": "#/components/schemas/Batch"
          },
          "shipmentQty": {
            "type": "integer",
            "format": "int64"
          },
          "shipmentTransBatchInfoId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ShipmentBatchInfo_InternalView": {
        "type": "object",
        "properties": {
          "batch": {
            "$ref": "#/components/schemas/Batch_InternalView"
          },
          "shipmentQty": {
            "type": "integer",
            "format": "int64"
          },
          "shipmentTransBatchInfoId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ShipmentBudgetAmt_InternalView": {
        "type": "object",
        "properties": {
          "budgetId": {
            "type": "integer",
            "format": "int32"
          },
          "conversionRateToUsd": {
            "type": "number",
            "format": "double"
          },
          "currencyId": {
            "type": "integer",
            "format": "int32"
          },
          "shipmentAmt": {
            "type": "number",
            "format": "double"
          },
          "shipmentId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ShipmentDetailsFundingSource_ReportView": {
        "type": "object",
        "properties": {
          "cost": {
            "type": "number",
            "format": "double"
          },
          "fundingSource": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          },
          "orderCount": {
            "type": "integer",
            "format": "int32"
          },
          "quantity": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ShipmentDetailsInput_ReportView": {
        "type": "object",
        "properties": {
          "budgetIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "budgetIdsString": {
            "type": "string"
          },
          "fundingSourceIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fundingSourceIdsString": {
            "type": "string"
          },
          "planningUnitIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "planningUnitIdsString": {
            "type": "string"
          },
          "programId": {
            "type": "integer",
            "format": "int32"
          },
          "reportView": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "stopDate": {
            "type": "string",
            "format": "date-time"
          },
          "versionId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ShipmentDetailsList_ReportView": {
        "type": "object",
        "properties": {
          "budget": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          },
          "emergencyOrder": {
            "type": "boolean"
          },
          "erpFlag": {
            "type": "boolean"
          },
          "expectedDeliveryDate": {
            "type": "string",
            "format": "date-time"
          },
          "forecastingUnit": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "freightCost": {
            "type": "number",
            "format": "double"
          },
          "fundingSource": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          },
          "localProcurement": {
            "type": "boolean"
          },
          "multiplier": {
            "type": "integer",
            "format": "int32"
          },
          "notes": {
            "type": "string"
          },
          "orderNo": {
            "type": "string"
          },
          "planningUnit": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "procurementAgent": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          },
          "productCost": {
            "type": "number",
            "format": "double"
          },
          "shipmentId": {
            "type": "integer",
            "format": "int32"
          },
          "shipmentQty": {
            "type": "number",
            "format": "double"
          },
          "shipmentStatus": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "totalCost": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ShipmentDetailsMonth_ReportView": {
        "type": "object",
        "properties": {
          "approvedCost": {
            "type": "number",
            "format": "double"
          },
          "arrivedCost": {
            "type": "number",
            "format": "double"
          },
          "dt": {
            "type": "string",
            "format": "date-time"
          },
          "onholdCost": {
            "type": "number",
            "format": "double"
          },
          "plannedCost": {
            "type": "number",
            "format": "double"
          },
          "receivedCost": {
            "type": "number",
            "format": "double"
          },
          "shippedCost": {
            "type": "number",
            "format": "double"
          },
          "submittedCost": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ShipmentDetailsOutput_ReportView": {
        "type": "object",
        "properties": {
          "shipmentDetailsFundingSourceList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShipmentDetailsFundingSource_ReportView"
            }
          },
          "shipmentDetailsList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShipmentDetailsList_ReportView"
            }
          },
          "shipmentDetailsMonthList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShipmentDetailsMonth_ReportView"
            }
          }
        }
      },
      "ShipmentGlobalDemandCountryShipmentSplit_ReportView": {
        "type": "object",
        "properties": {
          "country": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          },
          "orderedShipmentAmt": {
            "type": "number",
            "format": "double"
          },
          "plannedShipmentAmt": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ShipmentGlobalDemandCountrySplit_ReportView": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            }
          },
          "country": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          }
        }
      },
      "ShipmentGlobalDemandDateSplit_ReportView": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            }
          },
          "transDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ShipmentGlobalDemandInput_ReportView": {
        "type": "object",
        "properties": {
          "fundingSourceProcurementAgentIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fundingSourceProcurementAgentIdsString": {
            "type": "string"
          },
          "includePlannedShipments": {
            "type": "boolean"
          },
          "planningUnitId": {
            "type": "integer",
            "format": "int32"
          },
          "realmCountryIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "realmCountryIdsString": {
            "type": "string"
          },
          "realmId": {
            "type": "integer",
            "format": "int32"
          },
          "reportView": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "stopDate": {
            "type": "string",
            "format": "date-time"
          },
          "useApprovedSupplyPlanOnly": {
            "type": "boolean"
          }
        }
      },
      "ShipmentGlobalDemandOutput_ReportView": {
        "type": "object",
        "properties": {
          "countryShipmentSplitList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShipmentGlobalDemandCountryShipmentSplit_ReportView"
            }
          },
          "countrySplitList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShipmentGlobalDemandCountrySplit_ReportView"
            }
          },
          "dateSplitList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShipmentGlobalDemandDateSplit_ReportView"
            }
          },
          "shipmentList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShipmentGlobalDemandShipmentList_ReportView"
            }
          }
        }
      },
      "ShipmentGlobalDemandShipmentList_ReportView": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "double"
          },
          "country": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          },
          "fundingSourceProcurementAgent": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          },
          "shipmentStatus": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "transDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ShipmentInfo_ReportView": {
        "type": "object",
        "properties": {
          "dataSource": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "fundingSource": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          },
          "notes": {
            "type": "string"
          },
          "orderNo": {
            "type": "string"
          },
          "planningUnit": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "primeLineNo": {
            "type": "string"
          },
          "procurementAgent": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          },
          "program": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          },
          "receivedDate": {
            "type": "string",
            "format": "date-time"
          },
          "roNo": {
            "type": "string"
          },
          "roPrimeLineNo": {
            "type": "string"
          },
          "shipmentId": {
            "type": "integer",
            "format": "int32"
          },
          "shipmentQty": {
            "type": "number",
            "format": "double"
          },
          "shipmentStatus": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          }
        }
      },
      "ShipmentLinking_InternalView": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "childShipmentId": {
            "type": "integer",
            "format": "int32"
          },
          "conversionFactor": {
            "type": "number",
            "format": "double"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser_InternalView"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "erpPlanningUnit": {
            "$ref": "#/components/schemas/SimpleObject_InternalView"
          },
          "erpShipmentStatus": {
            "type": "string"
          },
          "knShipmentNo": {
            "type": "string"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser_InternalView"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "notes": {
            "type": "string"
          },
          "orderNo": {
            "type": "string"
          },
          "parentShipmentId": {
            "type": "integer",
            "format": "int32"
          },
          "primeLineNo": {
            "type": "string"
          },
          "procurementAgent": {
            "$ref": "#/components/schemas/SimpleCodeObject_InternalView"
          },
          "programId": {
            "type": "integer",
            "format": "int32"
          },
          "qatPlanningUnitId": {
            "type": "integer",
            "format": "int32"
          },
          "roNo": {
            "type": "string"
          },
          "roPrimeLineNo": {
            "type": "string"
          },
          "shipmentLinkingId": {
            "type": "integer",
            "format": "int32"
          },
          "tempChildShipmentId": {
            "type": "integer",
            "format": "int32"
          },
          "tempParentShipmentId": {
            "type": "integer",
            "format": "int32"
          },
          "versionId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ShipmentOverviewFundingSourceSplit_ReportView": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "double"
          },
          "fundingSource": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          }
        }
      },
      "ShipmentOverviewInput_ReportView": {
        "type": "object",
        "properties": {
          "fundingSourceIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fundingSourceIdsString": {
            "type": "string"
          },
          "groupByFundingSourceType": {
            "type": "boolean"
          },
          "groupByProcurementAgentType": {
            "type": "boolean"
          },
          "planningUnitIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "planningUnitIdsString": {
            "type": "string"
          },
          "programIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "programIdsString": {
            "type": "string"
          },
          "realmCountryIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "realmCountryIdsString": {
            "type": "string"
          },
          "realmId": {
            "type": "integer",
            "format": "int32"
          },
          "shipmentStatusIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "shipmentStatusIdsString": {
            "type": "string"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "stopDate": {
            "type": "string",
            "format": "date-time"
          },
          "useApprovedSupplyPlanOnly": {
            "type": "boolean"
          }
        }
      },
      "ShipmentOverviewOutput_ReportView": {
        "type": "object",
        "properties": {
          "fundingSourceSplit": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShipmentOverviewFundingSourceSplit_ReportView"
            }
          },
          "planningUnitSplit": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShipmentOverviewPlanningUnitSplit_ReportView"
            }
          },
          "procurementAgentSplit": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShipmentOverviewProcurementAgentSplit_ReportView"
            }
          }
        }
      },
      "ShipmentOverviewPlanningUnitSplit_ReportView": {
        "type": "object",
        "properties": {
          "multiplier": {
            "type": "integer",
            "format": "int32"
          },
          "orderedShipmentQty": {
            "type": "number",
            "format": "double"
          },
          "plannedShipmentQty": {
            "type": "number",
            "format": "double"
          },
          "planningUnit": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          }
        }
      },
      "ShipmentOverviewProcurementAgentSplit_ReportView": {
        "type": "object",
        "properties": {
          "multiplier": {
            "type": "integer",
            "format": "int32"
          },
          "planningUnit": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "procurementAgentQty": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            }
          },
          "total": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ShipmentReportInput_ReportView": {
        "type": "object",
        "properties": {
          "includePlannedShipments": {
            "type": "boolean"
          },
          "planningUnitIdString": {
            "type": "string"
          },
          "planningUnitIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "programId": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "stopDate": {
            "type": "string",
            "format": "date-time"
          },
          "versionId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ShipmentReportOutput_ReportView": {
        "type": "object",
        "properties": {
          "freightCost": {
            "type": "number",
            "format": "double"
          },
          "freightPerc": {
            "type": "number",
            "format": "double"
          },
          "planningUnit": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "productCost": {
            "type": "number",
            "format": "double"
          },
          "qty": {
            "type": "number",
            "format": "double"
          },
          "totalCost": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ShipmentStatus": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "nextShipmentStatusAllowed": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "nextShipmentStatusAllowedList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "shipmentStatusId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ShipmentSync": {
        "type": "object",
        "properties": {
          "batchInfoList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Batch"
            }
          },
          "problemReportList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProblemReport"
            }
          },
          "programId": {
            "type": "integer",
            "format": "int32"
          },
          "shipmentList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Shipment"
            }
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "versionId": {
            "type": "integer",
            "format": "int32"
          },
          "versionNotes": {
            "type": "string"
          }
        }
      },
      "Shipment_InternalView": {
        "type": "object",
        "properties": {
          "accountFlag": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "approvedDate": {
            "type": "string"
          },
          "arrivedDate": {
            "type": "string"
          },
          "autoGeneratedFreight": {
            "type": "boolean"
          },
          "batchInfoList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShipmentBatchInfo_InternalView"
            }
          },
          "budget": {
            "$ref": "#/components/schemas/SimpleBudgetObject_InternalView"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser_InternalView"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency_InternalView"
          },
          "dataSource": {
            "$ref": "#/components/schemas/SimpleObject_InternalView"
          },
          "emergencyOrder": {
            "type": "boolean"
          },
          "erpFlag": {
            "type": "boolean"
          },
          "expectedDeliveryDate": {
            "type": "string"
          },
          "freightCost": {
            "type": "number",
            "format": "double"
          },
          "fundingSource": {
            "$ref": "#/components/schemas/SimpleCodeObject_InternalView"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser_InternalView"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "localProcurement": {
            "type": "boolean"
          },
          "notes": {
            "type": "string"
          },
          "orderNo": {
            "type": "string"
          },
          "parentLinkedShipmentId": {
            "type": "integer",
            "format": "int32"
          },
          "parentShipmentId": {
            "type": "integer",
            "format": "int32"
          },
          "plannedDate": {
            "type": "string"
          },
          "planningUnit": {
            "$ref": "#/components/schemas/SimplePlanningUnitProductCategoryObject_InternalView"
          },
          "primeLineNo": {
            "type": "string"
          },
          "procurementAgent": {
            "$ref": "#/components/schemas/SimpleProcurementAgentObject_InternalView"
          },
          "procurementUnit": {
            "$ref": "#/components/schemas/SimpleObject_InternalView"
          },
          "productCost": {
            "type": "number",
            "format": "double"
          },
          "rate": {
            "type": "number",
            "format": "double"
          },
          "realmCountryPlanningUnit": {
            "$ref": "#/components/schemas/SimpleObjectWithMultiplier_InternalView"
          },
          "receivedDate": {
            "type": "string"
          },
          "shipmentId": {
            "type": "integer",
            "format": "int32"
          },
          "shipmentMode": {
            "type": "string"
          },
          "shipmentQty": {
            "type": "number",
            "format": "double"
          },
          "shipmentRcpuQty": {
            "type": "integer",
            "format": "int64"
          },
          "shipmentStatus": {
            "$ref": "#/components/schemas/SimpleObject_InternalView"
          },
          "shippedDate": {
            "type": "string"
          },
          "submittedDate": {
            "type": "string"
          },
          "suggestedQty": {
            "type": "integer",
            "format": "int64"
          },
          "supplier": {
            "$ref": "#/components/schemas/SimpleObject_InternalView"
          },
          "tempParentLinkedShipmentId": {
            "type": "integer",
            "format": "int32"
          },
          "tempParentShipmentId": {
            "type": "integer",
            "format": "int32"
          },
          "tempShipmentId": {
            "type": "integer",
            "format": "int32"
          },
          "versionId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "SimpleBaseModel": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "SimpleBatchQuantityWithTransHistory_ReportView": {
        "type": "object",
        "properties": {
          "adjustmentQty": {
            "type": "number",
            "format": "double"
          },
          "autoGenerated": {
            "type": "boolean"
          },
          "batchId": {
            "type": "integer",
            "format": "int32"
          },
          "batchNo": {
            "type": "string"
          },
          "consumptionQty": {
            "type": "number",
            "format": "double"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "expiredQty": {
            "type": "number",
            "format": "double"
          },
          "expiredQtyWps": {
            "type": "number",
            "format": "double"
          },
          "expiryDate": {
            "type": "string",
            "format": "date-time"
          },
          "openingBalance": {
            "type": "number",
            "format": "double"
          },
          "openingBalanceWps": {
            "type": "number",
            "format": "double"
          },
          "qty": {
            "type": "number",
            "format": "double"
          },
          "qtyWps": {
            "type": "number",
            "format": "double"
          },
          "shipmentQty": {
            "type": "number",
            "format": "double"
          },
          "shipmentQtyWps": {
            "type": "number",
            "format": "double"
          },
          "stockQty": {
            "type": "number",
            "format": "double"
          },
          "transDate": {
            "type": "string",
            "format": "date-time"
          },
          "unallocatedQty": {
            "type": "number",
            "format": "double"
          },
          "unallocatedQtyWps": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "SimpleBatchQuantity_InternalView": {
        "type": "object",
        "properties": {
          "adjustmentQty": {
            "type": "number",
            "format": "double"
          },
          "autoGenerated": {
            "type": "boolean"
          },
          "batchId": {
            "type": "integer",
            "format": "int32"
          },
          "batchNo": {
            "type": "string"
          },
          "consumptionQty": {
            "type": "number",
            "format": "double"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "expiredQty": {
            "type": "number",
            "format": "double"
          },
          "expiredQtyWps": {
            "type": "number",
            "format": "double"
          },
          "expiryDate": {
            "type": "string",
            "format": "date-time"
          },
          "openingBalance": {
            "type": "number",
            "format": "double"
          },
          "openingBalanceWps": {
            "type": "number",
            "format": "double"
          },
          "qty": {
            "type": "number",
            "format": "double"
          },
          "qtyWps": {
            "type": "number",
            "format": "double"
          },
          "shipmentQty": {
            "type": "number",
            "format": "double"
          },
          "shipmentQtyWps": {
            "type": "number",
            "format": "double"
          },
          "stockQty": {
            "type": "number",
            "format": "double"
          },
          "unallocatedQty": {
            "type": "number",
            "format": "double"
          },
          "unallocatedQtyWps": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "SimpleBudgetObject": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "SimpleBudgetObject_InternalView": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency_InternalView"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label_InternalView"
          }
        }
      },
      "SimpleCodeObject": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "SimpleCodeObject_DropDown2View": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label_DropDown2View"
          }
        }
      },
      "SimpleCodeObject_DropDownView": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label_DropDownView"
          }
        }
      },
      "SimpleCodeObject_InternalView": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label_InternalView"
          }
        }
      },
      "SimpleCodeObject_ReportView": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label_ReportView"
          }
        }
      },
      "SimpleEquivalencyUnit_ReportView": {
        "type": "object",
        "properties": {
          "forecastingUnitIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label_ReportView"
          }
        }
      },
      "SimpleForecastingUnitForAdjustPlanningUnit_InternalView": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label_InternalView"
          },
          "productCategory": {
            "$ref": "#/components/schemas/SimpleObject_InternalView"
          }
        }
      },
      "SimpleForecastingUnitObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "name": {
            "type": "string"
          },
          "productCategory": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "tracerCategory": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "unit": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          }
        }
      },
      "SimpleForecastingUnitObject_InternalView": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label_InternalView"
          },
          "productCategory": {
            "$ref": "#/components/schemas/SimpleObject_InternalView"
          },
          "tracerCategory": {
            "$ref": "#/components/schemas/SimpleObject_InternalView"
          },
          "unit": {
            "$ref": "#/components/schemas/SimpleCodeObject_InternalView"
          }
        }
      },
      "SimpleForecastingUnitProductCategoryObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "name": {
            "type": "string"
          },
          "productCategory": {
            "$ref": "#/components/schemas/SimpleObject"
          }
        }
      },
      "SimpleForecastingUnitProductCategoryObject_InternalView": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label_InternalView"
          },
          "productCategory": {
            "$ref": "#/components/schemas/SimpleObject_InternalView"
          }
        }
      },
      "SimpleFundingSourceObject_DropDownView": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "fundingSourceType": {
            "$ref": "#/components/schemas/SimpleCodeObject_DropDownView"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label_DropDownView"
          }
        }
      },
      "SimpleObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "SimpleObjectPrice": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "name": {
            "type": "string"
          },
          "price": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "SimpleObjectPrice_ReportView": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label_ReportView"
          },
          "price": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "SimpleObjectWithFu_ReportView": {
        "type": "object",
        "properties": {
          "forecastingUnitId": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label_ReportView"
          }
        }
      },
      "SimpleObjectWithMultiplier": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "multiplier": {
            "type": "number",
            "format": "double"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "SimpleObjectWithMultiplierAndActive_ReportView": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label_ReportView"
          },
          "multiplier": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "SimpleObjectWithMultiplier_InternalView": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label_InternalView"
          },
          "multiplier": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "SimpleObjectWithMultiplier_ReportView": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label_ReportView"
          },
          "multiplier": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "SimpleObjectWithType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "name": {
            "type": "string"
          },
          "typeId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "SimpleObjectWithType_DropDownView": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label_DropDownView"
          },
          "typeId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "SimpleObjectWithType_InternalView": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label_InternalView"
          },
          "typeId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "SimpleObject_DropDown2View": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label_DropDown2View"
          }
        }
      },
      "SimpleObject_DropDown3View": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "SimpleObject_DropDownView": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label_DropDownView"
          }
        }
      },
      "SimpleObject_InternalView": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label_InternalView"
          }
        }
      },
      "SimpleObject_ReportView": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label_ReportView"
          }
        }
      },
      "SimplePlanningUnitForAdjustPlanningUnit_InternalView": {
        "type": "object",
        "properties": {
          "forecastingUnit": {
            "$ref": "#/components/schemas/SimpleForecastingUnitForAdjustPlanningUnit_InternalView"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label_InternalView"
          }
        }
      },
      "SimplePlanningUnitForSupplyPlanObject_InternalView": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label_InternalView"
          },
          "notes": {
            "type": "string"
          }
        }
      },
      "SimplePlanningUnitObject": {
        "type": "object",
        "properties": {
          "forecastingUnit": {
            "$ref": "#/components/schemas/SimpleForecastingUnitObject"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "multiplier": {
            "type": "number",
            "format": "double"
          },
          "name": {
            "type": "string"
          },
          "unit": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          }
        }
      },
      "SimplePlanningUnitObject_InternalView": {
        "type": "object",
        "properties": {
          "forecastingUnit": {
            "$ref": "#/components/schemas/SimpleForecastingUnitObject_InternalView"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label_InternalView"
          },
          "multiplier": {
            "type": "number",
            "format": "double"
          },
          "unit": {
            "$ref": "#/components/schemas/SimpleCodeObject_InternalView"
          }
        }
      },
      "SimplePlanningUnitProductCategoryObject": {
        "type": "object",
        "properties": {
          "forecastingUnit": {
            "$ref": "#/components/schemas/SimpleForecastingUnitProductCategoryObject"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "SimplePlanningUnitProductCategoryObject_InternalView": {
        "type": "object",
        "properties": {
          "forecastingUnit": {
            "$ref": "#/components/schemas/SimpleForecastingUnitProductCategoryObject_InternalView"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label_InternalView"
          }
        }
      },
      "SimplePlanningUnitWithPrices": {
        "type": "object",
        "properties": {
          "forecastingUnit": {
            "$ref": "#/components/schemas/SimpleForecastingUnitObject"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "multiplier": {
            "type": "number",
            "format": "double"
          },
          "name": {
            "type": "string"
          },
          "procurementAgentPriceList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleObjectPrice"
            }
          },
          "unit": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          }
        }
      },
      "SimpleProcurementAgentObject": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "colorHtmlCode": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "SimpleProcurementAgentObject_InternalView": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "colorHtmlCode": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label_InternalView"
          }
        }
      },
      "SimpleProgram_DropDown2View": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "code": {
            "type": "string"
          },
          "currentVersionId": {
            "type": "integer",
            "format": "int32"
          },
          "healthAreaIdList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "healthAreaList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleCodeObject_DropDown2View"
            }
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label_DropDown2View"
          },
          "noOfMonthsInFutureForBottomDashboard": {
            "type": "integer",
            "format": "int32"
          },
          "noOfMonthsInPastForBottomDashboard": {
            "type": "integer",
            "format": "int32"
          },
          "organisation": {
            "$ref": "#/components/schemas/SimpleCodeObject_DropDown2View"
          },
          "programTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "realmCountry": {
            "$ref": "#/components/schemas/SimpleCodeObject_DropDown2View"
          },
          "realmId": {
            "type": "integer",
            "format": "int32"
          },
          "regionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleObject_DropDown2View"
            }
          }
        }
      },
      "SimpleProgram_DropDownView": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "code": {
            "type": "string"
          },
          "currentVersionId": {
            "type": "integer",
            "format": "int32"
          },
          "healthAreaIdList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label_DropDownView"
          },
          "programTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "realmId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "SimpleRealmCountryObject_ReportView": {
        "type": "object",
        "properties": {
          "countryCode": {
            "type": "string"
          },
          "countryCode2": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label_ReportView"
          },
          "realmCountryId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "SimpleUnitObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "name": {
            "type": "string"
          },
          "unit": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          }
        }
      },
      "SimpleUnitObjectWithMultiplier": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "multiplier": {
            "type": "number",
            "format": "double"
          },
          "name": {
            "type": "string"
          },
          "unit": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          }
        }
      },
      "SimpleUnitObjectWithMultiplier_InternalView": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label_InternalView"
          },
          "multiplier": {
            "type": "number",
            "format": "double"
          },
          "unit": {
            "$ref": "#/components/schemas/SimpleCodeObject_InternalView"
          }
        }
      },
      "SimplifiedSupplyPlan_InternalView": {
        "type": "object",
        "properties": {
          "actualFlag": {
            "type": "boolean"
          },
          "adjustmentQty": {
            "type": "number",
            "format": "double"
          },
          "amc": {
            "type": "number",
            "format": "double"
          },
          "amcCount": {
            "type": "integer",
            "format": "int32"
          },
          "approvedErpShipmentsTotalData": {
            "type": "number",
            "format": "double"
          },
          "approvedShipmentsTotalData": {
            "type": "number",
            "format": "double"
          },
          "batchDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleBatchQuantity_InternalView"
            }
          },
          "closingBalance": {
            "type": "number",
            "format": "double"
          },
          "closingBalanceWps": {
            "type": "number",
            "format": "double"
          },
          "consumptionQty": {
            "type": "number",
            "format": "double"
          },
          "erpTotalQty": {
            "type": "number",
            "format": "double"
          },
          "expiredStock": {
            "type": "number",
            "format": "double"
          },
          "expiredStockWps": {
            "type": "number",
            "format": "double"
          },
          "manualTotalQty": {
            "type": "number",
            "format": "double"
          },
          "maxQty": {
            "type": "number",
            "format": "double"
          },
          "maxStock": {
            "type": "number",
            "format": "double"
          },
          "maxStockMoS": {
            "type": "number",
            "format": "double"
          },
          "minQty": {
            "type": "number",
            "format": "double"
          },
          "minStock": {
            "type": "number",
            "format": "double"
          },
          "minStockMoS": {
            "type": "number",
            "format": "double"
          },
          "mos": {
            "type": "number",
            "format": "double"
          },
          "mosWps": {
            "type": "number",
            "format": "double"
          },
          "nationalAdjustment": {
            "type": "number",
            "format": "double"
          },
          "nationalAdjustmentWps": {
            "type": "number",
            "format": "double"
          },
          "onholdErpShipmentsTotalData": {
            "type": "number",
            "format": "double"
          },
          "onholdShipmentsTotalData": {
            "type": "number",
            "format": "double"
          },
          "openingBalance": {
            "type": "number",
            "format": "double"
          },
          "openingBalanceWps": {
            "type": "number",
            "format": "double"
          },
          "plannedErpShipmentsTotalData": {
            "type": "number",
            "format": "double"
          },
          "plannedShipmentsTotalData": {
            "type": "number",
            "format": "double"
          },
          "planningUnitId": {
            "type": "integer",
            "format": "int32"
          },
          "programId": {
            "type": "integer",
            "format": "int32"
          },
          "receivedErpShipmentsTotalData": {
            "type": "number",
            "format": "double"
          },
          "receivedShipmentsTotalData": {
            "type": "number",
            "format": "double"
          },
          "regionCount": {
            "type": "integer",
            "format": "int32"
          },
          "regionCountForStock": {
            "type": "integer",
            "format": "int32"
          },
          "shipmentTotalQty": {
            "type": "number",
            "format": "double"
          },
          "shippedErpShipmentsTotalData": {
            "type": "number",
            "format": "double"
          },
          "shippedShipmentsTotalData": {
            "type": "number",
            "format": "double"
          },
          "stockQty": {
            "type": "number",
            "format": "double"
          },
          "submittedErpShipmentsTotalData": {
            "type": "number",
            "format": "double"
          },
          "submittedShipmentsTotalData": {
            "type": "number",
            "format": "double"
          },
          "transDate": {
            "type": "string"
          },
          "unmetDemand": {
            "type": "number",
            "format": "double"
          },
          "unmetDemandWps": {
            "type": "number",
            "format": "double"
          },
          "versionId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "StaticLabelDTO": {
        "type": "object",
        "properties": {
          "labelCode": {
            "type": "string"
          },
          "staticLabelId": {
            "type": "integer",
            "format": "int32"
          },
          "staticLabelLanguages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StaticLabelLanguagesDTO"
            }
          }
        }
      },
      "StaticLabelLanguagesDTO": {
        "type": "object",
        "properties": {
          "labelText": {
            "type": "string"
          },
          "languageId": {
            "type": "integer",
            "format": "int32"
          },
          "staticLabelId": {
            "type": "integer",
            "format": "int32"
          },
          "staticLabelLanguageId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "StockAdjustmentReportInput_ReportView": {
        "type": "object",
        "properties": {
          "planningUnitIdString": {
            "type": "string"
          },
          "planningUnitIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "programId": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "startDateString": {
            "type": "string"
          },
          "stopDate": {
            "type": "string",
            "format": "date-time"
          },
          "stopDateString": {
            "type": "string"
          },
          "versionId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "StockAdjustmentReportOutput_ReportView": {
        "type": "object",
        "properties": {
          "dataSource": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "inventoryDate": {
            "type": "string",
            "format": "date-time"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser_ReportView"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "notes": {
            "type": "string"
          },
          "planningUnit": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "program": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "stockAdjustemntQty": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "StockStatusAcrossProductsForProgram_ReportView": {
        "type": "object",
        "properties": {
          "amc": {
            "type": "number",
            "format": "double"
          },
          "amcCount": {
            "type": "integer",
            "format": "int64"
          },
          "finalClosingBalance": {
            "type": "number",
            "format": "double"
          },
          "maxMos": {
            "type": "integer",
            "format": "int32"
          },
          "minMos": {
            "type": "integer",
            "format": "int32"
          },
          "mos": {
            "type": "number",
            "format": "double"
          },
          "outputString": {
            "type": "string"
          },
          "program": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          }
        }
      },
      "StockStatusAcrossProductsInput_ReportView": {
        "type": "object",
        "properties": {
          "dt": {
            "type": "string",
            "format": "date-time"
          },
          "programIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "programIdsString": {
            "type": "string"
          },
          "realmCountryIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "realmCountryIdsString": {
            "type": "string"
          },
          "realmId": {
            "type": "integer",
            "format": "int32"
          },
          "tracerCategoryIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tracerCategoryIdsString": {
            "type": "string"
          },
          "useApprovedSupplyPlanOnly": {
            "type": "boolean"
          }
        }
      },
      "StockStatusAcrossProductsOutput_ReportView": {
        "type": "object",
        "properties": {
          "planningUnit": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "programData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StockStatusAcrossProductsForProgram_ReportView"
            }
          }
        }
      },
      "StockStatusForProgramInput_ReportView": {
        "type": "object",
        "properties": {
          "dt": {
            "type": "string",
            "format": "date-time"
          },
          "includePlannedShipments": {
            "type": "boolean"
          },
          "programId": {
            "type": "integer",
            "format": "int32"
          },
          "tracerCategoryIdString": {
            "type": "string"
          },
          "tracerCategoryIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "versionId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "StockStatusForProgramOutput_ReportView": {
        "type": "object",
        "properties": {
          "amc": {
            "type": "number",
            "format": "double"
          },
          "lastStockCount": {
            "type": "string",
            "format": "date-time"
          },
          "maxMos": {
            "type": "number",
            "format": "double"
          },
          "minMos": {
            "type": "number",
            "format": "double"
          },
          "mos": {
            "type": "number",
            "format": "double"
          },
          "planBasedOn": {
            "type": "integer",
            "format": "int32"
          },
          "planningUnit": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "stock": {
            "type": "number",
            "format": "double"
          },
          "tracerCategory": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          }
        }
      },
      "StockStatusMatrixInput_ReportView": {
        "type": "object",
        "properties": {
          "includePlannedShipments": {
            "type": "boolean"
          },
          "planningUnitIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "programId": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "stopDate": {
            "type": "string",
            "format": "date-time"
          },
          "tracerCategoryIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "versionId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "StockStatusMatrixOutput_ReportView": {
        "type": "object",
        "properties": {
          "apr": {
            "type": "number",
            "format": "double"
          },
          "aprStock": {
            "type": "number",
            "format": "double"
          },
          "aug": {
            "type": "number",
            "format": "double"
          },
          "augStock": {
            "type": "number",
            "format": "double"
          },
          "dec": {
            "type": "number",
            "format": "double"
          },
          "decStock": {
            "type": "number",
            "format": "double"
          },
          "feb": {
            "type": "number",
            "format": "double"
          },
          "febStock": {
            "type": "number",
            "format": "double"
          },
          "jan": {
            "type": "number",
            "format": "double"
          },
          "janStock": {
            "type": "number",
            "format": "double"
          },
          "jul": {
            "type": "number",
            "format": "double"
          },
          "julStock": {
            "type": "number",
            "format": "double"
          },
          "jun": {
            "type": "number",
            "format": "double"
          },
          "junStock": {
            "type": "number",
            "format": "double"
          },
          "mar": {
            "type": "number",
            "format": "double"
          },
          "marStock": {
            "type": "number",
            "format": "double"
          },
          "maxStock": {
            "type": "number",
            "format": "double"
          },
          "may": {
            "type": "number",
            "format": "double"
          },
          "mayStock": {
            "type": "number",
            "format": "double"
          },
          "minMonthsOfStock": {
            "type": "integer",
            "format": "int32"
          },
          "multiplier": {
            "type": "integer",
            "format": "int32"
          },
          "nov": {
            "type": "number",
            "format": "double"
          },
          "novStock": {
            "type": "number",
            "format": "double"
          },
          "oct": {
            "type": "number",
            "format": "double"
          },
          "octStock": {
            "type": "number",
            "format": "double"
          },
          "planBasedOn": {
            "type": "integer",
            "format": "int32"
          },
          "planningUnit": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "reorderFrequency": {
            "type": "integer",
            "format": "int32"
          },
          "sep": {
            "type": "number",
            "format": "double"
          },
          "sepStock": {
            "type": "number",
            "format": "double"
          },
          "tracerCategoryId": {
            "type": "integer",
            "format": "int32"
          },
          "unit": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          },
          "year": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "StockStatusOverTimeInput_ReportView": {
        "type": "object",
        "properties": {
          "planningUnitIdString": {
            "type": "string"
          },
          "planningUnitIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "programId": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "stopDate": {
            "type": "string",
            "format": "date-time"
          },
          "versionId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "StockStatusOverTimeOutput_ReportView": {
        "type": "object",
        "properties": {
          "actualConsumption": {
            "type": "boolean"
          },
          "amc": {
            "type": "number",
            "format": "double"
          },
          "amcMonthCount": {
            "type": "integer",
            "format": "int32"
          },
          "consumptionQty": {
            "type": "number",
            "format": "double"
          },
          "dt": {
            "type": "string"
          },
          "mos": {
            "type": "number",
            "format": "double"
          },
          "mosFuture": {
            "type": "integer",
            "format": "int32"
          },
          "mosPast": {
            "type": "integer",
            "format": "int32"
          },
          "planningUnit": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "program": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          },
          "stock": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "StockStatusVerticalDropdownInput_ReportView": {
        "type": "object",
        "properties": {
          "onlyAllowPuPresentAcrossAllPrograms": {
            "type": "boolean"
          },
          "programIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "StockStatusVerticalInput_ReportView": {
        "type": "object",
        "properties": {
          "aggregate": {
            "type": "boolean"
          },
          "equivalencyUnitId": {
            "type": "integer",
            "format": "int32"
          },
          "programIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "programIdsString": {
            "type": "string"
          },
          "reportingUnitIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "reportingUnitIdsString": {
            "type": "string"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "stopDate": {
            "type": "string",
            "format": "date-time"
          },
          "viewBy": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "StockStatusVerticalOutput_ReportView": {
        "type": "object",
        "properties": {
          "actualConsumption": {
            "type": "boolean"
          },
          "actualConsumptionQty": {
            "type": "integer",
            "format": "int64"
          },
          "adjustment": {
            "type": "integer",
            "format": "int64"
          },
          "amc": {
            "type": "number",
            "format": "double"
          },
          "closingBalance": {
            "type": "integer",
            "format": "int64"
          },
          "consumptionInfo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConsumptionInfo_ReportView"
            }
          },
          "distributionLeadTime": {
            "type": "integer",
            "format": "int32"
          },
          "dt": {
            "type": "string",
            "format": "date-time"
          },
          "expiredStock": {
            "type": "integer",
            "format": "int64"
          },
          "finalConsumptionQty": {
            "type": "integer",
            "format": "int64"
          },
          "forecastedConsumptionQty": {
            "type": "integer",
            "format": "int64"
          },
          "inventoryInfo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryInfo_ReportView"
            }
          },
          "maxMos": {
            "type": "number",
            "format": "double"
          },
          "maxStock": {
            "type": "number",
            "format": "double"
          },
          "minMos": {
            "type": "number",
            "format": "double"
          },
          "minStock": {
            "type": "number",
            "format": "double"
          },
          "mos": {
            "type": "number",
            "format": "double"
          },
          "nationalAdjustment": {
            "type": "integer",
            "format": "int64"
          },
          "openingBalance": {
            "type": "integer",
            "format": "int64"
          },
          "planBasedOn": {
            "type": "integer",
            "format": "int32"
          },
          "planningUnit": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "regionCount": {
            "type": "integer",
            "format": "int32"
          },
          "regionCountForStock": {
            "type": "integer",
            "format": "int32"
          },
          "shipmentInfo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShipmentInfo_ReportView"
            }
          },
          "shipmentQty": {
            "type": "integer",
            "format": "int64"
          },
          "unmetDemand": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "Supplier": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "realm": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          },
          "supplierId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "SupplyPlanBatchInfo_ExportApiView": {
        "type": "object",
        "properties": {
          "adjustment": {
            "type": "integer",
            "format": "int32"
          },
          "batchId": {
            "type": "integer",
            "format": "int32"
          },
          "calculatedConsumption": {
            "type": "integer",
            "format": "int32"
          },
          "calculatedConsumptionWps": {
            "type": "integer",
            "format": "int32"
          },
          "closingBalance": {
            "type": "integer",
            "format": "int32"
          },
          "closingBalanceWps": {
            "type": "integer",
            "format": "int32"
          },
          "consumption": {
            "type": "integer",
            "format": "int32"
          },
          "erpApprovedShipmentQty": {
            "type": "integer",
            "format": "int32"
          },
          "erpOnholdShipmentQty": {
            "type": "integer",
            "format": "int32"
          },
          "erpPlannedShipmentQty": {
            "type": "integer",
            "format": "int32"
          },
          "erpReceivedShipmentQty": {
            "type": "integer",
            "format": "int32"
          },
          "erpShippedShipmentQty": {
            "type": "integer",
            "format": "int32"
          },
          "erpSubmittedShipmentQty": {
            "type": "integer",
            "format": "int32"
          },
          "expiredStock": {
            "type": "integer",
            "format": "int32"
          },
          "expiredStockWps": {
            "type": "integer",
            "format": "int32"
          },
          "expiryDate": {
            "type": "string"
          },
          "manualApprovedShipmentQty": {
            "type": "integer",
            "format": "int32"
          },
          "manualOnholdShipmentQty": {
            "type": "integer",
            "format": "int32"
          },
          "manualPlannedShipmentQty": {
            "type": "integer",
            "format": "int32"
          },
          "manualReceivedShipmentQty": {
            "type": "integer",
            "format": "int32"
          },
          "manualShippedShipmentQty": {
            "type": "integer",
            "format": "int32"
          },
          "manualSubmittedShipmentQty": {
            "type": "integer",
            "format": "int32"
          },
          "openingBalance": {
            "type": "integer",
            "format": "int32"
          },
          "openingBalanceWps": {
            "type": "integer",
            "format": "int32"
          },
          "shipmentQty": {
            "type": "integer",
            "format": "int32"
          },
          "stock": {
            "type": "integer",
            "format": "int32"
          },
          "supplyPlanId": {
            "type": "integer",
            "format": "int32"
          },
          "unmetDemand": {
            "type": "integer",
            "format": "int32"
          },
          "unmetDemandWps": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "SupplyPlanDate_ExportApiView": {
        "type": "object",
        "properties": {
          "batchList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SupplyPlanBatchInfo_ExportApiView"
            }
          },
          "planningUnitId": {
            "type": "integer",
            "format": "int32"
          },
          "transDate": {
            "type": "string"
          },
          "unallocatedConsumption": {
            "type": "integer",
            "format": "int32"
          },
          "unallocatedConsumptionWps": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "SupplyPlan_ExportApiView": {
        "type": "object",
        "properties": {
          "programId": {
            "type": "integer",
            "format": "int32"
          },
          "supplyPlanDateList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SupplyPlanDate_ExportApiView"
            }
          },
          "versionId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TesInputDTO": {
        "type": "object",
        "properties": {
          "alpha": {
            "type": "number",
            "format": "double"
          },
          "beta": {
            "type": "number",
            "format": "double"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            }
          },
          "frequency": {
            "type": "integer",
            "format": "int32"
          },
          "gamma": {
            "type": "number",
            "format": "double"
          },
          "level": {
            "type": "number",
            "format": "double"
          },
          "n": {
            "type": "integer",
            "format": "int32"
          },
          "optimize": {
            "type": "boolean"
          },
          "start": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TracerCategory": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "healthArea": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "realm": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          },
          "tracerCategoryId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TracerCategory_InternalView": {
        "type": "object",
        "properties": {
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel_InternalView"
          },
          "healthArea": {
            "$ref": "#/components/schemas/SimpleCodeObject_InternalView"
          },
          "label": {
            "$ref": "#/components/schemas/Label_InternalView"
          },
          "realm": {
            "$ref": "#/components/schemas/SimpleCodeObject_InternalView"
          },
          "tracerCategoryId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TreeAnchorInput": {
        "type": "object",
        "properties": {
          "programId": {
            "type": "integer",
            "format": "int32"
          },
          "treeIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "TreeAnchorOutput": {
        "type": "object",
        "properties": {
          "treeAnchorId": {
            "type": "integer",
            "format": "int32"
          },
          "treeId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TreeAndScenario": {
        "type": "object",
        "properties": {
          "scenarioId": {
            "type": "integer",
            "format": "int32"
          },
          "treeId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TreeAndScenario_InternalView": {
        "type": "object",
        "properties": {
          "scenarioId": {
            "type": "integer",
            "format": "int32"
          },
          "treeId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TreeLevel": {
        "type": "object",
        "properties": {
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "levelId": {
            "type": "integer",
            "format": "int32"
          },
          "levelNo": {
            "type": "integer",
            "format": "int32"
          },
          "unit": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          }
        }
      },
      "TreeLevel_DropDownView": {
        "type": "object"
      },
      "TreeLevel_InternalView": {
        "type": "object",
        "properties": {
          "label": {
            "$ref": "#/components/schemas/Label_InternalView"
          },
          "levelId": {
            "type": "integer",
            "format": "int32"
          },
          "levelNo": {
            "type": "integer",
            "format": "int32"
          },
          "unit": {
            "$ref": "#/components/schemas/SimpleCodeObject_InternalView"
          }
        }
      },
      "TreeNode": {
        "type": "object",
        "properties": {
          "collapsed": {
            "type": "boolean"
          },
          "downwardAggregationAllowed": {
            "type": "boolean"
          },
          "downwardAggregationList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DownwardAggregation"
            }
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "nodeDataMap": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TreeNodeData"
              }
            }
          },
          "nodeId": {
            "type": "integer",
            "format": "int32"
          },
          "nodeType": {
            "$ref": "#/components/schemas/NodeType"
          },
          "nodeUnit": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          },
          "parentNodeId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TreeNodeData": {
        "type": "object",
        "properties": {
          "annualTargetCalculator": {
            "$ref": "#/components/schemas/AnnualTargetCalculator"
          },
          "calculatedDataValue": {
            "type": "number",
            "format": "double"
          },
          "dataValue": {
            "type": "number",
            "format": "double"
          },
          "extrapolation": {
            "type": "boolean"
          },
          "fuNode": {
            "$ref": "#/components/schemas/TreeNodeDataFu"
          },
          "hasAnnualTargetCalculatorData": {
            "type": "boolean"
          },
          "manualChangesEffectFuture": {
            "type": "boolean"
          },
          "month": {
            "type": "string"
          },
          "monthNo": {
            "type": "integer",
            "format": "int32"
          },
          "nodeDataExtrapolation": {
            "$ref": "#/components/schemas/NodeDataExtrapolation"
          },
          "nodeDataExtrapolationOptionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodeDataExtrapolationOption"
            }
          },
          "nodeDataId": {
            "type": "integer",
            "format": "int32"
          },
          "nodeDataModelingList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodeDataModeling"
            }
          },
          "nodeDataMomList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodeDataMom"
            }
          },
          "nodeDataOverrideList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodeDataOverride"
            }
          },
          "notes": {
            "type": "string"
          },
          "puNode": {
            "$ref": "#/components/schemas/TreeNodeDataPu"
          }
        }
      },
      "TreeNodeDataFu": {
        "type": "object",
        "properties": {
          "forecastingUnit": {
            "$ref": "#/components/schemas/SimpleForecastingUnitObject"
          },
          "lagInMonths": {
            "type": "integer",
            "format": "int32"
          },
          "noOfForecastingUnitsPerPerson": {
            "type": "number",
            "format": "double"
          },
          "noOfPersons": {
            "type": "integer",
            "format": "int32"
          },
          "nodeDataFuId": {
            "type": "integer",
            "format": "int32"
          },
          "oneTimeDispensing": {
            "type": "boolean"
          },
          "oneTimeUsage": {
            "type": "boolean"
          },
          "repeatCount": {
            "type": "number",
            "format": "double"
          },
          "repeatUsagePeriod": {
            "$ref": "#/components/schemas/UsagePeriod"
          },
          "usageFrequency": {
            "type": "number",
            "format": "double"
          },
          "usagePeriod": {
            "$ref": "#/components/schemas/UsagePeriod"
          },
          "usageType": {
            "$ref": "#/components/schemas/SimpleObject"
          }
        }
      },
      "TreeNodeDataFu_InternalView": {
        "type": "object",
        "properties": {
          "forecastingUnit": {
            "$ref": "#/components/schemas/SimpleForecastingUnitObject_InternalView"
          },
          "lagInMonths": {
            "type": "integer",
            "format": "int32"
          },
          "noOfForecastingUnitsPerPerson": {
            "type": "number",
            "format": "double"
          },
          "noOfPersons": {
            "type": "integer",
            "format": "int32"
          },
          "nodeDataFuId": {
            "type": "integer",
            "format": "int32"
          },
          "oneTimeDispensing": {
            "type": "boolean"
          },
          "oneTimeUsage": {
            "type": "boolean"
          },
          "repeatCount": {
            "type": "number",
            "format": "double"
          },
          "repeatUsagePeriod": {
            "$ref": "#/components/schemas/UsagePeriod_InternalView"
          },
          "usageFrequency": {
            "type": "number",
            "format": "double"
          },
          "usagePeriod": {
            "$ref": "#/components/schemas/UsagePeriod_InternalView"
          },
          "usageType": {
            "$ref": "#/components/schemas/SimpleObject_InternalView"
          }
        }
      },
      "TreeNodeDataPu": {
        "type": "object",
        "properties": {
          "nodeDataPuId": {
            "type": "integer",
            "format": "int32"
          },
          "planningUnit": {
            "$ref": "#/components/schemas/SimpleUnitObjectWithMultiplier"
          },
          "puPerVisit": {
            "type": "number",
            "format": "double"
          },
          "refillMonths": {
            "type": "number",
            "format": "double"
          },
          "sharePlanningUnit": {
            "type": "boolean"
          }
        }
      },
      "TreeNodeDataPu_InternalView": {
        "type": "object",
        "properties": {
          "nodeDataPuId": {
            "type": "integer",
            "format": "int32"
          },
          "planningUnit": {
            "$ref": "#/components/schemas/SimpleUnitObjectWithMultiplier_InternalView"
          },
          "puPerVisit": {
            "type": "number",
            "format": "double"
          },
          "refillMonths": {
            "type": "number",
            "format": "double"
          },
          "sharePlanningUnit": {
            "type": "boolean"
          }
        }
      },
      "TreeNodeData_InternalView": {
        "type": "object",
        "properties": {
          "annualTargetCalculator": {
            "$ref": "#/components/schemas/AnnualTargetCalculator_InternalView"
          },
          "calculatedDataValue": {
            "type": "number",
            "format": "double"
          },
          "dataValue": {
            "type": "number",
            "format": "double"
          },
          "extrapolation": {
            "type": "boolean"
          },
          "fuNode": {
            "$ref": "#/components/schemas/TreeNodeDataFu_InternalView"
          },
          "hasAnnualTargetCalculatorData": {
            "type": "boolean"
          },
          "manualChangesEffectFuture": {
            "type": "boolean"
          },
          "month": {
            "type": "string"
          },
          "monthNo": {
            "type": "integer",
            "format": "int32"
          },
          "nodeDataExtrapolation": {
            "$ref": "#/components/schemas/NodeDataExtrapolation_InternalView"
          },
          "nodeDataExtrapolationOptionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodeDataExtrapolationOption_InternalView"
            }
          },
          "nodeDataId": {
            "type": "integer",
            "format": "int32"
          },
          "nodeDataModelingList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodeDataModeling_InternalView"
            }
          },
          "nodeDataMomList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodeDataMom_InternalView"
            }
          },
          "nodeDataOverrideList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodeDataOverride_InternalView"
            }
          },
          "notes": {
            "type": "string"
          },
          "puNode": {
            "$ref": "#/components/schemas/TreeNodeDataPu_InternalView"
          }
        }
      },
      "TreeNode_InternalView": {
        "type": "object",
        "properties": {
          "collapsed": {
            "type": "boolean"
          },
          "downwardAggregationAllowed": {
            "type": "boolean"
          },
          "downwardAggregationList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DownwardAggregation_InternalView"
            }
          },
          "label": {
            "$ref": "#/components/schemas/Label_InternalView"
          },
          "nodeDataMap": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TreeNodeData_InternalView"
              }
            }
          },
          "nodeId": {
            "type": "integer",
            "format": "int32"
          },
          "nodeType": {
            "$ref": "#/components/schemas/NodeType_InternalView"
          },
          "nodeUnit": {
            "$ref": "#/components/schemas/SimpleCodeObject_InternalView"
          },
          "parentNodeId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TreeScenario_InternalView": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "idString": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Label_InternalView"
          },
          "notes": {
            "type": "string"
          }
        }
      },
      "TreeTemplate": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "flatList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ForecastNodeTreeNode"
            }
          },
          "forecastMethod": {
            "$ref": "#/components/schemas/SimpleObjectWithType"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "levelList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TreeLevel"
            }
          },
          "monthsInFuture": {
            "type": "integer",
            "format": "int32"
          },
          "monthsInPast": {
            "type": "integer",
            "format": "int32"
          },
          "notes": {
            "type": "string"
          },
          "realm": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          },
          "rootNodeType": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "treeTemplateId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TreeTemplate_DropDownView": {
        "type": "object",
        "properties": {
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel_DropDownView"
          },
          "flatList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ForecastNodeTreeNode_DropDownView"
            }
          },
          "forecastMethod": {
            "$ref": "#/components/schemas/SimpleObjectWithType_DropDownView"
          },
          "label": {
            "$ref": "#/components/schemas/Label_DropDownView"
          },
          "levelList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TreeLevel_DropDownView"
            }
          },
          "monthsInFuture": {
            "type": "integer",
            "format": "int32"
          },
          "monthsInPast": {
            "type": "integer",
            "format": "int32"
          },
          "notes": {
            "type": "string"
          },
          "realm": {
            "$ref": "#/components/schemas/SimpleCodeObject_DropDownView"
          },
          "rootNodeType": {
            "$ref": "#/components/schemas/SimpleObject_DropDownView"
          },
          "treeTemplateId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Unit": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "dimension": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "unitCode": {
            "type": "string"
          },
          "unitId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "UpdateProgramInfoOutput_ReportView": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "healthAreas": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "lastUpdatedBy": {
            "$ref": "#/components/schemas/BasicUser_ReportView"
          },
          "lastUpdatedDate": {
            "type": "string",
            "format": "date-time"
          },
          "organisation": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "program": {
            "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
          },
          "programManager": {
            "type": "string"
          },
          "programNotes": {
            "type": "string"
          },
          "realm": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "realmCountry": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          },
          "regions": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          }
        }
      },
      "UpdateProgramVersion": {
        "type": "object",
        "properties": {
          "notes": {
            "type": "string"
          },
          "reviewedProblemList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReviewedProblem"
            }
          }
        }
      },
      "UsagePeriod": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "convertToMonth": {
            "type": "number",
            "format": "double"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "usagePeriodId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "UsagePeriod_InternalView": {
        "type": "object",
        "properties": {
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel_InternalView"
          },
          "convertToMonth": {
            "type": "number",
            "format": "double"
          },
          "label": {
            "$ref": "#/components/schemas/Label_InternalView"
          },
          "usagePeriodId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "UsageTemplate": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "forecastingUnit": {
            "$ref": "#/components/schemas/SimpleUnitObject"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "lagInMonths": {
            "type": "integer",
            "format": "int32"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "noOfFUPerPersonPerMonth": {
            "type": "number",
            "format": "double"
          },
          "noOfFUPerPersonPerTime": {
            "type": "number",
            "format": "double"
          },
          "noOfFURequired": {
            "type": "number",
            "format": "double"
          },
          "noOfForecastingUnits": {
            "type": "number",
            "format": "double"
          },
          "noOfPatients": {
            "type": "integer",
            "format": "int32"
          },
          "notes": {
            "type": "string"
          },
          "oneTimeUsage": {
            "type": "boolean"
          },
          "program": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          },
          "realmId": {
            "type": "integer",
            "format": "int32"
          },
          "repeatCount": {
            "type": "number",
            "format": "double"
          },
          "repeatUsagePeriod": {
            "$ref": "#/components/schemas/UsagePeriod"
          },
          "tracerCategory": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "unit": {
            "$ref": "#/components/schemas/SimpleCodeObject"
          },
          "usageFrequencyCount": {
            "type": "number",
            "format": "double"
          },
          "usageFrequencyUsagePeriod": {
            "$ref": "#/components/schemas/UsagePeriod"
          },
          "usageInWords": {
            "$ref": "#/components/schemas/Label"
          },
          "usageTemplateId": {
            "type": "integer",
            "format": "int32"
          },
          "usageType": {
            "$ref": "#/components/schemas/SimpleObject"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel"
          },
          "businessFunctionList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "defaultModuleId": {
            "type": "integer",
            "format": "int32"
          },
          "defaultThemeId": {
            "type": "integer",
            "format": "int32"
          },
          "editable": {
            "type": "boolean"
          },
          "emailId": {
            "type": "string"
          },
          "faildAttempts": {
            "type": "integer",
            "format": "int32"
          },
          "language": {
            "$ref": "#/components/schemas/Language"
          },
          "lastLoginDate": {
            "type": "string",
            "format": "date-time"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "orgAndCountry": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "realm": {
            "$ref": "#/components/schemas/Realm"
          },
          "roleList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Role"
            }
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "showDecimals": {
            "type": "boolean"
          },
          "userAclList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserAcl"
            }
          },
          "userAcls": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserAcl"
            }
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "UserAcl": {
        "type": "object",
        "properties": {
          "countryName": {
            "$ref": "#/components/schemas/Label"
          },
          "healthAreaId": {
            "type": "integer",
            "format": "int32"
          },
          "healthAreaName": {
            "$ref": "#/components/schemas/Label"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "organisationId": {
            "type": "integer",
            "format": "int32"
          },
          "organisationName": {
            "$ref": "#/components/schemas/Label"
          },
          "programCode": {
            "type": "string"
          },
          "programId": {
            "type": "integer",
            "format": "int32"
          },
          "programName": {
            "$ref": "#/components/schemas/Label"
          },
          "programTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "realmCountryId": {
            "type": "integer",
            "format": "int32"
          },
          "roleDesc": {
            "$ref": "#/components/schemas/Label"
          },
          "roleId": {
            "type": "string"
          },
          "userAclId": {
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "UserAcl_UserListView": {
        "type": "object",
        "properties": {
          "countryName": {
            "$ref": "#/components/schemas/Label_UserListView"
          },
          "healthAreaId": {
            "type": "integer",
            "format": "int32"
          },
          "healthAreaName": {
            "$ref": "#/components/schemas/Label_UserListView"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "organisationId": {
            "type": "integer",
            "format": "int32"
          },
          "organisationName": {
            "$ref": "#/components/schemas/Label_UserListView"
          },
          "programCode": {
            "type": "string"
          },
          "programId": {
            "type": "integer",
            "format": "int32"
          },
          "programName": {
            "$ref": "#/components/schemas/Label_UserListView"
          },
          "programTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "realmCountryId": {
            "type": "integer",
            "format": "int32"
          },
          "roleDesc": {
            "$ref": "#/components/schemas/Label_UserListView"
          },
          "roleId": {
            "type": "string"
          },
          "userAclId": {
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "User_UserListView": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "baseModel": {
            "$ref": "#/components/schemas/BaseModel_UserListView"
          },
          "businessFunctionList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser_UserListView"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "defaultModuleId": {
            "type": "integer",
            "format": "int32"
          },
          "defaultThemeId": {
            "type": "integer",
            "format": "int32"
          },
          "editable": {
            "type": "boolean"
          },
          "emailId": {
            "type": "string"
          },
          "faildAttempts": {
            "type": "integer",
            "format": "int32"
          },
          "language": {
            "$ref": "#/components/schemas/Language_UserListView"
          },
          "lastLoginDate": {
            "type": "string",
            "format": "date-time"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser_UserListView"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "orgAndCountry": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "realm": {
            "$ref": "#/components/schemas/Realm_UserListView"
          },
          "roleList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Role_UserListView"
            }
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "showDecimals": {
            "type": "boolean"
          },
          "userAclList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserAcl_UserListView"
            }
          },
          "userAcls": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserAcl_UserListView"
            }
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "Version": {
        "type": "object",
        "properties": {
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "daysInMonth": {
            "type": "integer",
            "format": "int32"
          },
          "forecastStartDate": {
            "type": "string",
            "format": "date-time"
          },
          "forecastStopDate": {
            "type": "string",
            "format": "date-time"
          },
          "forecastThresholdHighPerc": {
            "type": "number",
            "format": "double"
          },
          "forecastThresholdLowPerc": {
            "type": "number",
            "format": "double"
          },
          "freightPerc": {
            "type": "number",
            "format": "double"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "notes": {
            "type": "string"
          },
          "versionId": {
            "type": "integer",
            "format": "int32"
          },
          "versionStatus": {
            "$ref": "#/components/schemas/SimpleObject"
          },
          "versionType": {
            "$ref": "#/components/schemas/SimpleObject"
          }
        }
      },
      "Version_DropDownView": {
        "type": "object",
        "properties": {
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "forecastStartDate": {
            "type": "string",
            "format": "date-time"
          },
          "forecastStopDate": {
            "type": "string",
            "format": "date-time"
          },
          "versionId": {
            "type": "integer",
            "format": "int32"
          },
          "versionStatus": {
            "$ref": "#/components/schemas/SimpleObject_DropDownView"
          },
          "versionType": {
            "$ref": "#/components/schemas/SimpleObject_DropDownView"
          }
        }
      },
      "Version_InternalView": {
        "type": "object",
        "properties": {
          "createdBy": {
            "$ref": "#/components/schemas/BasicUser_InternalView"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "daysInMonth": {
            "type": "integer",
            "format": "int32"
          },
          "forecastStartDate": {
            "type": "string",
            "format": "date-time"
          },
          "forecastStopDate": {
            "type": "string",
            "format": "date-time"
          },
          "forecastThresholdHighPerc": {
            "type": "number",
            "format": "double"
          },
          "forecastThresholdLowPerc": {
            "type": "number",
            "format": "double"
          },
          "freightPerc": {
            "type": "number",
            "format": "double"
          },
          "lastModifiedBy": {
            "$ref": "#/components/schemas/BasicUser_InternalView"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "notes": {
            "type": "string"
          },
          "versionId": {
            "type": "integer",
            "format": "int32"
          },
          "versionStatus": {
            "$ref": "#/components/schemas/SimpleObject_InternalView"
          },
          "versionType": {
            "$ref": "#/components/schemas/SimpleObject_InternalView"
          }
        }
      },
      "WarehouseByCountryInput_ReportView": {
        "type": "object",
        "properties": {
          "realmCountryIdString": {
            "type": "string"
          },
          "realmCountryIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "WarehouseByCountryOutput_ReportView": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "capacityCbm": {
            "type": "number",
            "format": "double"
          },
          "gln": {
            "type": "string"
          },
          "realmCountry": {
            "$ref": "#/components/schemas/SimpleRealmCountryObject_ReportView"
          },
          "region": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          }
        }
      },
      "WarehouseCapacityInput_ReportView": {
        "type": "object",
        "properties": {
          "programIdString": {
            "type": "string"
          },
          "programIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "realmCountryIdString": {
            "type": "string"
          },
          "realmCountryIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "WarehouseCapacityOutput_ReportView": {
        "type": "object",
        "properties": {
          "capacityCbm": {
            "type": "number",
            "format": "double"
          },
          "gln": {
            "type": "string"
          },
          "programList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleCodeObject_ReportView"
            }
          },
          "realmCountry": {
            "$ref": "#/components/schemas/SimpleRealmCountryObject_ReportView"
          },
          "region": {
            "$ref": "#/components/schemas/SimpleObject_ReportView"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "bearerFormat": "JWT",
        "description": "Enter the JWT token in the format: Bearer \u003Ctoken\u003E",
        "scheme": "bearer",
        "type": "http"
      }
    }
  }
}